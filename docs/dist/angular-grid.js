var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var FUNCTION_STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
        var FUNCTION_ARGUMENT_NAMES = /([^\s,]+)/g;
        var Utils = (function () {
            function Utils() {
            }
            Utils.iterateObject = function (object, callback) {
                var keys = Object.keys(object);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    var value = object[key];
                    callback(key, value);
                }
            };
            Utils.map = function (array, callback) {
                var result = [];
                for (var i = 0; i < array.length; i++) {
                    var item = array[i];
                    var mappedItem = callback(item);
                    result.push(mappedItem);
                }
                return result;
            };
            Utils.forEach = function (array, callback) {
                if (!array) {
                    return;
                }
                for (var i = 0; i < array.length; i++) {
                    var value = array[i];
                    callback(value, i);
                }
            };
            Utils.getFunctionParameters = function (func) {
                var fnStr = func.toString().replace(FUNCTION_STRIP_COMMENTS, '');
                var result = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(FUNCTION_ARGUMENT_NAMES);
                if (result === null) {
                    return [];
                }
                else {
                    return result;
                }
            };
            Utils.find = function (collection, predicate, value) {
                if (collection === null || collection === undefined) {
                    return null;
                }
                for (var i = 0; i < collection.length; i++) {
                    if (collection[i][predicate] === value) {
                        return collection[i];
                    }
                }
                return null;
            };
            Utils.toStrings = function (array) {
                return this.map(array, function (item) {
                    if (item === undefined || item === null || !item.toString) {
                        return null;
                    }
                    else {
                        return item.toString();
                    }
                });
            };
            Utils.iterateArray = function (array, callback) {
                for (var index = 0; index < array.length; index++) {
                    var value = array[index];
                    callback(value, index);
                }
            };
            Utils.getValue = function (expressionService, data, colDef, node, api, context) {
                var valueGetter = colDef.valueGetter;
                var field = colDef.field;
                // if there is a value getter, this gets precedence over a field
                if (valueGetter) {
                    var params = {
                        data: data,
                        node: node,
                        colDef: colDef,
                        api: api,
                        context: context
                    };
                    if (typeof valueGetter === 'function') {
                        // valueGetter is a function, so just call it
                        return valueGetter(params);
                    }
                    else if (typeof valueGetter === 'string') {
                        // valueGetter is an expression, so execute the expression
                        return expressionService.evaluate(valueGetter, params);
                    }
                }
                else if (field && data) {
                    return data[field];
                }
                else {
                    return undefined;
                }
            };
            //Returns true if it is a DOM node
            //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
            Utils.isNode = function (o) {
                return (typeof Node === "object" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
            };
            //Returns true if it is a DOM element
            //taken from: http://stackoverflow.com/questions/384286/javascript-isdom-how-do-you-check-if-a-javascript-object-is-a-dom-object
            Utils.isElement = function (o) {
                return (typeof HTMLElement === "object" ? o instanceof HTMLElement : o && typeof o === "object" && o !== null && o.nodeType === 1 && typeof o.nodeName === "string");
            };
            Utils.isNodeOrElement = function (o) {
                return this.isNode(o) || this.isElement(o);
            };
            //adds all type of change listeners to an element, intended to be a text field
            Utils.addChangeListener = function (element, listener) {
                element.addEventListener("changed", listener);
                element.addEventListener("paste", listener);
                element.addEventListener("input", listener);
            };
            //if value is undefined, null or blank, returns null, otherwise returns the value
            Utils.makeNull = function (value) {
                if (value === null || value === undefined || value === "") {
                    return null;
                }
                else {
                    return value;
                }
            };
            Utils.removeAllChildren = function (node) {
                if (node) {
                    while (node.hasChildNodes()) {
                        node.removeChild(node.lastChild);
                    }
                }
            };
            Utils.removeElement = function (parent, cssSelector) {
                this.removeFromParent(parent.querySelector(cssSelector));
            };
            Utils.removeFromParent = function (node) {
                if (node && node.parentNode) {
                    node.parentNode.removeChild(node);
                }
            };
            Utils.isVisible = function (element) {
                return (element.offsetParent !== null);
            };
            //loads the template and returns it as an element. makes up for no simple way in
            //the dom api to load html directly, eg we cannot do this: document.createElement(template)
            Utils.loadTemplate = function (template) {
                var tempDiv = document.createElement("div");
                tempDiv.innerHTML = template;
                return tempDiv.firstChild;
            };
            Utils.querySelectorAll_addCssClass = function (eParent, selector, cssClass) {
                var eRows = eParent.querySelectorAll(selector);
                for (var k = 0; k < eRows.length; k++) {
                    this.addCssClass(eRows[k], cssClass);
                }
            };
            Utils.querySelectorAll_removeCssClass = function (eParent, selector, cssClass) {
                var eRows = eParent.querySelectorAll(selector);
                for (var k = 0; k < eRows.length; k++) {
                    this.removeCssClass(eRows[k], cssClass);
                }
            };
            Utils.querySelectorAll_replaceCssClass = function (eParent, selector, cssClassToRemove, cssClassToAdd) {
                var eRows = eParent.querySelectorAll(selector);
                for (var k = 0; k < eRows.length; k++) {
                    this.removeCssClass(eRows[k], cssClassToRemove);
                    this.addCssClass(eRows[k], cssClassToAdd);
                }
            };
            Utils.addOrRemoveCssClass = function (element, className, addOrRemove) {
                if (addOrRemove) {
                    this.addCssClass(element, className);
                }
                else {
                    this.removeCssClass(element, className);
                }
            };
            Utils.addCssClass = function (element, className) {
                if (element.className && element.className.length > 0) {
                    var cssClasses = element.className.split(' ');
                    if (cssClasses.indexOf(className) < 0) {
                        cssClasses.push(className);
                        element.className = cssClasses.join(' ');
                    }
                }
                else {
                    element.className = className;
                }
            };
            Utils.offsetHeight = function (element) {
                return element && element.clientHeight ? element.clientHeight : 0;
            };
            Utils.offsetWidth = function (element) {
                return element && element.clientWidth ? element.clientWidth : 0;
            };
            Utils.removeCssClass = function (element, className) {
                if (element.className && element.className.length > 0) {
                    var cssClasses = element.className.split(' ');
                    var index = cssClasses.indexOf(className);
                    if (index >= 0) {
                        cssClasses.splice(index, 1);
                        element.className = cssClasses.join(' ');
                    }
                }
            };
            Utils.removeFromArray = function (array, object) {
                array.splice(array.indexOf(object), 1);
            };
            Utils.defaultComparator = function (valueA, valueB) {
                var valueAMissing = valueA === null || valueA === undefined;
                var valueBMissing = valueB === null || valueB === undefined;
                if (valueAMissing && valueBMissing) {
                    return 0;
                }
                if (valueAMissing) {
                    return -1;
                }
                if (valueBMissing) {
                    return 1;
                }
                if (valueA < valueB) {
                    return -1;
                }
                else if (valueA > valueB) {
                    return 1;
                }
                else {
                    return 0;
                }
            };
            Utils.formatWidth = function (width) {
                if (typeof width === "number") {
                    return width + "px";
                }
                else {
                    return width;
                }
            };
            // tries to use the provided renderer. if a renderer found, returns true.
            // if no renderer, returns false.
            Utils.useRenderer = function (eParent, eRenderer, params) {
                var resultFromRenderer = eRenderer(params);
                if (this.isNode(resultFromRenderer) || this.isElement(resultFromRenderer)) {
                    //a dom node or element was returned, so add child
                    eParent.appendChild(resultFromRenderer);
                }
                else {
                    //otherwise assume it was html, so just insert
                    var eTextSpan = document.createElement('span');
                    eTextSpan.innerHTML = resultFromRenderer;
                    eParent.appendChild(eTextSpan);
                }
            };
            // if icon provided, use this (either a string, or a function callback).
            // if not, then use the second parameter, which is the svgFactory function
            Utils.createIcon = function (iconName, gridOptionsWrapper, colDefWrapper, svgFactoryFunc) {
                var eResult = document.createElement('span');
                var userProvidedIcon;
                // check col for icon first
                if (colDefWrapper && colDefWrapper.colDef.icons) {
                    userProvidedIcon = colDefWrapper.colDef.icons[iconName];
                }
                // it not in col, try grid options
                if (!userProvidedIcon && gridOptionsWrapper.getIcons()) {
                    userProvidedIcon = gridOptionsWrapper.getIcons()[iconName];
                }
                // now if user provided, use it
                if (userProvidedIcon) {
                    var rendererResult;
                    if (typeof userProvidedIcon === 'function') {
                        rendererResult = userProvidedIcon();
                    }
                    else if (typeof userProvidedIcon === 'string') {
                        rendererResult = userProvidedIcon;
                    }
                    else {
                        throw 'icon from grid options needs to be a string or a function';
                    }
                    if (typeof rendererResult === 'string') {
                        eResult.innerHTML = rendererResult;
                    }
                    else if (this.isNodeOrElement(rendererResult)) {
                        eResult.appendChild(rendererResult);
                    }
                    else {
                        throw 'iconRenderer should return back a string or a dom object';
                    }
                }
                else {
                    // otherwise we use the built in icon
                    eResult.appendChild(svgFactoryFunc());
                }
                return eResult;
            };
            Utils.addStylesToElement = function (eElement, styles) {
                Object.keys(styles).forEach(function (key) {
                    eElement.style[key] = styles[key];
                });
            };
            Utils.getScrollbarWidth = function () {
                var outer = document.createElement("div");
                outer.style.visibility = "hidden";
                outer.style.width = "100px";
                outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps
                document.body.appendChild(outer);
                var widthNoScroll = outer.offsetWidth;
                // force scrollbars
                outer.style.overflow = "scroll";
                // add innerdiv
                var inner = document.createElement("div");
                inner.style.width = "100%";
                outer.appendChild(inner);
                var widthWithScroll = inner.offsetWidth;
                // remove divs
                outer.parentNode.removeChild(outer);
                return widthNoScroll - widthWithScroll;
            };
            Utils.isKeyPressed = function (event, keyToCheck) {
                var pressedKey = event.which || event.keyCode;
                return pressedKey === keyToCheck;
            };
            Utils.setVisible = function (element, visible) {
                if (visible) {
                    element.style.display = 'inline';
                }
                else {
                    element.style.display = 'none';
                }
            };
            return Utils;
        })();
        grid.Utils = Utils;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var Constants = (function () {
            function Constants() {
            }
            Constants.STEP_EVERYTHING = 0;
            Constants.STEP_FILTER = 1;
            Constants.STEP_SORT = 2;
            Constants.STEP_MAP = 3;
            Constants.ASC = "asc";
            Constants.DESC = "desc";
            Constants.ROW_BUFFER_SIZE = 20;
            Constants.MIN_COL_WIDTH = 10;
            Constants.SUM = 'sum';
            Constants.MIN = 'min';
            Constants.MAX = 'max';
            Constants.KEY_TAB = 9;
            Constants.KEY_ENTER = 13;
            Constants.KEY_SPACE = 32;
            Constants.KEY_DOWN = 40;
            Constants.KEY_UP = 38;
            Constants.KEY_LEFT = 37;
            Constants.KEY_RIGHT = 39;
            return Constants;
        })();
        grid.Constants = Constants;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="utils.ts" />
/// <reference path="constants.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var _ = grid.Utils;
        var constants = grid.Constants;
        var ColumnController = (function () {
            function ColumnController() {
                this.listeners = [];
                this.createModel();
            }
            ColumnController.prototype.init = function (angularGrid, selectionRendererFactory, gridOptionsWrapper, expressionService) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.angularGrid = angularGrid;
                this.selectionRendererFactory = selectionRendererFactory;
                this.expressionService = expressionService;
            };
            ColumnController.prototype.createModel = function () {
                var that = this;
                this.model = {
                    // used by:
                    // + inMemoryRowController -> sorting, building quick filter text
                    // + headerRenderer -> sorting (clearing icon)
                    getAllColumns: function () {
                        return that.allColumns;
                    },
                    // + rowController -> while inserting rows, and when tabbing through cells (need to change this)
                    // need a newMethod - get next col index
                    getDisplayedColumns: function () {
                        return that.displayedColumns;
                    },
                    // + toolPanel
                    getGroupedColumns: function () {
                        return that.pivotColumns;
                    },
                    // + rowController
                    getValueColumns: function () {
                        return that.valueColumns;
                    },
                    // used by:
                    // + angularGrid -> for setting body width
                    // + rowController -> setting main row widths (when inserting and resizing)
                    getBodyContainerWidth: function () {
                        return that.getTotalColWidth(false);
                    },
                    // used by:
                    // + angularGrid -> setting pinned body width
                    getPinnedContainerWidth: function () {
                        return that.getTotalColWidth(true);
                    },
                    // used by:
                    // + headerRenderer -> setting pinned body width
                    getHeaderGroups: function () {
                        return that.headerGroups;
                    },
                    // used by:
                    // + api.getFilterModel() -> to map colDef to column, key can be colDef or field
                    getColumn: function (key) {
                        return that.getColumn(key);
                    },
                    // used by:
                    // + rowRenderer -> for navigation
                    getVisibleColBefore: function (col) {
                        var oldIndex = that.visibleColumns.indexOf(col);
                        if (oldIndex > 0) {
                            return that.visibleColumns[oldIndex - 1];
                        }
                        else {
                            return null;
                        }
                    },
                    // used by:
                    // + rowRenderer -> for navigation
                    getVisibleColAfter: function (col) {
                        var oldIndex = that.visibleColumns.indexOf(col);
                        if (oldIndex < (that.visibleColumns.length - 1)) {
                            return that.visibleColumns[oldIndex + 1];
                        }
                        else {
                            return null;
                        }
                    },
                    getDisplayNameForCol: function (column) {
                        return that.getDisplayNameForCol(column);
                    }
                };
            };
            ColumnController.prototype.getState = function () {
                if (!this.allColumns || this.allColumns.length < 0) {
                    return [];
                }
                var result = [];
                for (var i = 0; i < this.allColumns.length; i++) {
                    var column = this.allColumns[i];
                    var pivotIndex = this.pivotColumns.indexOf(column);
                    var resultItem = {
                        colId: column.colId,
                        hide: !column.visible,
                        aggFunc: column.aggFunc ? column.aggFunc : null,
                        width: column.actualWidth,
                        pivotIndex: pivotIndex >= 0 ? pivotIndex : null
                    };
                    result.push(resultItem);
                }
                return result;
            };
            ColumnController.prototype.setState = function (columnState) {
                var oldColumnList = this.allColumns;
                this.allColumns = [];
                this.pivotColumns = [];
                this.valueColumns = [];
                var that = this;
                _.forEach(columnState, function (stateItem) {
                    var oldColumn = _.find(oldColumnList, 'colId', stateItem.colId);
                    if (!oldColumn) {
                        console.warn('ag-grid: column ' + stateItem.colId + ' not found');
                        return;
                    }
                    // following ensures we are left with boolean true or false, eg converts (null, undefined, 0) all to true
                    oldColumn.visible = stateItem.hide ? false : true;
                    // if width provided and valid, use it, otherwise stick with the old width
                    oldColumn.actualWidth = stateItem.width >= constants.MIN_COL_WIDTH ? stateItem.width : oldColumn.actualWidth;
                    // accept agg func only if valid
                    var aggFuncValid = [constants.MIN, constants.MAX, constants.SUM].indexOf(stateItem.aggFunc) >= 0;
                    if (aggFuncValid) {
                        oldColumn.aggFunc = stateItem.aggFunc;
                        that.valueColumns.push(oldColumn);
                    }
                    else {
                        oldColumn.aggFunc = null;
                    }
                    // if pivot
                    if (typeof stateItem.pivotIndex === 'number' && stateItem.pivotIndex >= 0) {
                        that.pivotColumns.push(oldColumn);
                    }
                    that.allColumns.push(oldColumn);
                    oldColumnList.splice(oldColumnList.indexOf(oldColumn), 1);
                });
                // anything left over, we got no data for, so add in the column as non-value, non-pivot and hidden
                _.forEach(oldColumnList, function (oldColumn) {
                    oldColumn.visible = false;
                    oldColumn.aggFunc = null;
                    that.allColumns.push(oldColumn);
                });
                this.pivotColumns.sort(function (colA, colB) {
                    return colA.pivotIndex < colB.pivotIndex;
                });
                this.updateModel();
                this.fireColumnsChanged();
            };
            ColumnController.prototype.getColumn = function (key) {
                for (var i = 0; i < this.allColumns.length; i++) {
                    var colDefMatches = this.allColumns[i].colDef === key;
                    var fieldMatches = this.allColumns[i].colDef.field === key;
                    if (colDefMatches || fieldMatches) {
                        return this.allColumns[i];
                    }
                }
            };
            ColumnController.prototype.getDisplayNameForCol = function (column) {
                var colDef = column.colDef;
                var headerValueGetter = colDef.headerValueGetter;
                if (headerValueGetter) {
                    var params = {
                        colDef: colDef,
                        api: this.gridOptionsWrapper.getApi(),
                        context: this.gridOptionsWrapper.getContext()
                    };
                    if (typeof headerValueGetter === 'function') {
                        // valueGetter is a function, so just call it
                        return headerValueGetter(params);
                    }
                    else if (typeof headerValueGetter === 'string') {
                        // valueGetter is an expression, so execute the expression
                        return this.expressionService.evaluate(headerValueGetter, params);
                    }
                    return _.getValue(this.expressionService, undefined, colDef);
                }
                else if (colDef.displayName) {
                    console.warn("ag-grid: Found displayName " + colDef.displayName + ", please use headerName instead, displayName is deprecated.");
                    return colDef.displayName;
                }
                else {
                    return colDef.headerName;
                }
            };
            ColumnController.prototype.addListener = function (listener) {
                this.listeners.push(listener);
            };
            ColumnController.prototype.fireColumnsChanged = function () {
                for (var i = 0; i < this.listeners.length; i++) {
                    this.listeners[i].columnsChanged(this.allColumns, this.pivotColumns, this.valueColumns);
                }
            };
            ColumnController.prototype.getModel = function () {
                return this.model;
            };
            // called by angularGrid
            ColumnController.prototype.setColumns = function (columnDefs) {
                this.checkForDeprecatedItems(columnDefs);
                this.createColumns(columnDefs);
                this.createPivotColumns();
                this.createValueColumns();
                this.updateModel();
                this.fireColumnsChanged();
            };
            ColumnController.prototype.checkForDeprecatedItems = function (columnDefs) {
                if (columnDefs) {
                    for (var i = 0; i < columnDefs.length; i++) {
                        var colDef = columnDefs[i];
                        if (colDef.group !== undefined) {
                            console.warn('ag-grid: ' + colDef.field + ' colDef.group is deprecated, please use colDef.headerGroup');
                            colDef.headerGroup = colDef.group;
                        }
                        if (colDef.groupShow !== undefined) {
                            console.warn('ag-grid: ' + colDef.field + ' colDef.groupShow is deprecated, please use colDef.headerGroupShow');
                            colDef.headerGroupShow = colDef.groupShow;
                        }
                    }
                }
            };
            // called by headerRenderer - when a header is opened or closed
            ColumnController.prototype.headerGroupOpened = function (group) {
                group.expanded = !group.expanded;
                this.updateGroups();
                this.updateDisplayedColumns();
                this.angularGrid.refreshHeaderAndBody();
            };
            // called by toolPanel - when change in columns happens
            ColumnController.prototype.onColumnStateChanged = function () {
                this.updateModel();
                this.angularGrid.refreshHeaderAndBody();
            };
            // called from API
            ColumnController.prototype.hideColumns = function (colIds, hide) {
                for (var i = 0; i < this.allColumns.length; i++) {
                    var idThisCol = this.allColumns[i].colId;
                    var hideThisCol = colIds.indexOf(idThisCol) >= 0;
                    if (hideThisCol) {
                        this.allColumns[i].visible = !hide;
                    }
                }
                this.onColumnStateChanged();
                this.fireColumnsChanged(); // to tell toolbar
            };
            ColumnController.prototype.updateModel = function () {
                this.updateVisibleColumns();
                this.updatePinnedColumns();
                this.buildGroups();
                this.updateGroups();
                this.updateDisplayedColumns();
            };
            ColumnController.prototype.updateDisplayedColumns = function () {
                if (!this.gridOptionsWrapper.isGroupHeaders()) {
                    // if not grouping by headers, then pull visible cols
                    this.displayedColumns = this.visibleColumns;
                }
                else {
                    // if grouping, then only show col as per group rules
                    this.displayedColumns = [];
                    for (var i = 0; i < this.headerGroups.length; i++) {
                        var group = this.headerGroups[i];
                        group.addToVisibleColumns(this.displayedColumns);
                    }
                }
            };
            // public - called from api
            ColumnController.prototype.sizeColumnsToFit = function (gridWidth) {
                // avoid divide by zero
                if (gridWidth <= 0 || this.displayedColumns.length === 0) {
                    return;
                }
                var columnStartWidth = 0; // will contain the starting total width of the cols been spread
                var colsToSpread = []; // all visible cols, except those with avoidSizeToFit
                var widthForSpreading = gridWidth; // grid width minus the columns we are not resizing
                for (var j = 0; j < this.displayedColumns.length; j++) {
                    if (this.displayedColumns[j].colDef.suppressSizeToFit === true) {
                        // don't include col, and remove the width from teh available width
                        widthForSpreading -= this.displayedColumns[j].actualWidth;
                    }
                    else {
                        // include the col
                        colsToSpread.push(this.displayedColumns[j]);
                        columnStartWidth += this.displayedColumns[j].actualWidth;
                    }
                }
                // if no width left over to spread with, do nothing
                if (widthForSpreading <= 0) {
                    return;
                }
                var scale = widthForSpreading / columnStartWidth;
                var pixelsForLastCol = widthForSpreading;
                for (var i = 0; i < (colsToSpread.length - 1); i++) {
                    var column = colsToSpread[i];
                    var newWidth = Math.round(column.actualWidth * scale);
                    column.actualWidth = newWidth;
                    pixelsForLastCol -= newWidth;
                }
                // size the last by whats remaining (this avoids rounding errors that could
                // occur with scaling everything, where it result in some pixels off)
                var lastColumn = colsToSpread[colsToSpread.length - 1];
                lastColumn.actualWidth = pixelsForLastCol;
                // widths set, refresh the gui
                this.angularGrid.refreshHeaderAndBody();
            };
            ColumnController.prototype.buildGroups = function () {
                // if not grouping by headers, do nothing
                if (!this.gridOptionsWrapper.isGroupHeaders()) {
                    this.headerGroups = null;
                    return;
                }
                // split the columns into groups
                var currentGroup = null;
                this.headerGroups = [];
                var that = this;
                var lastColWasPinned = true;
                this.visibleColumns.forEach(function (column) {
                    // do we need a new group, because we move from pinned to non-pinned columns?
                    var endOfPinnedHeader = lastColWasPinned && !column.pinned;
                    if (!column.pinned) {
                        lastColWasPinned = false;
                    }
                    // do we need a new group, because the group names doesn't match from previous col?
                    var groupKeyMismatch = currentGroup && column.colDef.headerGroup !== currentGroup.name;
                    // we don't group columns where no group is specified
                    var colNotInGroup = currentGroup && !currentGroup.name;
                    // do we need a new group, because we are just starting
                    var processingFirstCol = currentGroup === null;
                    var newGroupNeeded = processingFirstCol || endOfPinnedHeader || groupKeyMismatch || colNotInGroup;
                    // create new group, if it's needed
                    if (newGroupNeeded) {
                        var pinned = column.pinned;
                        currentGroup = new HeaderGroup(pinned, column.colDef.headerGroup);
                        that.headerGroups.push(currentGroup);
                    }
                    currentGroup.addColumn(column);
                });
            };
            ColumnController.prototype.updateGroups = function () {
                // if not grouping by headers, do nothing
                if (!this.gridOptionsWrapper.isGroupHeaders()) {
                    return;
                }
                for (var i = 0; i < this.headerGroups.length; i++) {
                    var group = this.headerGroups[i];
                    group.calculateExpandable();
                    group.calculateDisplayedColumns();
                }
            };
            ColumnController.prototype.updateVisibleColumns = function () {
                this.visibleColumns = [];
                // see if we need to insert the default grouping column
                var needAGroupColumn = this.pivotColumns.length > 0 && !this.gridOptionsWrapper.isGroupSuppressAutoColumn() && !this.gridOptionsWrapper.isGroupUseEntireRow();
                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
                if (needAGroupColumn) {
                    // if one provided by user, use it, otherwise create one
                    var groupColDef = this.gridOptionsWrapper.getGroupColumnDef();
                    if (!groupColDef) {
                        groupColDef = {
                            headerName: localeTextFunc('group', 'Group'),
                            cellRenderer: {
                                renderer: "group"
                            }
                        };
                    }
                    // no group column provided, need to create one here
                    var groupColumn = new Column(groupColDef, this.gridOptionsWrapper.getColWidth());
                    this.visibleColumns.push(groupColumn);
                }
                for (var i = 0; i < this.allColumns.length; i++) {
                    var column = this.allColumns[i];
                    var hideBecauseOfPivot = this.pivotColumns.indexOf(column) >= 0 && this.gridOptionsWrapper.isGroupHidePivotColumns();
                    if (column.visible && !hideBecauseOfPivot) {
                        column.index = this.visibleColumns.length;
                        this.visibleColumns.push(this.allColumns[i]);
                    }
                }
            };
            ColumnController.prototype.updatePinnedColumns = function () {
                var pinnedColumnCount = this.gridOptionsWrapper.getPinnedColCount();
                for (var i = 0; i < this.visibleColumns.length; i++) {
                    var pinned = i < pinnedColumnCount;
                    this.visibleColumns[i].pinned = pinned;
                }
            };
            ColumnController.prototype.createColumns = function (columnDefs) {
                this.allColumns = [];
                var that = this;
                if (columnDefs) {
                    for (var i = 0; i < columnDefs.length; i++) {
                        var colDef = columnDefs[i];
                        // this is messy - we swap in another col def if it's checkbox selection - not happy :(
                        if (colDef === 'checkboxSelection') {
                            colDef = that.selectionRendererFactory.createCheckboxColDef();
                        }
                        var width = that.calculateColInitialWidth(colDef);
                        var column = new Column(colDef, width);
                        that.allColumns.push(column);
                    }
                }
            };
            ColumnController.prototype.createPivotColumns = function () {
                this.pivotColumns = [];
                var groupKeys = this.gridOptionsWrapper.getGroupKeys();
                if (!groupKeys || groupKeys.length <= 0) {
                    return;
                }
                for (var i = 0; i < groupKeys.length; i++) {
                    var groupKey = groupKeys[i];
                    var column = this.getColumn(groupKey);
                    if (!column) {
                        column = this.createDummyColumn(groupKey);
                    }
                    this.pivotColumns.push(column);
                }
            };
            ColumnController.prototype.createValueColumns = function () {
                this.valueColumns = [];
                for (var i = 0; i < this.allColumns.length; i++) {
                    var column = this.allColumns[i];
                    if (column.colDef.aggFunc) {
                        column.aggFunc = column.colDef.aggFunc;
                        this.valueColumns.push(column);
                    }
                }
            };
            ColumnController.prototype.createDummyColumn = function (field) {
                var colDef = {
                    field: field,
                    headerName: field,
                    hide: false
                };
                var width = this.gridOptionsWrapper.getColWidth();
                var column = new Column(colDef, width);
                return column;
            };
            ColumnController.prototype.calculateColInitialWidth = function (colDef) {
                if (!colDef.width) {
                    // if no width defined in colDef, use default
                    return this.gridOptionsWrapper.getColWidth();
                }
                else if (colDef.width < constants.MIN_COL_WIDTH) {
                    // if width in col def to small, set to min width
                    return constants.MIN_COL_WIDTH;
                }
                else {
                    // otherwise use the provided width
                    return colDef.width;
                }
            };
            // private
            // call with true (pinned), false (not-pinned) or undefined (all columns)
            ColumnController.prototype.getTotalColWidth = function (includePinned) {
                var widthSoFar = 0;
                var pinedNotImportant = typeof includePinned !== 'boolean';
                this.displayedColumns.forEach(function (column) {
                    var includeThisCol = pinedNotImportant || column.pinned === includePinned;
                    if (includeThisCol) {
                        widthSoFar += column.actualWidth;
                    }
                });
                return widthSoFar;
            };
            return ColumnController;
        })();
        grid.ColumnController = ColumnController;
        var HeaderGroup = (function () {
            function HeaderGroup(pinned, name) {
                this.allColumns = [];
                this.displayedColumns = [];
                this.expandable = false;
                this.expanded = false;
                this.pinned = pinned;
                this.name = name;
            }
            HeaderGroup.prototype.addColumn = function (column) {
                this.allColumns.push(column);
            };
            // need to check that this group has at least one col showing when both expanded and contracted.
            // if not, then we don't allow expanding and contracting on this group
            HeaderGroup.prototype.calculateExpandable = function () {
                // want to make sure the group doesn't disappear when it's open
                var atLeastOneShowingWhenOpen = false;
                // want to make sure the group doesn't disappear when it's closed
                var atLeastOneShowingWhenClosed = false;
                // want to make sure the group has something to show / hide
                var atLeastOneChangeable = false;
                for (var i = 0, j = this.allColumns.length; i < j; i++) {
                    var column = this.allColumns[i];
                    if (column.colDef.headerGroupShow === 'open') {
                        atLeastOneShowingWhenOpen = true;
                        atLeastOneChangeable = true;
                    }
                    else if (column.colDef.headerGroupShow === 'closed') {
                        atLeastOneShowingWhenClosed = true;
                        atLeastOneChangeable = true;
                    }
                    else {
                        atLeastOneShowingWhenOpen = true;
                        atLeastOneShowingWhenClosed = true;
                    }
                }
                this.expandable = atLeastOneShowingWhenOpen && atLeastOneShowingWhenClosed && atLeastOneChangeable;
            };
            HeaderGroup.prototype.calculateDisplayedColumns = function () {
                // clear out last time we calculated
                this.displayedColumns = [];
                // it not expandable, everything is visible
                if (!this.expandable) {
                    this.displayedColumns = this.allColumns;
                    return;
                }
                for (var i = 0, j = this.allColumns.length; i < j; i++) {
                    var column = this.allColumns[i];
                    switch (column.colDef.headerGroupShow) {
                        case 'open':
                            // when set to open, only show col if group is open
                            if (this.expanded) {
                                this.displayedColumns.push(column);
                            }
                            break;
                        case 'closed':
                            // when set to open, only show col if group is open
                            if (!this.expanded) {
                                this.displayedColumns.push(column);
                            }
                            break;
                        default:
                            // default is always show the column
                            this.displayedColumns.push(column);
                            break;
                    }
                }
            };
            // should replace with utils method 'add all'
            HeaderGroup.prototype.addToVisibleColumns = function (colsToAdd) {
                for (var i = 0; i < this.displayedColumns.length; i++) {
                    var column = this.displayedColumns[i];
                    colsToAdd.push(column);
                }
            };
            return HeaderGroup;
        })();
        var Column = (function () {
            function Column(colDef, actualWidth) {
                this.colDef = colDef;
                this.actualWidth = actualWidth;
                this.visible = !colDef.hide;
                // in the future, the colKey might be something other than the index
                if (colDef.colId) {
                    this.colId = colDef.colId;
                }
                else if (colDef.field) {
                    this.colId = colDef.field;
                }
                else {
                    this.colId = '' + Column.colIdSequence++;
                }
            }
            Column.colIdSequence = 0;
            return Column;
        })();
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var ExpandCreator = (function () {
            function ExpandCreator() {
            }
            ExpandCreator.getInstance = function () {
                if (!this.theInstance) {
                    this.theInstance = new ExpandCreator();
                }
                return this.theInstance;
            };
            ExpandCreator.prototype.group = function (rowNodes, defaultExapanded, expandByDefault) {
                var node;
                var call = function (n) {
                    return n.rows || defaultExapanded;
                };
                if (typeof defaultExapanded === 'function') {
                    call = defaultExapanded;
                }
                for (var i = 0; i < rowNodes.length; i++) {
                    node = rowNodes[i];
                    node.group = true;
                    node.children = [{
                        first: true,
                        parent: node
                    }];
                    node.rows = call(node);
                    if (node.rows) {
                        for (var y = 1; y < node.rows; y++) {
                            node.children.push({
                                first: false
                            });
                        }
                        ;
                    }
                }
                return rowNodes;
            };
            ExpandCreator.prototype.isExpanded = function (expandByDefault, level) {
                if (typeof expandByDefault === 'number') {
                    return level < expandByDefault;
                }
                else {
                    return expandByDefault === true || expandByDefault === 'true';
                }
            };
            return ExpandCreator;
        })();
        grid.ExpandCreator = ExpandCreator;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var ExpressionService = (function () {
            function ExpressionService() {
                this.expressionToFunctionCache = {};
            }
            ExpressionService.prototype.evaluate = function (expression, params) {
                try {
                    var javaScriptFunction = this.createExpressionFunction(expression);
                    var result = javaScriptFunction(params.value, params.context, params.node, params.data, params.colDef, params.rowIndex, params.api);
                    return result;
                }
                catch (e) {
                    // the expression failed, which can happen, as it's the client that
                    // provides the expression. so print a nice message
                    console.error('Processing of the expression failed');
                    console.error('Expression = ' + expression);
                    console.error('Exception = ' + e);
                    return null;
                }
            };
            ExpressionService.prototype.createExpressionFunction = function (expression) {
                // check cache first
                if (this.expressionToFunctionCache[expression]) {
                    return this.expressionToFunctionCache[expression];
                }
                // if not found in cache, return the function
                var functionBody = this.createFunctionBody(expression);
                var theFunction = new Function('x, ctx, node, data, colDef, rowIndex, api', functionBody);
                // store in cache
                this.expressionToFunctionCache[expression] = theFunction;
                return theFunction;
            };
            ExpressionService.prototype.createFunctionBody = function (expression) {
                // if the expression has the 'return' word in it, then use as is,
                // if not, then wrap it with return and ';' to make a function
                if (expression.indexOf('return') >= 0) {
                    return expression;
                }
                else {
                    return 'return ' + expression + ';';
                }
            };
            return ExpressionService;
        })();
        grid.ExpressionService = ExpressionService;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="constants.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var DEFAULT_ROW_HEIGHT = 30;
        var constants = grid.Constants;
        function isTrue(value) {
            return value === true || value === 'true';
        }
        var GridOptionsWrapper = (function () {
            function GridOptionsWrapper(gridOptions) {
                this.gridOptions = gridOptions;
                this.setupDefaults();
            }
            GridOptionsWrapper.prototype.isRowSelection = function () {
                return this.gridOptions.rowSelection === "single" || this.gridOptions.rowSelection === "multiple";
            };
            GridOptionsWrapper.prototype.isRowDeselection = function () {
                return isTrue(this.gridOptions.rowDeselection);
            };
            GridOptionsWrapper.prototype.isRowSelectionMulti = function () {
                return this.gridOptions.rowSelection === 'multiple';
            };
            GridOptionsWrapper.prototype.getContext = function () {
                return this.gridOptions.context;
            };
            GridOptionsWrapper.prototype.isVirtualPaging = function () {
                return isTrue(this.gridOptions.virtualPaging);
            };
            GridOptionsWrapper.prototype.isShowToolPanel = function () {
                return isTrue(this.gridOptions.showToolPanel);
            };
            GridOptionsWrapper.prototype.isToolPanelSuppressPivot = function () {
                return isTrue(this.gridOptions.toolPanelSuppressPivot);
            };
            GridOptionsWrapper.prototype.isToolPanelSuppressValues = function () {
                return isTrue(this.gridOptions.toolPanelSuppressValues);
            };
            GridOptionsWrapper.prototype.isRowsAlreadyGrouped = function () {
                return isTrue(this.gridOptions.rowsAlreadyGrouped);
            };
            GridOptionsWrapper.prototype.isRowsAlreadyExpanded = function () {
                return isTrue(this.gridOptions.rowsAlreadyExpanded);
            };
            GridOptionsWrapper.prototype.isGroupSelectsChildren = function () {
                return isTrue(this.gridOptions.groupSelectsChildren);
            };
            GridOptionsWrapper.prototype.isGroupHidePivotColumns = function () {
                return isTrue(this.gridOptions.groupHidePivotColumns);
            };
            GridOptionsWrapper.prototype.isGroupIncludeFooter = function () {
                return isTrue(this.gridOptions.groupIncludeFooter);
            };
            GridOptionsWrapper.prototype.isSuppressRowClickSelection = function () {
                return isTrue(this.gridOptions.suppressRowClickSelection);
            };
            GridOptionsWrapper.prototype.isSuppressCellSelection = function () {
                return isTrue(this.gridOptions.suppressCellSelection);
            };
            GridOptionsWrapper.prototype.isSuppressUnSort = function () {
                return isTrue(this.gridOptions.suppressUnSort);
            };
            GridOptionsWrapper.prototype.isSuppressMultiSort = function () {
                return isTrue(this.gridOptions.suppressMultiSort);
            };
            GridOptionsWrapper.prototype.isGroupSuppressAutoColumn = function () {
                return isTrue(this.gridOptions.groupSuppressAutoColumn);
            };
            GridOptionsWrapper.prototype.isGroupHeaders = function () {
                return isTrue(this.gridOptions.groupHeaders);
            };
            GridOptionsWrapper.prototype.isDontUseScrolls = function () {
                return isTrue(this.gridOptions.dontUseScrolls);
            };
            GridOptionsWrapper.prototype.isSuppressDescSort = function () {
                return isTrue(this.gridOptions.suppressDescSort);
            };
            GridOptionsWrapper.prototype.isUnSortIcon = function () {
                return isTrue(this.gridOptions.unSortIcon);
            };
            GridOptionsWrapper.prototype.getRowStyle = function () {
                return this.gridOptions.rowStyle;
            };
            GridOptionsWrapper.prototype.getRowClass = function () {
                return this.gridOptions.rowClass;
            };
            GridOptionsWrapper.prototype.getHeaderCellRenderer = function () {
                return this.gridOptions.headerCellRenderer;
            };
            GridOptionsWrapper.prototype.getApi = function () {
                return this.gridOptions.api;
            };
            GridOptionsWrapper.prototype.isEnableColResize = function () {
                return isTrue(this.gridOptions.enableColResize);
            };
            GridOptionsWrapper.prototype.getGroupDefaultExpanded = function () {
                return this.gridOptions.groupDefaultExpanded;
            };
            GridOptionsWrapper.prototype.getGroupKeys = function () {
                return this.gridOptions.groupKeys;
            };
            GridOptionsWrapper.prototype.getGroupAggFunction = function () {
                return this.gridOptions.groupAggFunction;
            };
            GridOptionsWrapper.prototype.getGroupAggFields = function () {
                return this.gridOptions.groupAggFields;
            };
            GridOptionsWrapper.prototype.getAllRows = function () {
                return this.gridOptions.rowData;
            };
            GridOptionsWrapper.prototype.isGroupUseEntireRow = function () {
                return isTrue(this.gridOptions.groupUseEntireRow);
            };
            GridOptionsWrapper.prototype.getGroupColumnDef = function () {
                return this.gridOptions.groupColumnDef;
            };
            GridOptionsWrapper.prototype.isAngularCompileRows = function () {
                return isTrue(this.gridOptions.angularCompileRows);
            };
            GridOptionsWrapper.prototype.isAngularCompileFilters = function () {
                return isTrue(this.gridOptions.angularCompileFilters);
            };
            GridOptionsWrapper.prototype.isAngularCompileHeaders = function () {
                return isTrue(this.gridOptions.angularCompileHeaders);
            };
            GridOptionsWrapper.prototype.getColumnDefs = function () {
                return this.gridOptions.columnDefs;
            };
            GridOptionsWrapper.prototype.getRowHeight = function () {
                return this.gridOptions.rowHeight;
            };
            GridOptionsWrapper.prototype.getModelUpdated = function () {
                return this.gridOptions.modelUpdated;
            };
            GridOptionsWrapper.prototype.getCellClicked = function () {
                return this.gridOptions.cellClicked;
            };
            GridOptionsWrapper.prototype.getCellDoubleClicked = function () {
                return this.gridOptions.cellDoubleClicked;
            };
            GridOptionsWrapper.prototype.getCellValueChanged = function () {
                return this.gridOptions.cellValueChanged;
            };
            GridOptionsWrapper.prototype.getCellFocused = function () {
                return this.gridOptions.cellFocused;
            };
            GridOptionsWrapper.prototype.getRowSelected = function () {
                return this.gridOptions.rowSelected;
            };
            GridOptionsWrapper.prototype.getSelectionChanged = function () {
                return this.gridOptions.selectionChanged;
            };
            GridOptionsWrapper.prototype.getVirtualRowRemoved = function () {
                return this.gridOptions.virtualRowRemoved;
            };
            GridOptionsWrapper.prototype.getDatasource = function () {
                return this.gridOptions.datasource;
            };
            GridOptionsWrapper.prototype.getReady = function () {
                return this.gridOptions.ready;
            };
            GridOptionsWrapper.prototype.getRowBuffer = function () {
                return this.gridOptions.rowBuffer;
            };
            GridOptionsWrapper.prototype.getExpandedRowsDefault = function () {
                return this.gridOptions.expandedRowsDefault || 0;
            };
            GridOptionsWrapper.prototype.isEnableSorting = function () {
                return isTrue(this.gridOptions.enableSorting) || isTrue(this.gridOptions.enableServerSideSorting);
            };
            GridOptionsWrapper.prototype.isEnableServerSideSorting = function () {
                return isTrue(this.gridOptions.enableServerSideSorting);
            };
            GridOptionsWrapper.prototype.isEnableFilter = function () {
                return isTrue(this.gridOptions.enableFilter) || isTrue(this.gridOptions.enableServerSideFilter);
            };
            GridOptionsWrapper.prototype.isEnableServerSideFilter = function () {
                return this.gridOptions.enableServerSideFilter;
            };
            GridOptionsWrapper.prototype.setSelectedRows = function (newSelectedRows) {
                return this.gridOptions.selectedRows = newSelectedRows;
            };
            GridOptionsWrapper.prototype.setSelectedNodesById = function (newSelectedNodes) {
                return this.gridOptions.selectedNodesById = newSelectedNodes;
            };
            GridOptionsWrapper.prototype.isDoInternalExpanding = function () {
                return !this.isRowsAlreadyExpanded() && this.gridOptions.expandRow;
            };
            GridOptionsWrapper.prototype.getIcons = function () {
                return this.gridOptions.icons;
            };
            GridOptionsWrapper.prototype.getGroupRowInnerRenderer = function () {
                if (this.gridOptions.groupInnerRenderer) {
                    console.warn('ag-grid: as of v1.10.0 (21st Jun 2015) groupInnerRenderer is now called groupRowInnerRenderer. Please change you code as groupInnerRenderer is deprecated.');
                    return this.gridOptions.groupInnerRenderer;
                }
                else {
                    return this.gridOptions.groupRowInnerRenderer;
                }
            };
            GridOptionsWrapper.prototype.getColWidth = function () {
                if (typeof this.gridOptions.colWidth !== 'number' || this.gridOptions.colWidth < constants.MIN_COL_WIDTH) {
                    return 200;
                }
                else {
                    return this.gridOptions.colWidth;
                }
            };
            GridOptionsWrapper.prototype.getHeaderHeight = function () {
                if (typeof this.gridOptions.headerHeight === 'number') {
                    // if header height provided, used it
                    return this.gridOptions.headerHeight;
                }
                else {
                    // otherwise return 25 if no grouping, 50 if grouping
                    if (this.isGroupHeaders()) {
                        return 50;
                    }
                    else {
                        return 25;
                    }
                }
            };
            GridOptionsWrapper.prototype.setupDefaults = function () {
                if (!this.gridOptions.rowHeight) {
                    this.gridOptions.rowHeight = DEFAULT_ROW_HEIGHT;
                }
            };
            GridOptionsWrapper.prototype.getPinnedColCount = function () {
                // if not using scrolls, then pinned columns doesn't make
                // sense, so always return 0
                if (this.isDontUseScrolls()) {
                    return 0;
                }
                if (this.gridOptions.pinnedColumnCount) {
                    //in case user puts in a string, cast to number
                    return Number(this.gridOptions.pinnedColumnCount);
                }
                else {
                    return 0;
                }
            };
            GridOptionsWrapper.prototype.getLocaleTextFunc = function () {
                var that = this;
                return function (key, defaultValue) {
                    var localeText = that.gridOptions.localeText;
                    if (localeText && localeText[key]) {
                        return localeText[key];
                    }
                    else {
                        return defaultValue;
                    }
                };
            };
            return GridOptionsWrapper;
        })();
        grid.GridOptionsWrapper = GridOptionsWrapper;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var template = '<div>' + '<div>' + '<select class="ag-filter-select" id="filterType">' + '<option value="1">[CONTAINS]</option>' + '<option value="2">[EQUALS]</option>' + '<option value="3">[STARTS WITH]</option>' + '<option value="4">[ENDS WITH]</option>' + '</select>' + '</div>' + '<div>' + '<input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/>' + '</div>' + '<div class="ag-filter-apply-panel" id="applyPanel">' + '<button type="button" id="applyButton">Apply Filter</button>' + '</div>' + '</div>';
        var CONTAINS = 1;
        var EQUALS = 2;
        var STARTS_WITH = 3;
        var ENDS_WITH = 4;
        var TextFilter = (function () {
            function TextFilter(params) {
                this.filterParams = params.filterParams;
                this.applyActive = this.filterParams && this.filterParams.apply == true;
                this.filterChangedCallback = params.filterChangedCallback;
                this.localeTextFunc = params.localeTextFunc;
                this.valueGetter = params.valueGetter;
                this.createGui();
                this.filterText = null;
                this.filterType = CONTAINS;
                this.createApi();
            }
            TextFilter.prototype.onNewRowsLoaded = function () {
                var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
                if (!keepSelection) {
                    this.api.setType(CONTAINS);
                    this.api.setFilter(null);
                }
            };
            TextFilter.prototype.afterGuiAttached = function () {
                this.eFilterTextField.focus();
            };
            TextFilter.prototype.doesFilterPass = function (node) {
                if (!this.filterText) {
                    return true;
                }
                var value = this.valueGetter(node);
                if (!value) {
                    return false;
                }
                var valueLowerCase = value.toString().toLowerCase();
                switch (this.filterType) {
                    case CONTAINS:
                        return valueLowerCase.indexOf(this.filterText) >= 0;
                    case EQUALS:
                        return valueLowerCase === this.filterText;
                    case STARTS_WITH:
                        return valueLowerCase.indexOf(this.filterText) === 0;
                    case ENDS_WITH:
                        var index = valueLowerCase.indexOf(this.filterText);
                        return index >= 0 && index === (valueLowerCase.length - this.filterText.length);
                    default:
                        // should never happen
                        console.warn('invalid filter type ' + this.filterType);
                        return false;
                }
            };
            TextFilter.prototype.getGui = function () {
                return this.eGui;
            };
            TextFilter.prototype.isFilterActive = function () {
                return this.filterText !== null;
            };
            TextFilter.prototype.createTemplate = function () {
                return template.replace('[FILTER...]', this.localeTextFunc('filterOoo', 'Filter...')).replace('[EQUALS]', this.localeTextFunc('equals', 'Equals')).replace('[CONTAINS]', this.localeTextFunc('contains', 'Contains')).replace('[STARTS WITH]', this.localeTextFunc('startsWith', 'Starts with')).replace('[ENDS WITH]', this.localeTextFunc('endsWith', 'Ends with'));
            };
            TextFilter.prototype.createGui = function () {
                this.eGui = utils.loadTemplate(this.createTemplate());
                this.eFilterTextField = this.eGui.querySelector("#filterText");
                this.eTypeSelect = this.eGui.querySelector("#filterType");
                utils.addChangeListener(this.eFilterTextField, this.onFilterChanged.bind(this));
                this.eTypeSelect.addEventListener("change", this.onTypeChanged.bind(this));
                this.setupApply();
            };
            TextFilter.prototype.setupApply = function () {
                var _this = this;
                if (this.applyActive) {
                    this.eApplyButton = this.eGui.querySelector('#applyButton');
                    this.eApplyButton.addEventListener('click', function () {
                        _this.filterChangedCallback();
                    });
                }
                else {
                    utils.removeElement(this.eGui, '#applyPanel');
                }
            };
            TextFilter.prototype.onTypeChanged = function () {
                this.filterType = parseInt(this.eTypeSelect.value);
                this.filterChanged();
            };
            TextFilter.prototype.onFilterChanged = function () {
                var filterText = utils.makeNull(this.eFilterTextField.value);
                if (filterText && filterText.trim() === '') {
                    filterText = null;
                }
                if (filterText) {
                    this.filterText = filterText.toLowerCase();
                }
                else {
                    this.filterText = null;
                }
                this.filterChanged();
            };
            TextFilter.prototype.filterChanged = function () {
                if (!this.applyActive) {
                    this.filterChangedCallback();
                }
            };
            TextFilter.prototype.createApi = function () {
                var that = this;
                this.api = {
                    EQUALS: EQUALS,
                    CONTAINS: CONTAINS,
                    STARTS_WITH: STARTS_WITH,
                    ENDS_WITH: ENDS_WITH,
                    setType: function (type) {
                        that.filterType = type;
                        that.eTypeSelect.value = type;
                    },
                    setFilter: function (filter) {
                        filter = utils.makeNull(filter);
                        if (filter) {
                            that.filterText = filter.toLowerCase();
                            that.eFilterTextField.value = filter;
                        }
                        else {
                            that.filterText = null;
                            that.eFilterTextField.value = null;
                        }
                    },
                    getType: function () {
                        return that.filterType;
                    },
                    getFilter: function () {
                        return that.filterText;
                    },
                    getModel: function () {
                        if (that.isFilterActive()) {
                            return {
                                type: that.filterType,
                                filter: that.filterText
                            };
                        }
                        else {
                            return null;
                        }
                    },
                    setModel: function (dataModel) {
                        if (dataModel) {
                            this.setType(dataModel.type);
                            this.setFilter(dataModel.filter);
                        }
                        else {
                            this.setFilter(null);
                        }
                    }
                };
            };
            TextFilter.prototype.getApi = function () {
                return this.api;
            };
            return TextFilter;
        })();
        grid.TextFilter = TextFilter;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var template = '<div>' + '<div>' + '<select class="ag-filter-select" id="filterType">' + '<option value="1">[EQUALS]</option>' + '<option value="2">[LESS THAN]</option>' + '<option value="3">[GREATER THAN]</option>' + '</select>' + '</div>' + '<div>' + '<input class="ag-filter-filter" id="filterText" type="text" placeholder="[FILTER...]"/>' + '</div>' + '<div class="ag-filter-apply-panel" id="applyPanel">' + '<button type="button" id="applyButton">Apply Filter</button>' + '</div>' + '</div>';
        var EQUALS = 1;
        var LESS_THAN = 2;
        var GREATER_THAN = 3;
        var NumberFilter = (function () {
            function NumberFilter(params) {
                this.filterParams = params.filterParams;
                this.applyActive = this.filterParams && this.filterParams.apply == true;
                this.filterChangedCallback = params.filterChangedCallback;
                this.localeTextFunc = params.localeTextFunc;
                this.valueGetter = params.valueGetter;
                this.createGui();
                this.filterNumber = null;
                this.filterType = EQUALS;
                this.createApi();
            }
            NumberFilter.prototype.onNewRowsLoaded = function () {
                var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
                if (!keepSelection) {
                    this.api.setType(EQUALS);
                    this.api.setFilter(null);
                }
            };
            NumberFilter.prototype.afterGuiAttached = function () {
                this.eFilterTextField.focus();
            };
            NumberFilter.prototype.doesFilterPass = function (node) {
                if (this.filterNumber === null) {
                    return true;
                }
                var value = this.valueGetter(node);
                if (!value && value !== 0) {
                    return false;
                }
                var valueAsNumber;
                if (typeof value === 'number') {
                    valueAsNumber = value;
                }
                else {
                    valueAsNumber = parseFloat(value);
                }
                switch (this.filterType) {
                    case EQUALS:
                        return valueAsNumber === this.filterNumber;
                    case LESS_THAN:
                        return valueAsNumber <= this.filterNumber;
                    case GREATER_THAN:
                        return valueAsNumber >= this.filterNumber;
                    default:
                        // should never happen
                        console.warn('invalid filter type ' + this.filterType);
                        return false;
                }
            };
            NumberFilter.prototype.getGui = function () {
                return this.eGui;
            };
            NumberFilter.prototype.isFilterActive = function () {
                return this.filterNumber !== null;
            };
            NumberFilter.prototype.createTemplate = function () {
                return template.replace('[FILTER...]', this.localeTextFunc('filterOoo', 'Filter...')).replace('[EQUALS]', this.localeTextFunc('equals', 'Equals')).replace('[LESS THAN]', this.localeTextFunc('lessThan', 'Less than')).replace('[GREATER THAN]', this.localeTextFunc('greaterThan', 'Greater than'));
            };
            NumberFilter.prototype.createGui = function () {
                this.eGui = utils.loadTemplate(this.createTemplate());
                this.eFilterTextField = this.eGui.querySelector("#filterText");
                this.eTypeSelect = this.eGui.querySelector("#filterType");
                utils.addChangeListener(this.eFilterTextField, this.onFilterChanged.bind(this));
                this.eTypeSelect.addEventListener("change", this.onTypeChanged.bind(this));
                this.setupApply();
            };
            NumberFilter.prototype.setupApply = function () {
                var _this = this;
                if (this.applyActive) {
                    this.eApplyButton = this.eGui.querySelector('#applyButton');
                    this.eApplyButton.addEventListener('click', function () {
                        _this.filterChangedCallback();
                    });
                }
                else {
                    utils.removeElement(this.eGui, '#applyPanel');
                }
            };
            NumberFilter.prototype.onTypeChanged = function () {
                this.filterType = parseInt(this.eTypeSelect.value);
                this.filterChanged();
            };
            NumberFilter.prototype.filterChanged = function () {
                if (!this.applyActive) {
                    this.filterChangedCallback();
                }
            };
            NumberFilter.prototype.onFilterChanged = function () {
                var filterText = utils.makeNull(this.eFilterTextField.value);
                if (filterText && filterText.trim() === '') {
                    filterText = null;
                }
                if (filterText) {
                    this.filterNumber = parseFloat(filterText);
                }
                else {
                    this.filterNumber = null;
                }
                this.filterChanged();
            };
            NumberFilter.prototype.createApi = function () {
                var that = this;
                this.api = {
                    EQUALS: EQUALS,
                    LESS_THAN: LESS_THAN,
                    GREATER_THAN: GREATER_THAN,
                    setType: function (type) {
                        that.filterType = type;
                        that.eTypeSelect.value = type;
                    },
                    setFilter: function (filter) {
                        filter = utils.makeNull(filter);
                        if (filter !== null && !(typeof filter === 'number')) {
                            filter = parseFloat(filter);
                        }
                        that.filterNumber = filter;
                        that.eFilterTextField.value = filter;
                    },
                    getType: function () {
                        return that.filterType;
                    },
                    getFilter: function () {
                        return that.filterNumber;
                    },
                    getModel: function () {
                        if (that.isFilterActive()) {
                            return {
                                type: that.filterType,
                                filter: that.filterNumber
                            };
                        }
                        else {
                            return null;
                        }
                    },
                    setModel: function (dataModel) {
                        if (dataModel) {
                            this.setType(dataModel.type);
                            this.setFilter(dataModel.filter);
                        }
                        else {
                            this.setFilter(null);
                        }
                    }
                };
            };
            NumberFilter.prototype.getApi = function () {
                return this.api;
            };
            return NumberFilter;
        })();
        grid.NumberFilter = NumberFilter;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var SetFilterModel = (function () {
            function SetFilterModel(colDef, rowModel, valueGetter) {
                this.colDef = colDef;
                this.rowModel = rowModel;
                this.valueGetter = valueGetter;
                this.createUniqueValues();
                // by default, no filter, so we display everything
                this.displayedValues = this.uniqueValues;
                this.miniFilter = null;
                //we use a map rather than an array for the selected values as the lookup
                //for a map is much faster than the lookup for an array, especially when
                //the length of the array is thousands of records long
                this.selectedValuesMap = {};
                this.selectEverything();
            }
            SetFilterModel.prototype.refreshUniqueValues = function (keepSelection) {
                this.createUniqueValues();
                var oldModel = Object.keys(this.selectedValuesMap);
                this.selectedValuesMap = {};
                this.filterDisplayedValues();
                if (keepSelection) {
                    this.setModel(oldModel);
                }
                else {
                    this.selectEverything();
                }
            };
            SetFilterModel.prototype.createUniqueValues = function () {
                if (this.colDef.filterParams && this.colDef.filterParams.values) {
                    this.uniqueValues = utils.toStrings(this.colDef.filterParams.values);
                }
                else {
                    this.uniqueValues = utils.toStrings(this.iterateThroughNodesForValues());
                }
                if (this.colDef.comparator) {
                    this.uniqueValues.sort(this.colDef.comparator);
                }
                else {
                    this.uniqueValues.sort(utils.defaultComparator);
                }
            };
            SetFilterModel.prototype.iterateThroughNodesForValues = function () {
                var uniqueCheck = {};
                var result = [];
                var that = this;
                function recursivelyProcess(nodes) {
                    for (var i = 0; i < nodes.length; i++) {
                        var node = nodes[i];
                        if (node.group && !node.footer) {
                            // group node, so dig deeper
                            recursivelyProcess(node.children);
                        }
                        else {
                            var value = that.valueGetter(node);
                            if (value === "" || value === undefined) {
                                value = null;
                            }
                            if (!uniqueCheck.hasOwnProperty(value)) {
                                result.push(value);
                                uniqueCheck[value] = 1;
                            }
                        }
                    }
                }
                var topLevelNodes = this.rowModel.getTopLevelNodes();
                recursivelyProcess(topLevelNodes);
                return result;
            };
            //sets mini filter. returns true if it changed from last value, otherwise false
            SetFilterModel.prototype.setMiniFilter = function (newMiniFilter) {
                newMiniFilter = utils.makeNull(newMiniFilter);
                if (this.miniFilter === newMiniFilter) {
                    //do nothing if filter has not changed
                    return false;
                }
                this.miniFilter = newMiniFilter;
                this.filterDisplayedValues();
                return true;
            };
            SetFilterModel.prototype.getMiniFilter = function () {
                return this.miniFilter;
            };
            SetFilterModel.prototype.filterDisplayedValues = function () {
                // if no filter, just use the unique values
                if (this.miniFilter === null) {
                    this.displayedValues = this.uniqueValues;
                    return;
                }
                // if filter present, we filter down the list
                this.displayedValues = [];
                var miniFilterUpperCase = this.miniFilter.toUpperCase();
                for (var i = 0, l = this.uniqueValues.length; i < l; i++) {
                    var uniqueValue = this.uniqueValues[i];
                    if (uniqueValue !== null && uniqueValue.toString().toUpperCase().indexOf(miniFilterUpperCase) >= 0) {
                        this.displayedValues.push(uniqueValue);
                    }
                }
            };
            SetFilterModel.prototype.getDisplayedValueCount = function () {
                return this.displayedValues.length;
            };
            SetFilterModel.prototype.getDisplayedValue = function (index) {
                return this.displayedValues[index];
            };
            SetFilterModel.prototype.selectEverything = function () {
                var count = this.uniqueValues.length;
                for (var i = 0; i < count; i++) {
                    var value = this.uniqueValues[i];
                    this.selectedValuesMap[value] = null;
                }
                this.selectedValuesCount = count;
            };
            SetFilterModel.prototype.isFilterActive = function () {
                return this.uniqueValues.length !== this.selectedValuesCount;
            };
            SetFilterModel.prototype.selectNothing = function () {
                this.selectedValuesMap = {};
                this.selectedValuesCount = 0;
            };
            SetFilterModel.prototype.getUniqueValueCount = function () {
                return this.uniqueValues.length;
            };
            SetFilterModel.prototype.getUniqueValue = function (index) {
                return this.uniqueValues[index];
            };
            SetFilterModel.prototype.unselectValue = function (value) {
                if (this.selectedValuesMap[value] !== undefined) {
                    delete this.selectedValuesMap[value];
                    this.selectedValuesCount--;
                }
            };
            SetFilterModel.prototype.selectValue = function (value) {
                if (this.selectedValuesMap[value] === undefined) {
                    this.selectedValuesMap[value] = null;
                    this.selectedValuesCount++;
                }
            };
            SetFilterModel.prototype.isValueSelected = function (value) {
                return this.selectedValuesMap[value] !== undefined;
            };
            SetFilterModel.prototype.isEverythingSelected = function () {
                return this.uniqueValues.length === this.selectedValuesCount;
            };
            SetFilterModel.prototype.isNothingSelected = function () {
                return this.uniqueValues.length === 0;
            };
            SetFilterModel.prototype.getModel = function () {
                if (!this.isFilterActive()) {
                    return null;
                }
                var selectedValues = [];
                utils.iterateObject(this.selectedValuesMap, function (key) {
                    selectedValues.push(key);
                });
                return selectedValues;
            };
            SetFilterModel.prototype.setModel = function (model) {
                if (model) {
                    this.selectNothing();
                    for (var i = 0; i < model.length; i++) {
                        var newValue = model[i];
                        if (this.uniqueValues.indexOf(newValue) >= 0) {
                            this.selectValue(model[i]);
                        }
                        else {
                            console.warn('Value ' + newValue + ' is not a valid value for filter');
                        }
                    }
                }
                else {
                    this.selectEverything();
                }
            };
            return SetFilterModel;
        })();
        grid.SetFilterModel = SetFilterModel;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="setFilterModel.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var _ = grid.Utils;
        var template = '<div>' + '<div class="ag-filter-header-container">' + '<input class="ag-filter-filter" type="text" placeholder="[SEARCH...]"/>' + '</div>' + '<div class="ag-filter-header-container">' + '<label>' + '<input id="selectAll" type="checkbox" class="ag-filter-checkbox"/>' + '([SELECT ALL])' + '</label>' + '</div>' + '<div class="ag-filter-list-viewport">' + '<div class="ag-filter-list-container">' + '<div id="itemForRepeat" class="ag-filter-item">' + '<label>' + '<input type="checkbox" class="ag-filter-checkbox" filter-checkbox="true"/>' + '<span class="ag-filter-value"></span>' + '</label>' + '</div>' + '</div>' + '</div>' + '<div class="ag-filter-apply-panel" id="applyPanel">' + '<button type="button" id="applyButton">Apply Filter</button>' + '</div>' + '</div>';
        var DEFAULT_ROW_HEIGHT = 20;
        var SetFilter = (function () {
            function SetFilter(params) {
                this.filterParams = params.filterParams;
                this.rowHeight = (this.filterParams && this.filterParams.cellHeight) ? this.filterParams.cellHeight : DEFAULT_ROW_HEIGHT;
                this.applyActive = this.filterParams && this.filterParams.apply == true;
                this.model = new grid.SetFilterModel(params.colDef, params.rowModel, params.valueGetter);
                this.filterChangedCallback = params.filterChangedCallback;
                this.valueGetter = params.valueGetter;
                this.rowsInBodyContainer = {};
                this.colDef = params.colDef;
                this.localeTextFunc = params.localeTextFunc;
                if (this.filterParams) {
                    this.cellRenderer = this.filterParams.cellRenderer;
                }
                this.createGui();
                this.addScrollListener();
                this.createApi();
            }
            // we need to have the gui attached before we can draw the virtual rows, as the
            // virtual row logic needs info about the gui state
            SetFilter.prototype.afterGuiAttached = function () {
                this.drawVirtualRows();
            };
            SetFilter.prototype.isFilterActive = function () {
                return this.model.isFilterActive();
            };
            SetFilter.prototype.doesFilterPass = function (node) {
                // if no filter, always pass
                if (this.model.isEverythingSelected()) {
                    return true;
                }
                // if nothing selected in filter, always fail
                if (this.model.isNothingSelected()) {
                    return false;
                }
                var value = this.valueGetter(node);
                value = _.makeNull(value);
                var filterPassed = this.model.isValueSelected(value);
                return filterPassed;
            };
            SetFilter.prototype.getGui = function () {
                return this.eGui;
            };
            SetFilter.prototype.onNewRowsLoaded = function () {
                var keepSelection = this.filterParams && this.filterParams.newRowsAction === 'keep';
                // default is reset
                this.model.refreshUniqueValues(keepSelection);
                this.setContainerHeight();
                this.refreshVirtualRows();
            };
            SetFilter.prototype.createTemplate = function () {
                return template.replace('[SELECT ALL]', this.localeTextFunc('selectAll', 'Select All')).replace('[SEARCH...]', this.localeTextFunc('searchOoo', 'Search...'));
            };
            SetFilter.prototype.createGui = function () {
                var _this = this;
                this.eGui = _.loadTemplate(this.createTemplate());
                this.eListContainer = this.eGui.querySelector(".ag-filter-list-container");
                this.eFilterValueTemplate = this.eGui.querySelector("#itemForRepeat");
                this.eSelectAll = this.eGui.querySelector("#selectAll");
                this.eListViewport = this.eGui.querySelector(".ag-filter-list-viewport");
                this.eMiniFilter = this.eGui.querySelector(".ag-filter-filter");
                this.eListContainer.style.height = (this.model.getUniqueValueCount() * this.rowHeight) + "px";
                this.setContainerHeight();
                this.eMiniFilter.value = this.model.getMiniFilter();
                _.addChangeListener(this.eMiniFilter, function () {
                    _this.onMiniFilterChanged();
                });
                _.removeAllChildren(this.eListContainer);
                this.eSelectAll.onclick = this.onSelectAll.bind(this);
                if (this.model.isEverythingSelected()) {
                    this.eSelectAll.indeterminate = false;
                    this.eSelectAll.checked = true;
                }
                else if (this.model.isNothingSelected()) {
                    this.eSelectAll.indeterminate = false;
                    this.eSelectAll.checked = false;
                }
                else {
                    this.eSelectAll.indeterminate = true;
                }
                this.setupApply();
            };
            SetFilter.prototype.setupApply = function () {
                var _this = this;
                if (this.applyActive) {
                    this.eApplyButton = this.eGui.querySelector('#applyButton');
                    this.eApplyButton.addEventListener('click', function () {
                        _this.filterChangedCallback();
                    });
                }
                else {
                    _.removeElement(this.eGui, '#applyPanel');
                }
            };
            SetFilter.prototype.setContainerHeight = function () {
                this.eListContainer.style.height = (this.model.getDisplayedValueCount() * this.rowHeight) + "px";
            };
            SetFilter.prototype.drawVirtualRows = function () {
                var topPixel = this.eListViewport.scrollTop;
                var bottomPixel = topPixel + this.eListViewport.offsetHeight;
                var firstRow = Math.floor(topPixel / this.rowHeight);
                var lastRow = Math.floor(bottomPixel / this.rowHeight);
                this.ensureRowsRendered(firstRow, lastRow);
            };
            SetFilter.prototype.ensureRowsRendered = function (start, finish) {
                var _this = this;
                //at the end, this array will contain the items we need to remove
                var rowsToRemove = Object.keys(this.rowsInBodyContainer);
                for (var rowIndex = start; rowIndex <= finish; rowIndex++) {
                    //see if item already there, and if yes, take it out of the 'to remove' array
                    if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {
                        rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);
                        continue;
                    }
                    //check this row actually exists (in case overflow buffer window exceeds real data)
                    if (this.model.getDisplayedValueCount() > rowIndex) {
                        var value = this.model.getDisplayedValue(rowIndex);
                        _this.insertRow(value, rowIndex);
                    }
                }
                //at this point, everything in our 'rowsToRemove' . . .
                this.removeVirtualRows(rowsToRemove);
            };
            //takes array of row id's
            SetFilter.prototype.removeVirtualRows = function (rowsToRemove) {
                var _this = this;
                rowsToRemove.forEach(function (indexToRemove) {
                    var eRowToRemove = _this.rowsInBodyContainer[indexToRemove];
                    _this.eListContainer.removeChild(eRowToRemove);
                    delete _this.rowsInBodyContainer[indexToRemove];
                });
            };
            SetFilter.prototype.insertRow = function (value, rowIndex) {
                var _this = this;
                var eFilterValue = this.eFilterValueTemplate.cloneNode(true);
                var valueElement = eFilterValue.querySelector(".ag-filter-value");
                if (this.cellRenderer) {
                    //renderer provided, so use it
                    var resultFromRenderer = this.cellRenderer({
                        value: value
                    });
                    if (_.isNode(resultFromRenderer)) {
                        //a dom node or element was returned, so add child
                        valueElement.appendChild(resultFromRenderer);
                    }
                    else {
                        //otherwise assume it was html, so just insert
                        valueElement.innerHTML = resultFromRenderer;
                    }
                }
                else {
                    //otherwise display as a string
                    var blanksText = '(' + this.localeTextFunc('blanks', 'Blanks') + ')';
                    var displayNameOfValue = value === null ? blanksText : value;
                    valueElement.innerHTML = displayNameOfValue;
                }
                var eCheckbox = eFilterValue.querySelector("input");
                eCheckbox.checked = this.model.isValueSelected(value);
                eCheckbox.onclick = function () {
                    _this.onCheckboxClicked(eCheckbox, value);
                };
                eFilterValue.style.top = (this.rowHeight * rowIndex) + "px";
                this.eListContainer.appendChild(eFilterValue);
                this.rowsInBodyContainer[rowIndex] = eFilterValue;
            };
            SetFilter.prototype.onCheckboxClicked = function (eCheckbox, value) {
                var checked = eCheckbox.checked;
                if (checked) {
                    this.model.selectValue(value);
                    if (this.model.isEverythingSelected()) {
                        this.eSelectAll.indeterminate = false;
                        this.eSelectAll.checked = true;
                    }
                    else {
                        this.eSelectAll.indeterminate = true;
                    }
                }
                else {
                    this.model.unselectValue(value);
                    //if set is empty, nothing is selected
                    if (this.model.isNothingSelected()) {
                        this.eSelectAll.indeterminate = false;
                        this.eSelectAll.checked = false;
                    }
                    else {
                        this.eSelectAll.indeterminate = true;
                    }
                }
                this.filterChanged();
            };
            SetFilter.prototype.filterChanged = function () {
                if (!this.applyActive) {
                    this.filterChangedCallback();
                }
            };
            SetFilter.prototype.onMiniFilterChanged = function () {
                var miniFilterChanged = this.model.setMiniFilter(this.eMiniFilter.value);
                if (miniFilterChanged) {
                    this.setContainerHeight();
                    this.refreshVirtualRows();
                }
            };
            SetFilter.prototype.refreshVirtualRows = function () {
                this.clearVirtualRows();
                this.drawVirtualRows();
            };
            SetFilter.prototype.clearVirtualRows = function () {
                var rowsToRemove = Object.keys(this.rowsInBodyContainer);
                this.removeVirtualRows(rowsToRemove);
            };
            SetFilter.prototype.onSelectAll = function () {
                var checked = this.eSelectAll.checked;
                if (checked) {
                    this.model.selectEverything();
                }
                else {
                    this.model.selectNothing();
                }
                this.updateAllCheckboxes(checked);
                this.filterChanged();
            };
            SetFilter.prototype.updateAllCheckboxes = function (checked) {
                var currentlyDisplayedCheckboxes = this.eListContainer.querySelectorAll("[filter-checkbox=true]");
                for (var i = 0, l = currentlyDisplayedCheckboxes.length; i < l; i++) {
                    currentlyDisplayedCheckboxes[i].checked = checked;
                }
            };
            SetFilter.prototype.addScrollListener = function () {
                var _this = this;
                this.eListViewport.addEventListener("scroll", function () {
                    _this.drawVirtualRows();
                });
            };
            SetFilter.prototype.getApi = function () {
                return this.api;
            };
            SetFilter.prototype.createApi = function () {
                var model = this.model;
                var that = this;
                this.api = {
                    setMiniFilter: function (newMiniFilter) {
                        model.setMiniFilter(newMiniFilter);
                    },
                    getMiniFilter: function () {
                        return model.getMiniFilter();
                    },
                    selectEverything: function () {
                        model.selectEverything();
                    },
                    isFilterActive: function () {
                        return model.isFilterActive();
                    },
                    selectNothing: function () {
                        model.selectNothing();
                    },
                    unselectValue: function (value) {
                        model.unselectValue(value);
                        that.refreshVirtualRows();
                    },
                    selectValue: function (value) {
                        model.selectValue(value);
                        that.refreshVirtualRows();
                    },
                    isValueSelected: function (value) {
                        return model.isValueSelected(value);
                    },
                    isEverythingSelected: function () {
                        return model.isEverythingSelected();
                    },
                    isNothingSelected: function () {
                        return model.isNothingSelected();
                    },
                    getUniqueValueCount: function () {
                        return model.getUniqueValueCount();
                    },
                    getUniqueValue: function (index) {
                        return model.getUniqueValue(index);
                    },
                    getModel: function () {
                        return model.getModel();
                    },
                    setModel: function (dataModel) {
                        model.setModel(dataModel);
                        that.refreshVirtualRows();
                    }
                };
            };
            return SetFilter;
        })();
        grid.SetFilter = SetFilter;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var _ = grid.Utils;
        var PopupService = (function () {
            function PopupService() {
            }
            PopupService.getInstance = function () {
                if (!this.theInstance) {
                    this.theInstance = new PopupService();
                }
                return this.theInstance;
            };
            PopupService.prototype.init = function (ePopupParent) {
                this.ePopupParent = ePopupParent;
            };
            PopupService.prototype.positionPopup = function (eventSource, ePopup, minWidth) {
                var sourceRect = eventSource.getBoundingClientRect();
                var parentRect = this.ePopupParent.getBoundingClientRect();
                var x = sourceRect.left - parentRect.left;
                var y = sourceRect.top - parentRect.top + sourceRect.height;
                // if popup is overflowing to the right, move it left
                if (minWidth > 0) {
                    var widthOfParent = parentRect.right - parentRect.left;
                    var maxX = widthOfParent - minWidth;
                    if (x > maxX) {
                        x = maxX;
                    }
                    if (x < 0) {
                        x = 0;
                    }
                }
                ePopup.style.left = x + "px";
                ePopup.style.top = y + "px";
            };
            //adds an element to a div, but also listens to background checking for clicks,
            //so that when the background is clicked, the child is removed again, giving
            //a model look to popups.
            PopupService.prototype.addAsModalPopup = function (eChild) {
                var eBody = document.body;
                if (!eBody) {
                    console.warn('ag-grid: could not find the body of the document, document.body is empty');
                    return;
                }
                var popupAlreadyShown = _.isVisible(eChild);
                if (popupAlreadyShown) {
                    return;
                }
                this.ePopupParent.appendChild(eChild);
                // if we add these listeners now, then the current mouse
                // click will be included, which we don't want
                setTimeout(function () {
                    eBody.addEventListener('click', hidePopup);
                    eChild.addEventListener('click', consumeClick);
                }, 0);
                var eventFromChild = null;
                var that = this;
                function hidePopup(event) {
                    if (event && event === eventFromChild) {
                        return;
                    }
                    that.ePopupParent.removeChild(eChild);
                    eBody.removeEventListener('click', hidePopup);
                    eChild.removeEventListener('click', consumeClick);
                }
                function consumeClick(event) {
                    eventFromChild = event;
                }
                return hidePopup;
            };
            return PopupService;
        })();
        grid.PopupService = PopupService;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="textFilter.ts" />
/// <reference path="numberFilter.ts" />
/// <reference path="setFilter.ts" />
/// <reference path="../widgets/agPopupService.ts" />
var awk;
(function (awk) {
    var grid;
    (function (_grid) {
        var agPopupService = _grid.PopupService.getInstance();
        var utils = _grid.Utils;
        var FilterManager = (function () {
            function FilterManager() {
            }
            FilterManager.prototype.init = function (grid, gridOptionsWrapper, $compile, $scope, expressionService, columnModel) {
                this.$compile = $compile;
                this.$scope = $scope;
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.grid = grid;
                this.allFilters = {};
                this.expressionService = expressionService;
                this.columnModel = columnModel;
            };
            FilterManager.prototype.setFilterModel = function (model) {
                var that = this;
                if (model) {
                    // mark the filters as we set them, so any active filters left over we stop
                    var processedFields = Object.keys(model);
                    utils.iterateObject(this.allFilters, function (key, filterWrapper) {
                        var field = filterWrapper.column.colDef.field;
                        utils.removeFromArray(processedFields, field);
                        if (field) {
                            var newModel = model[field];
                            that.setModelOnFilterWrapper(filterWrapper.filter, newModel);
                        }
                        else {
                            console.warn('Warning ag-grid - no field found for column while doing setFilterModel');
                        }
                    });
                    // at this point, processedFields contains data for which we don't have a filter working yet
                    utils.iterateArray(processedFields, function (field) {
                        var column = that.columnModel.getColumn(field);
                        if (!column) {
                            console.warn('Warning ag-grid - no column found for field ' + field);
                            return;
                        }
                        var filterWrapper = that.getOrCreateFilterWrapper(column);
                        that.setModelOnFilterWrapper(filterWrapper.filter, model[field]);
                    });
                }
                else {
                    utils.iterateObject(this.allFilters, function (key, filterWrapper) {
                        that.setModelOnFilterWrapper(filterWrapper.filter, null);
                    });
                }
            };
            FilterManager.prototype.setModelOnFilterWrapper = function (filter, newModel) {
                // because user can provide filters, we provide useful error checking and messages
                if (typeof filter.getApi !== 'function') {
                    console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');
                    return;
                }
                var filterApi = filter.getApi();
                if (typeof filterApi.setModel !== 'function') {
                    console.warn('Warning ag-grid - filter API missing setModel method, which is needed for setFilterModel');
                    return;
                }
                filterApi.setModel(newModel);
            };
            FilterManager.prototype.getFilterModel = function () {
                var result = {};
                utils.iterateObject(this.allFilters, function (key, filterWrapper) {
                    // because user can provide filters, we provide useful error checking and messages
                    if (typeof filterWrapper.filter.getApi !== 'function') {
                        console.warn('Warning ag-grid - filter missing getApi method, which is needed for getFilterModel');
                        return;
                    }
                    var filterApi = filterWrapper.filter.getApi();
                    if (typeof filterApi.getModel !== 'function') {
                        console.warn('Warning ag-grid - filter API missing getModel method, which is needed for getFilterModel');
                        return;
                    }
                    var model = filterApi.getModel();
                    if (model) {
                        var field = filterWrapper.column.colDef.field;
                        if (!field) {
                            console.warn('Warning ag-grid - cannot get filter model when no field value present for column');
                        }
                        else {
                            result[field] = model;
                        }
                    }
                });
                return result;
            };
            FilterManager.prototype.setRowModel = function (rowModel) {
                this.rowModel = rowModel;
            };
            // returns true if at least one filter is active
            FilterManager.prototype.isFilterPresent = function () {
                var atLeastOneActive = false;
                var that = this;
                var keys = Object.keys(this.allFilters);
                keys.forEach(function (key) {
                    var filterWrapper = that.allFilters[key];
                    if (!filterWrapper.filter.isFilterActive) {
                        console.error('Filter is missing method isFilterActive');
                    }
                    if (filterWrapper.filter.isFilterActive()) {
                        atLeastOneActive = true;
                    }
                });
                return atLeastOneActive;
            };
            // returns true if given col has a filter active
            FilterManager.prototype.isFilterPresentForCol = function (colId) {
                var filterWrapper = this.allFilters[colId];
                if (!filterWrapper) {
                    return false;
                }
                if (!filterWrapper.filter.isFilterActive) {
                    console.error('Filter is missing method isFilterActive');
                }
                var filterPresent = filterWrapper.filter.isFilterActive();
                return filterPresent;
            };
            FilterManager.prototype.doesFilterPass = function (node) {
                var data = node.data;
                var colKeys = Object.keys(this.allFilters);
                for (var i = 0, l = colKeys.length; i < l; i++) {
                    var colId = colKeys[i];
                    var filterWrapper = this.allFilters[colId];
                    // if no filter, always pass
                    if (filterWrapper === undefined) {
                        continue;
                    }
                    if (!filterWrapper.filter.doesFilterPass) {
                        console.error('Filter is missing method doesFilterPass');
                    }
                    var params = {
                        node: node,
                        data: data
                    };
                    if (!filterWrapper.filter.doesFilterPass(params)) {
                        return false;
                    }
                }
                // all filters passed
                return true;
            };
            FilterManager.prototype.onNewRowsLoaded = function () {
                var that = this;
                Object.keys(this.allFilters).forEach(function (field) {
                    var filter = that.allFilters[field].filter;
                    if (filter.onNewRowsLoaded) {
                        filter.onNewRowsLoaded();
                    }
                });
            };
            FilterManager.prototype.createValueGetter = function (colDef) {
                var that = this;
                return function valueGetter(node) {
                    var api = that.gridOptionsWrapper.getApi();
                    var context = that.gridOptionsWrapper.getContext();
                    return utils.getValue(that.expressionService, node.data, colDef, node, api, context);
                };
            };
            FilterManager.prototype.getFilterApi = function (column) {
                var filterWrapper = this.getOrCreateFilterWrapper(column);
                if (filterWrapper) {
                    if (typeof filterWrapper.filter.getApi === 'function') {
                        return filterWrapper.filter.getApi();
                    }
                }
            };
            FilterManager.prototype.getOrCreateFilterWrapper = function (column) {
                var filterWrapper = this.allFilters[column.colId];
                if (!filterWrapper) {
                    filterWrapper = this.createFilterWrapper(column);
                    this.allFilters[column.colId] = filterWrapper;
                }
                return filterWrapper;
            };
            FilterManager.prototype.createFilterWrapper = function (column) {
                var colDef = column.colDef;
                var filterWrapper = {
                    column: column,
                    filter: null,
                    scope: null,
                    gui: null
                };
                var filterChangedCallback = this.grid.onFilterChanged.bind(this.grid);
                var filterParams = colDef.filterParams;
                var params = {
                    colDef: colDef,
                    rowModel: this.rowModel,
                    filterChangedCallback: filterChangedCallback,
                    filterParams: filterParams,
                    localeTextFunc: this.gridOptionsWrapper.getLocaleTextFunc(),
                    valueGetter: this.createValueGetter(colDef),
                    $scope: null
                };
                if (typeof colDef.filter === 'function') {
                    // if user provided a filter, just use it
                    // first up, create child scope if needed
                    if (this.gridOptionsWrapper.isAngularCompileFilters()) {
                        var scope = this.$scope.$new();
                        filterWrapper.scope = scope;
                        params.$scope = scope;
                    }
                    // now create filter
                    filterWrapper.filter = new colDef.filter(params);
                }
                else if (colDef.filter === 'text') {
                    filterWrapper.filter = new _grid.TextFilter(params);
                }
                else if (colDef.filter === 'number') {
                    filterWrapper.filter = new _grid.NumberFilter(params);
                }
                else {
                    filterWrapper.filter = new _grid.SetFilter(params);
                }
                if (!filterWrapper.filter.getGui) {
                    throw 'Filter is missing method getGui';
                }
                var eFilterGui = document.createElement('div');
                eFilterGui.className = 'ag-filter';
                var guiFromFilter = filterWrapper.filter.getGui();
                if (utils.isNodeOrElement(guiFromFilter)) {
                    //a dom node or element was returned, so add child
                    eFilterGui.appendChild(guiFromFilter);
                }
                else {
                    //otherwise assume it was html, so just insert
                    var eTextSpan = document.createElement('span');
                    eTextSpan.innerHTML = guiFromFilter;
                    eFilterGui.appendChild(eTextSpan);
                }
                if (filterWrapper.scope) {
                    filterWrapper.gui = this.$compile(eFilterGui)(filterWrapper.scope)[0];
                }
                else {
                    filterWrapper.gui = eFilterGui;
                }
                return filterWrapper;
            };
            FilterManager.prototype.showFilter = function (column, eventSource) {
                var filterWrapper = this.getOrCreateFilterWrapper(column);
                agPopupService.positionPopup(eventSource, filterWrapper.gui, 200);
                agPopupService.addAsModalPopup(filterWrapper.gui);
                if (filterWrapper.filter.afterGuiAttached) {
                    filterWrapper.filter.afterGuiAttached();
                }
            };
            return FilterManager;
        })();
        _grid.FilterManager = FilterManager;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        // these constants are used for determining if groups should
        // be selected or deselected when selecting groups, and the group
        // then selects the children.
        var SELECTED = 0;
        var UNSELECTED = 1;
        var MIXED = 2;
        var DO_NOT_CARE = 3;
        var SelectionController = (function () {
            function SelectionController() {
            }
            SelectionController.prototype.init = function (angularGrid, gridPanel, gridOptionsWrapper, $scope, rowRenderer) {
                this.eRowsParent = gridPanel.getRowsParent();
                this.angularGrid = angularGrid;
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.$scope = $scope;
                this.rowRenderer = rowRenderer;
                this.initSelectedNodesById();
                this.selectedRows = [];
                gridOptionsWrapper.setSelectedRows(this.selectedRows);
            };
            SelectionController.prototype.initSelectedNodesById = function () {
                this.selectedNodesById = {};
                this.gridOptionsWrapper.setSelectedNodesById(this.selectedNodesById);
            };
            SelectionController.prototype.getSelectedNodes = function () {
                var selectedNodes = [];
                var keys = Object.keys(this.selectedNodesById);
                for (var i = 0; i < keys.length; i++) {
                    var id = keys[i];
                    var selectedNode = this.selectedNodesById[id];
                    selectedNodes.push(selectedNode);
                }
                return selectedNodes;
            };
            // returns a list of all nodes at 'best cost' - a feature to be used
            // with groups / trees. if a group has all it's children selected,
            // then the group appears in the result, but not the children.
            // Designed for use with 'children' as the group selection type,
            // where groups don't actually appear in the selection normally.
            SelectionController.prototype.getBestCostNodeSelection = function () {
                if (typeof this.rowModel.getTopLevelNodes !== 'function') {
                    throw 'selectAll not available when rows are on the server';
                }
                var topLevelNodes = this.rowModel.getTopLevelNodes();
                var result = [];
                var that = this;
                // recursive function, to find the selected nodes
                function traverse(nodes) {
                    for (var i = 0, l = nodes.length; i < l; i++) {
                        var node = nodes[i];
                        if (that.isNodeSelected(node)) {
                            result.push(node);
                        }
                        else {
                            // if not selected, then if it's a group, and the group
                            // has children, continue to search for selections
                            if (node.group && node.children) {
                                traverse(node.children);
                            }
                        }
                    }
                }
                traverse(topLevelNodes);
                return result;
            };
            SelectionController.prototype.setRowModel = function (rowModel) {
                this.rowModel = rowModel;
            };
            // public - this clears the selection, but doesn't clear down the css - when it is called, the
            // caller then gets the grid to refresh.
            SelectionController.prototype.deselectAll = function () {
                this.initSelectedNodesById();
                //var keys = Object.keys(this.selectedNodesById);
                //for (var i = 0; i < keys.length; i++) {
                //    delete this.selectedNodesById[keys[i]];
                //}
                this.syncSelectedRowsAndCallListener();
            };
            // public - this selects everything, but doesn't clear down the css - when it is called, the
            // caller then gets the grid to refresh.
            SelectionController.prototype.selectAll = function () {
                if (typeof this.rowModel.getTopLevelNodes !== 'function') {
                    throw 'selectAll not available when rows are on the server';
                }
                var selectedNodesById = this.selectedNodesById;
                // if the selection is "don't include groups", then we don't include them!
                var includeGroups = !this.gridOptionsWrapper.isGroupSelectsChildren();
                function recursivelySelect(nodes) {
                    if (nodes) {
                        for (var i = 0; i < nodes.length; i++) {
                            var node = nodes[i];
                            if (node.group) {
                                recursivelySelect(node.children);
                                if (includeGroups) {
                                    selectedNodesById[node.id] = node;
                                }
                            }
                            else {
                                selectedNodesById[node.id] = node;
                            }
                        }
                    }
                }
                var topLevelNodes = this.rowModel.getTopLevelNodes();
                recursivelySelect(topLevelNodes);
                this.syncSelectedRowsAndCallListener();
            };
            SelectionController.prototype.selectNode = function (node, tryMulti, suppressEvents) {
                var multiSelect = this.gridOptionsWrapper.isRowSelectionMulti() && tryMulti;
                // if the node is a group, then selecting this is the same as selecting the parent,
                // so to have only one flow through the below, we always select the header parent
                // (which then has the side effect of selecting the child).
                var nodeToSelect;
                if (node.footer) {
                    nodeToSelect = node.sibling;
                }
                else {
                    nodeToSelect = node;
                }
                // at the end, if this is true, we inform the callback
                var atLeastOneItemUnselected = false;
                var atLeastOneItemSelected = false;
                // see if rows to be deselected
                if (!multiSelect) {
                    atLeastOneItemUnselected = this.doWorkOfDeselectAllNodes();
                }
                if (this.gridOptionsWrapper.isGroupSelectsChildren() && nodeToSelect.group) {
                    // don't select the group, select the children instead
                    atLeastOneItemSelected = this.recursivelySelectAllChildren(nodeToSelect);
                }
                else {
                    // see if row needs to be selected
                    atLeastOneItemSelected = this.doWorkOfSelectNode(nodeToSelect, suppressEvents);
                }
                if (atLeastOneItemUnselected || atLeastOneItemSelected) {
                    this.syncSelectedRowsAndCallListener(suppressEvents);
                }
                this.updateGroupParentsIfNeeded();
            };
            SelectionController.prototype.recursivelySelectAllChildren = function (node, suppressEvents) {
                var atLeastOne = false;
                if (node.children) {
                    for (var i = 0; i < node.children.length; i++) {
                        var child = node.children[i];
                        if (child.group) {
                            if (this.recursivelySelectAllChildren(child)) {
                                atLeastOne = true;
                            }
                        }
                        else {
                            if (this.doWorkOfSelectNode(child, suppressEvents)) {
                                atLeastOne = true;
                            }
                        }
                    }
                }
                return atLeastOne;
            };
            SelectionController.prototype.recursivelyDeselectAllChildren = function (node) {
                if (node.children) {
                    for (var i = 0; i < node.children.length; i++) {
                        var child = node.children[i];
                        if (child.group) {
                            this.recursivelyDeselectAllChildren(child);
                        }
                        else {
                            this.deselectRealNode(child);
                        }
                    }
                }
            };
            // private
            // 1 - selects a node
            // 2 - updates the UI
            // 3 - calls callbacks
            SelectionController.prototype.doWorkOfSelectNode = function (node, suppressEvents) {
                if (this.selectedNodesById[node.id]) {
                    return false;
                }
                this.selectedNodesById[node.id] = node;
                this.addCssClassForNode_andInformVirtualRowListener(node);
                // also color in the footer if there is one
                if (node.group && node.expanded && node.sibling) {
                    this.addCssClassForNode_andInformVirtualRowListener(node.sibling);
                }
                // inform the rowSelected listener, if any
                if (!suppressEvents && typeof this.gridOptionsWrapper.getRowSelected() === "function") {
                    this.gridOptionsWrapper.getRowSelected()(node.data, node);
                }
                return true;
            };
            // private
            // 1 - selects a node
            // 2 - updates the UI
            // 3 - calls callbacks
            // wow - what a big name for a method, exception case, it's saying what the method does
            SelectionController.prototype.addCssClassForNode_andInformVirtualRowListener = function (node) {
                var virtualRenderedRowIndex = this.rowRenderer.getIndexOfRenderedNode(node);
                if (virtualRenderedRowIndex >= 0) {
                    utils.querySelectorAll_addCssClass(this.eRowsParent, '[row="' + virtualRenderedRowIndex + '"]', 'ag-row-selected');
                    // inform virtual row listener
                    this.angularGrid.onVirtualRowSelected(virtualRenderedRowIndex, true);
                }
            };
            // private
            // 1 - un-selects a node
            // 2 - updates the UI
            // 3 - calls callbacks
            SelectionController.prototype.doWorkOfDeselectAllNodes = function (nodeToKeepSelected) {
                // not doing multi-select, so deselect everything other than the 'just selected' row
                var atLeastOneSelectionChange;
                var selectedNodeKeys = Object.keys(this.selectedNodesById);
                for (var i = 0; i < selectedNodeKeys.length; i++) {
                    // skip the 'just selected' row
                    var key = selectedNodeKeys[i];
                    var nodeToDeselect = this.selectedNodesById[key];
                    if (nodeToDeselect === nodeToKeepSelected) {
                        continue;
                    }
                    else {
                        this.deselectRealNode(nodeToDeselect);
                        atLeastOneSelectionChange = true;
                    }
                }
                return atLeastOneSelectionChange;
            };
            // private
            SelectionController.prototype.deselectRealNode = function (node) {
                // deselect the css
                this.removeCssClassForNode(node);
                // if node is a header, and if it has a sibling footer, deselect the footer also
                if (node.group && node.expanded && node.sibling) {
                    this.removeCssClassForNode(node.sibling);
                }
                // remove the row
                delete this.selectedNodesById[node.id];
            };
            // private
            SelectionController.prototype.removeCssClassForNode = function (node) {
                var virtualRenderedRowIndex = this.rowRenderer.getIndexOfRenderedNode(node);
                if (virtualRenderedRowIndex >= 0) {
                    utils.querySelectorAll_removeCssClass(this.eRowsParent, '[row="' + virtualRenderedRowIndex + '"]', 'ag-row-selected');
                    // inform virtual row listener
                    this.angularGrid.onVirtualRowSelected(virtualRenderedRowIndex, false);
                }
            };
            // public (selectionRendererFactory)
            SelectionController.prototype.deselectIndex = function (rowIndex) {
                var node = this.rowModel.getVirtualRow(rowIndex);
                this.deselectNode(node);
            };
            // public (api)
            SelectionController.prototype.deselectNode = function (node) {
                if (node) {
                    if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
                        // want to deselect children, not this node, so recursively deselect
                        this.recursivelyDeselectAllChildren(node);
                    }
                    else {
                        this.deselectRealNode(node);
                    }
                }
                this.syncSelectedRowsAndCallListener();
                this.updateGroupParentsIfNeeded();
            };
            // public (selectionRendererFactory & api)
            SelectionController.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
                var node = this.rowModel.getVirtualRow(index);
                this.selectNode(node, tryMulti, suppressEvents);
            };
            // private
            // updates the selectedRows with the selectedNodes and calls selectionChanged listener
            SelectionController.prototype.syncSelectedRowsAndCallListener = function (suppressEvents) {
                // update selected rows
                var selectedRows = this.selectedRows;
                var oldCount = selectedRows.length;
                // clear selected rows
                selectedRows.length = 0;
                var keys = Object.keys(this.selectedNodesById);
                for (var i = 0; i < keys.length; i++) {
                    if (this.selectedNodesById[keys[i]] !== undefined) {
                        var selectedNode = this.selectedNodesById[keys[i]];
                        selectedRows.push(selectedNode.data);
                    }
                }
                // this stope the event firing the very first the time grid is initialised. without this, the documentation
                // page had a popup in the 'selection' page as soon as the page was loaded!!
                var nothingChangedMustBeInitialising = oldCount === 0 && selectedRows.length === 0;
                if (!nothingChangedMustBeInitialising && !suppressEvents && typeof this.gridOptionsWrapper.getSelectionChanged() === "function") {
                    this.gridOptionsWrapper.getSelectionChanged()();
                }
                var that = this;
                if (this.$scope) {
                    setTimeout(function () {
                        that.$scope.$apply();
                    }, 0);
                }
            };
            // private
            SelectionController.prototype.recursivelyCheckIfSelected = function (node) {
                var foundSelected = false;
                var foundUnselected = false;
                if (node.children) {
                    for (var i = 0; i < node.children.length; i++) {
                        var child = node.children[i];
                        var result;
                        if (child.group) {
                            result = this.recursivelyCheckIfSelected(child);
                            switch (result) {
                                case SELECTED:
                                    foundSelected = true;
                                    break;
                                case UNSELECTED:
                                    foundUnselected = true;
                                    break;
                                case MIXED:
                                    foundSelected = true;
                                    foundUnselected = true;
                                    break;
                            }
                        }
                        else {
                            if (this.isNodeSelected(child)) {
                                foundSelected = true;
                            }
                            else {
                                foundUnselected = true;
                            }
                        }
                        if (foundSelected && foundUnselected) {
                            // if mixed, then no need to go further, just return up the chain
                            return MIXED;
                        }
                    }
                }
                // got this far, so no conflicts, either all children selected, unselected, or neither
                if (foundSelected) {
                    return SELECTED;
                }
                else if (foundUnselected) {
                    return UNSELECTED;
                }
                else {
                    return DO_NOT_CARE;
                }
            };
            // public (selectionRendererFactory)
            // returns:
            // true: if selected
            // false: if unselected
            // undefined: if it's a group and 'children selection' is used and 'children' are a mix of selected and unselected
            SelectionController.prototype.isNodeSelected = function (node) {
                if (this.gridOptionsWrapper.isGroupSelectsChildren() && node.group) {
                    // doing child selection, we need to traverse the children
                    var resultOfChildren = this.recursivelyCheckIfSelected(node);
                    switch (resultOfChildren) {
                        case SELECTED:
                            return true;
                        case UNSELECTED:
                            return false;
                        default:
                            return undefined;
                    }
                }
                else {
                    return this.selectedNodesById[node.id] !== undefined;
                }
            };
            SelectionController.prototype.updateGroupParentsIfNeeded = function () {
                // we only do this if parent nodes are responsible
                // for selecting their children.
                if (!this.gridOptionsWrapper.isGroupSelectsChildren()) {
                    return;
                }
                var firstRow = this.rowRenderer.getFirstVirtualRenderedRow();
                var lastRow = this.rowRenderer.getLastVirtualRenderedRow();
                for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {
                    // see if node is a group
                    var node = this.rowModel.getVirtualRow(rowIndex);
                    if (node.group) {
                        var selected = this.isNodeSelected(node);
                        this.angularGrid.onVirtualRowSelected(rowIndex, selected);
                        if (selected) {
                            utils.querySelectorAll_addCssClass(this.eRowsParent, '[row="' + rowIndex + '"]', 'ag-row-selected');
                        }
                        else {
                            utils.querySelectorAll_removeCssClass(this.eRowsParent, '[row="' + rowIndex + '"]', 'ag-row-selected');
                        }
                    }
                }
            };
            return SelectionController;
        })();
        grid.SelectionController = SelectionController;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var SelectionRendererFactory = (function () {
            function SelectionRendererFactory() {
            }
            SelectionRendererFactory.prototype.init = function (angularGrid, selectionController) {
                this.angularGrid = angularGrid;
                this.selectionController = selectionController;
            };
            SelectionRendererFactory.prototype.createCheckboxColDef = function () {
                return {
                    width: 30,
                    suppressMenu: true,
                    suppressSorting: true,
                    headerCellRenderer: function () {
                        var eCheckbox = document.createElement('input');
                        eCheckbox.type = 'checkbox';
                        eCheckbox.name = 'name';
                        return eCheckbox;
                    },
                    cellRenderer: this.createCheckboxRenderer()
                };
            };
            SelectionRendererFactory.prototype.createCheckboxRenderer = function () {
                var that = this;
                return function (params) {
                    return that.createSelectionCheckbox(params.node, params.rowIndex);
                };
            };
            SelectionRendererFactory.prototype.createSelectionCheckbox = function (node, rowIndex) {
                var eCheckbox = document.createElement('input');
                eCheckbox.type = "checkbox";
                eCheckbox.name = "name";
                eCheckbox.className = 'ag-selection-checkbox';
                setCheckboxState(eCheckbox, this.selectionController.isNodeSelected(node));
                var that = this;
                eCheckbox.onclick = function (event) {
                    event.stopPropagation();
                };
                eCheckbox.onchange = function () {
                    var newValue = eCheckbox.checked;
                    if (newValue) {
                        that.selectionController.selectIndex(rowIndex, true);
                    }
                    else {
                        that.selectionController.deselectIndex(rowIndex);
                    }
                };
                this.angularGrid.addVirtualRowListener(rowIndex, {
                    rowSelected: function (selected) {
                        setCheckboxState(eCheckbox, selected);
                    },
                    rowRemoved: function () {
                    }
                });
                return eCheckbox;
            };
            return SelectionRendererFactory;
        })();
        grid.SelectionRendererFactory = SelectionRendererFactory;
        function setCheckboxState(eCheckbox, state) {
            if (typeof state === 'boolean') {
                eCheckbox.checked = state;
                eCheckbox.indeterminate = false;
            }
            else {
                // isNodeSelected returns back undefined if it's a group and the children
                // are a mix of selected and unselected
                eCheckbox.indeterminate = true;
            }
        }
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var SVG_NS = "http://www.w3.org/2000/svg";
        var SvgFactory = (function () {
            function SvgFactory() {
            }
            SvgFactory.getInstance = function () {
                if (!this.theInstance) {
                    this.theInstance = new SvgFactory();
                }
                return this.theInstance;
            };
            SvgFactory.prototype.createFilterSvg = function () {
                var eSvg = createIconSvg();
                var eFunnel = document.createElementNS(SVG_NS, "polygon");
                eFunnel.setAttribute("points", "0,0 4,4 4,10 6,10 6,4 10,0");
                eFunnel.setAttribute("class", "ag-header-icon");
                eSvg.appendChild(eFunnel);
                return eSvg;
            };
            SvgFactory.prototype.createColumnShowingSvg = function () {
                return createCircle(true);
            };
            SvgFactory.prototype.createColumnHiddenSvg = function () {
                return createCircle(false);
            };
            SvgFactory.prototype.createMenuSvg = function () {
                var eSvg = document.createElementNS(SVG_NS, "svg");
                var size = "12";
                eSvg.setAttribute("width", size);
                eSvg.setAttribute("height", size);
                ["0", "5", "10"].forEach(function (y) {
                    var eLine = document.createElementNS(SVG_NS, "rect");
                    eLine.setAttribute("y", y);
                    eLine.setAttribute("width", size);
                    eLine.setAttribute("height", "2");
                    eLine.setAttribute("class", "ag-header-icon");
                    eSvg.appendChild(eLine);
                });
                return eSvg;
            };
            SvgFactory.prototype.createArrowUpSvg = function () {
                return createPolygonSvg("0,10 5,0 10,10");
            };
            SvgFactory.prototype.createArrowLeftSvg = function () {
                return createPolygonSvg("10,0 0,5 10,10");
            };
            SvgFactory.prototype.createArrowDownSvg = function () {
                return createPolygonSvg("0,0 5,10 10,0");
            };
            SvgFactory.prototype.createArrowRightSvg = function () {
                return createPolygonSvg("0,0 10,5 0,10");
            };
            SvgFactory.prototype.createSmallArrowDownSvg = function () {
                return createPolygonSvg("0,0 3,6 6,0", 6);
            };
            // UnSort Icon SVG
            SvgFactory.prototype.createArrowUpDownSvg = function () {
                var svg = createIconSvg();
                var eAscIcon = document.createElementNS(SVG_NS, "polygon");
                eAscIcon.setAttribute("points", '0,4 5,0 10,4');
                svg.appendChild(eAscIcon);
                var eDescIcon = document.createElementNS(SVG_NS, "polygon");
                eDescIcon.setAttribute("points", '0,6 5,10 10,6');
                svg.appendChild(eDescIcon);
                return svg;
            };
            return SvgFactory;
        })();
        grid.SvgFactory = SvgFactory;
        function createPolygonSvg(points, width) {
            var eSvg = createIconSvg(width);
            var eDescIcon = document.createElementNS(SVG_NS, "polygon");
            eDescIcon.setAttribute("points", points);
            eSvg.appendChild(eDescIcon);
            return eSvg;
        }
        // util function for the above
        function createIconSvg(width) {
            var eSvg = document.createElementNS(SVG_NS, "svg");
            if (width > 0) {
                eSvg.setAttribute("width", width);
                eSvg.setAttribute("height", width);
            }
            else {
                eSvg.setAttribute("width", "10");
                eSvg.setAttribute("height", "10");
            }
            return eSvg;
        }
        function createCircle(fill) {
            var eSvg = createIconSvg();
            var eCircle = document.createElementNS(SVG_NS, "circle");
            eCircle.setAttribute("cx", "5");
            eCircle.setAttribute("cy", "5");
            eCircle.setAttribute("r", "5");
            eCircle.setAttribute("stroke", "black");
            eCircle.setAttribute("stroke-width", "2");
            if (fill) {
                eCircle.setAttribute("fill", "black");
            }
            else {
                eCircle.setAttribute("fill", "none");
            }
            eSvg.appendChild(eCircle);
            return eSvg;
        }
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../svgFactory.ts" />
/// <reference path="../utils.ts" />
/// <reference path="../constants.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var svgFactory = grid.SvgFactory.getInstance();
        var utils = grid.Utils;
        var constants = grid.Constants;
        function groupCellRendererFactory(gridOptionsWrapper, selectionRendererFactory) {
            return function groupCellRenderer(params) {
                var eGroupCell = document.createElement('span');
                var node = params.node;
                var cellExpandable = node.group && !node.footer;
                if (cellExpandable) {
                    addExpandAndContract(eGroupCell, params);
                }
                var checkboxNeeded = params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.checkbox && !node.footer;
                if (checkboxNeeded) {
                    var eCheckbox = selectionRendererFactory.createSelectionCheckbox(node, params.rowIndex);
                    eGroupCell.appendChild(eCheckbox);
                }
                if (params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.innerRenderer) {
                    createFromInnerRenderer(eGroupCell, params, params.colDef.cellRenderer.innerRenderer);
                }
                else if (node.footer) {
                    createFooterCell(eGroupCell, params);
                }
                else if (node.group) {
                    createGroupCell(eGroupCell, params);
                }
                else {
                    createLeafCell(eGroupCell, params);
                }
                // only do this if an indent - as this overwrites the padding that
                // the theme set, which will make things look 'not aligned' for the
                // first group level.
                if (node.footer || node.level > 0) {
                    var paddingFactor;
                    if (params.colDef && params.colDef.cellRenderer && params.colDef.cellRenderer.padding >= 0) {
                        paddingFactor = params.colDef.cellRenderer.padding;
                    }
                    else {
                        paddingFactor = 10;
                    }
                    var paddingPx = node.level * paddingFactor;
                    if (node.footer) {
                        paddingPx += 10;
                    }
                    else if (!node.group) {
                        paddingPx += 5;
                    }
                    eGroupCell.style.paddingLeft = paddingPx + 'px';
                }
                return eGroupCell;
            };
            function addExpandAndContract(eGroupCell, params) {
                var eExpandIcon = createGroupExpandIcon(true);
                var eContractIcon = createGroupExpandIcon(false);
                eGroupCell.appendChild(eExpandIcon);
                eGroupCell.appendChild(eContractIcon);
                eExpandIcon.addEventListener('click', expandOrContract);
                eContractIcon.addEventListener('click', expandOrContract);
                eGroupCell.addEventListener('dblclick', expandOrContract);
                showAndHideExpandAndContract(eExpandIcon, eContractIcon, params.node.expanded);
                // if parent cell was passed, then we can listen for when focus is on the cell,
                // and then expand / contract as the user hits enter or space-bar
                if (params.eGridCell) {
                    params.eGridCell.addEventListener('keydown', function (event) {
                        if (utils.isKeyPressed(event, constants.KEY_ENTER)) {
                            expandOrContract();
                            event.preventDefault();
                        }
                    });
                }
                function expandOrContract() {
                    expandGroup(eExpandIcon, eContractIcon, params);
                }
            }
            function showAndHideExpandAndContract(eExpandIcon, eContractIcon, expanded) {
                utils.setVisible(eExpandIcon, !expanded);
                utils.setVisible(eContractIcon, expanded);
            }
            function createFromInnerRenderer(eGroupCell, params, renderer) {
                utils.useRenderer(eGroupCell, renderer, params);
            }
            function expandGroup(eExpandIcon, eContractIcon, params) {
                params.node.expanded = !params.node.expanded;
                params.api.onGroupExpandedOrCollapsed(params.rowIndex + 1);
                showAndHideExpandAndContract(eExpandIcon, eContractIcon, params.node.expanded);
            }
            function createGroupExpandIcon(expanded) {
                var eIcon;
                if (expanded) {
                    eIcon = utils.createIcon('groupContracted', gridOptionsWrapper, null, svgFactory.createArrowRightSvg);
                }
                else {
                    eIcon = utils.createIcon('groupExpanded', gridOptionsWrapper, null, svgFactory.createArrowDownSvg);
                }
                utils.addCssClass(eIcon, 'ag-group-expand');
                return eIcon;
            }
            // creates cell with 'Total {{key}}' for a group
            function createFooterCell(eGroupCell, params) {
                var textToDisplay = "Total " + getGroupName(params);
                var eText = document.createTextNode(textToDisplay);
                eGroupCell.appendChild(eText);
            }
            function getGroupName(params) {
                var cellRenderer = params.colDef.cellRenderer;
                if (cellRenderer && cellRenderer.keyMap && typeof cellRenderer.keyMap === 'object' && params.colDef.cellRenderer !== null) {
                    var valueFromMap = cellRenderer.keyMap[params.node.key];
                    if (valueFromMap) {
                        return valueFromMap;
                    }
                    else {
                        return params.node.key;
                    }
                }
                else {
                    return params.node.key;
                }
            }
            // creates cell with '{{key}} ({{childCount}})' for a group
            function createGroupCell(eGroupCell, params) {
                var groupName = getGroupName(params);
                var colDefOfGroupedCol = params.api.getColumnDef(params.node.field);
                if (colDefOfGroupedCol && typeof colDefOfGroupedCol.cellRenderer === 'function') {
                    params.value = groupName;
                    utils.useRenderer(eGroupCell, colDefOfGroupedCol.cellRenderer, params);
                }
                else {
                    eGroupCell.appendChild(document.createTextNode(groupName));
                }
                // only include the child count if it's included, eg if user doing custom aggregation,
                // then this could be left out, or set to -1, ie no child count
                var suppressCount = params.colDef.cellRenderer && params.colDef.cellRenderer.suppressCount;
                if (!suppressCount && params.node.allChildrenCount >= 0) {
                    eGroupCell.appendChild(document.createTextNode(" (" + params.node.allChildrenCount + ")"));
                }
            }
            // creates cell with '{{key}} ({{childCount}})' for a group
            function createLeafCell(eParent, params) {
                if (params.value) {
                    var eText = document.createTextNode(' ' + params.value);
                    eParent.appendChild(eText);
                }
            }
        }
        grid.groupCellRendererFactory = groupCellRendererFactory;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="utils.ts" />
/// <reference path="constants.ts" />
/// <reference path="cellRenderers/groupCellRendererFactory.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var _ = grid.Utils;
        var RowRenderer = (function () {
            function RowRenderer() {
            }
            RowRenderer.prototype.init = function (gridOptions, columnModel, gridOptionsWrapper, gridPanel, angularGrid, selectionRendererFactory, $compile, $scope, selectionController, expressionService, templateService) {
                this.gridOptions = gridOptions;
                this.columnModel = columnModel;
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.angularGrid = angularGrid;
                this.selectionRendererFactory = selectionRendererFactory;
                this.gridPanel = gridPanel;
                this.$compile = $compile;
                this.$scope = $scope;
                this.selectionController = selectionController;
                this.expressionService = expressionService;
                this.templateService = templateService;
                this.findAllElements(gridPanel);
                this.cellRendererMap = {
                    'group': grid.groupCellRendererFactory(gridOptionsWrapper, selectionRendererFactory),
                    'expand': gridOptions.expandRow
                };
                // map of row ids to row objects. keeps track of which elements
                // are rendered for which rows in the dom. each row object has:
                // [scope, bodyRow, pinnedRow, rowData]
                this.renderedRows = {};
                this.renderedRowStartEditingListeners = {};
                this.editingCell = false; //gets set to true when editing a cell
            };
            RowRenderer.prototype.setRowModel = function (rowModel) {
                this.rowModel = rowModel;
            };
            RowRenderer.prototype.setMainRowWidths = function () {
                var mainRowWidth = this.columnModel.getBodyContainerWidth() + "px";
                var unpinnedRows = this.eBodyContainer.querySelectorAll(".ag-row");
                for (var i = 0; i < unpinnedRows.length; i++) {
                    unpinnedRows[i].style.width = mainRowWidth;
                }
            };
            RowRenderer.prototype.findAllElements = function (gridPanel) {
                this.eBodyContainer = gridPanel.getBodyContainer();
                this.eBodyViewport = gridPanel.getBodyViewport();
                this.ePinnedColsContainer = gridPanel.getPinnedColsContainer();
                this.eParentOfRows = gridPanel.getRowsParent();
            };
            RowRenderer.prototype.refreshView = function (refreshFromIndex) {
                if (!this.gridOptionsWrapper.isDontUseScrolls()) {
                    var rowCount = this.rowModel.getVirtualRowCount();
                    var containerHeight = this.gridOptionsWrapper.getRowHeight() * rowCount;
                    this.eBodyContainer.style.height = containerHeight + "px";
                    this.ePinnedColsContainer.style.height = containerHeight + "px";
                }
                this.refreshAllVirtualRows(refreshFromIndex);
            };
            RowRenderer.prototype.softRefreshView = function () {
                var first = this.firstVirtualRenderedRow;
                var last = this.lastVirtualRenderedRow;
                var columns = this.columnModel.getDisplayedColumns();
                // if no cols, don't draw row
                if (!columns || columns.length === 0) {
                    return;
                }
                for (var rowIndex = first; rowIndex <= last; rowIndex++) {
                    var node = this.rowModel.getVirtualRow(rowIndex);
                    if (node) {
                        for (var colIndex = 0; colIndex < columns.length; colIndex++) {
                            var column = columns[colIndex];
                            var renderedRow = this.renderedRows[rowIndex];
                            var eGridCell = renderedRow.eVolatileCells[column.colId];
                            if (!eGridCell) {
                                continue;
                            }
                            var isFirstColumn = colIndex === 0;
                            var scope = renderedRow.scope;
                            this.softRefreshCell(eGridCell, isFirstColumn, node, column, scope, rowIndex);
                        }
                    }
                }
            };
            RowRenderer.prototype.softRefreshCell = function (eGridCell, isFirstColumn, node, column, scope, rowIndex) {
                _.removeAllChildren(eGridCell);
                var data = this.getDataForNode(node);
                var valueGetter = this.createValueGetter(data, column.colDef, node);
                var value;
                if (valueGetter) {
                    value = valueGetter();
                }
                this.populateAndStyleGridCell(valueGetter, value, eGridCell, isFirstColumn, node, column, rowIndex, scope);
                // if angular compiling, then need to also compile the cell again (angular compiling sucks, please wait...)
                if (this.gridOptionsWrapper.isAngularCompileRows()) {
                    this.$compile(eGridCell)(scope);
                }
            };
            RowRenderer.prototype.rowDataChanged = function (rows) {
                // we only need to be worried about rendered rows, as this method is
                // called to whats rendered. if the row isn't rendered, we don't care
                var indexesToRemove = [];
                var renderedRows = this.renderedRows;
                Object.keys(renderedRows).forEach(function (key) {
                    var renderedRow = renderedRows[key];
                    // see if the rendered row is in the list of rows we have to update
                    var rowNeedsUpdating = rows.indexOf(renderedRow.node.data) >= 0;
                    if (rowNeedsUpdating) {
                        indexesToRemove.push(key);
                    }
                });
                // remove the rows
                this.removeVirtualRows(indexesToRemove);
                // add draw them again
                this.drawVirtualRows();
            };
            RowRenderer.prototype.refreshAllVirtualRows = function (fromIndex) {
                // remove all current virtual rows, as they have old data
                var rowsToRemove = Object.keys(this.renderedRows);
                this.removeVirtualRows(rowsToRemove, fromIndex);
                // add in new rows
                this.drawVirtualRows();
            };
            // public - removes the group rows and then redraws them again
            RowRenderer.prototype.refreshGroupRows = function () {
                // find all the group rows
                var rowsToRemove = [];
                var that = this;
                Object.keys(this.renderedRows).forEach(function (key) {
                    var renderedRow = that.renderedRows[key];
                    var node = renderedRow.node;
                    if (node.group) {
                        rowsToRemove.push(key);
                    }
                });
                // remove the rows
                this.removeVirtualRows(rowsToRemove);
                // and draw them back again
                this.ensureRowsRendered();
            };
            // takes array of row indexes
            RowRenderer.prototype.removeVirtualRows = function (rowsToRemove, fromIndex) {
                var that = this;
                // if no fromIndex then set to -1, which will refresh everything
                var realFromIndex = (typeof fromIndex === 'number') ? fromIndex : -1;
                rowsToRemove.forEach(function (indexToRemove) {
                    if (indexToRemove >= realFromIndex) {
                        that.removeVirtualRow(indexToRemove);
                        // if the row was last to have focus, we remove the fact that it has focus
                        if (that.focusedCell && that.focusedCell.rowIndex == indexToRemove) {
                            that.focusedCell = null;
                        }
                    }
                });
            };
            RowRenderer.prototype.removeVirtualRow = function (indexToRemove) {
                var renderedRow = this.renderedRows[indexToRemove];
                if (renderedRow.pinnedElement && this.ePinnedColsContainer) {
                    this.ePinnedColsContainer.removeChild(renderedRow.pinnedElement);
                }
                if (renderedRow.bodyElement) {
                    this.eBodyContainer.removeChild(renderedRow.bodyElement);
                }
                if (renderedRow.scope) {
                    renderedRow.scope.$destroy();
                }
                if (this.gridOptionsWrapper.getVirtualRowRemoved()) {
                    this.gridOptionsWrapper.getVirtualRowRemoved()(renderedRow.data, indexToRemove);
                }
                this.angularGrid.onVirtualRowRemoved(indexToRemove);
                delete this.renderedRows[indexToRemove];
                delete this.renderedRowStartEditingListeners[indexToRemove];
            };
            RowRenderer.prototype.drawVirtualRows = function () {
                var first;
                var last;
                var rowCount = this.rowModel.getVirtualRowCount();
                if (this.gridOptionsWrapper.isDontUseScrolls()) {
                    first = 0;
                    last = rowCount;
                }
                else {
                    var topPixel = this.eBodyViewport.scrollTop;
                    var bottomPixel = topPixel + this.eBodyViewport.offsetHeight;
                    first = Math.floor(topPixel / this.gridOptionsWrapper.getRowHeight());
                    last = Math.floor(bottomPixel / this.gridOptionsWrapper.getRowHeight());
                    //add in buffer
                    var buffer = this.gridOptionsWrapper.getRowBuffer() || grid.Constants.ROW_BUFFER_SIZE;
                    first = first - buffer;
                    last = last + buffer;
                    // adjust, in case buffer extended actual size
                    if (first < 0) {
                        first = 0;
                    }
                    if (last > rowCount - 1) {
                        last = rowCount - 1;
                    }
                }
                this.firstVirtualRenderedRow = first;
                this.lastVirtualRenderedRow = last;
                this.ensureRowsRendered();
            };
            RowRenderer.prototype.getFirstVirtualRenderedRow = function () {
                return this.firstVirtualRenderedRow;
            };
            RowRenderer.prototype.getLastVirtualRenderedRow = function () {
                return this.lastVirtualRenderedRow;
            };
            RowRenderer.prototype.ensureRowsRendered = function () {
                var mainRowWidth = this.columnModel.getBodyContainerWidth();
                var that = this;
                // at the end, this array will contain the items we need to remove
                var rowsToRemove = Object.keys(this.renderedRows);
                for (var rowIndex = this.firstVirtualRenderedRow; rowIndex <= this.lastVirtualRenderedRow; rowIndex++) {
                    // see if item already there, and if yes, take it out of the 'to remove' array
                    if (rowsToRemove.indexOf(rowIndex.toString()) >= 0) {
                        rowsToRemove.splice(rowsToRemove.indexOf(rowIndex.toString()), 1);
                        continue;
                    }
                    // check this row actually exists (in case overflow buffer window exceeds real data)
                    var node = this.rowModel.getVirtualRow(rowIndex);
                    if (node) {
                        that.insertRow(node, rowIndex, mainRowWidth);
                    }
                }
                // at this point, everything in our 'rowsToRemove' . . .
                this.removeVirtualRows(rowsToRemove);
                // if we are doing angular compiling, then do digest the scope here
                if (this.gridOptionsWrapper.isAngularCompileRows()) {
                    // we do it in a timeout, in case we are already in an apply
                    setTimeout(function () {
                        that.$scope.$apply();
                    }, 0);
                }
            };
            RowRenderer.prototype.insertRow = function (node, rowIndex, mainRowWidth) {
                var columns = this.columnModel.getDisplayedColumns();
                // if no cols, don't draw row
                if (!columns || columns.length == 0) {
                    return;
                }
                // var rowData = node.rowData;
                var rowIsAGroup = node.group;
                // try compiling as we insert rows
                var newChildScope = this.createChildScopeOrNull(node.data, node);
                var ePinnedRow = this.createRowContainer(rowIndex, node, rowIsAGroup, newChildScope);
                var eMainRow = this.createRowContainer(rowIndex, node, rowIsAGroup, newChildScope);
                var that = this;
                eMainRow.style.width = mainRowWidth + "px";
                var renderedRow = {
                    scope: newChildScope,
                    node: node,
                    rowIndex: rowIndex,
                    eCells: {},
                    eVolatileCells: {},
                    pinnedElement: null,
                    bodyElement: null,
                    data: null
                };
                this.renderedRows[rowIndex] = renderedRow;
                this.renderedRowStartEditingListeners[rowIndex] = {};
                // if group item, insert the first row
                var groupHeaderTakesEntireRow = this.gridOptionsWrapper.isGroupUseEntireRow();
                var drawGroupRow = rowIsAGroup && groupHeaderTakesEntireRow;
                if (drawGroupRow) {
                    var firstColumn = columns[0];
                    var eGroupRow = that.createGroupElement(node, rowIndex, false);
                    if (firstColumn.pinned) {
                        ePinnedRow.appendChild(eGroupRow);
                        var eGroupRowPadding = that.createGroupElement(node, rowIndex, true);
                        eMainRow.appendChild(eGroupRowPadding);
                    }
                    else {
                        eMainRow.appendChild(eGroupRow);
                    }
                }
                else if (this.gridOptionsWrapper.isDoInternalExpanding()) {
                    if (node.first) {
                        var params = {
                            node: node.parent,
                            data: node.parent.data,
                            rowIndex: rowIndex,
                            api: this.gridOptionsWrapper.getApi()
                        };
                        var eGroupRow = that.cellRendererMap['expand'](params);
                        eMainRow.style.height = (this.gridOptionsWrapper.getRowHeight() * node.parent.rows) + 'px';
                        eMainRow.appendChild(eGroupRow);
                    }
                    if (node.group) {
                        columns.forEach(function (column, index) {
                            var firstCol = index === 0;
                            var data = that.getDataForNode(node);
                            var valueGetter = that.createValueGetter(data, column.colDef, node);
                            that.createCellFromColDef(firstCol, column, valueGetter, node, rowIndex, eMainRow, ePinnedRow, newChildScope, renderedRow);
                        });
                    }
                    else if (!node.first) {
                        return;
                    }
                }
                else {
                    columns.forEach(function (column, index) {
                        var firstCol = index === 0;
                        var data = that.getDataForNode(node);
                        var valueGetter = that.createValueGetter(data, column.colDef, node);
                        that.createCellFromColDef(firstCol, column, valueGetter, node, rowIndex, eMainRow, ePinnedRow, newChildScope, renderedRow);
                    });
                }
                //try compiling as we insert rows
                renderedRow.pinnedElement = this.compileAndAdd(this.ePinnedColsContainer, ePinnedRow, newChildScope);
                renderedRow.bodyElement = this.compileAndAdd(this.eBodyContainer, eMainRow, newChildScope);
            };
            // if group is a footer, always show the data.
            // if group is a header, only show data if not expanded
            RowRenderer.prototype.getDataForNode = function (node) {
                if (node.footer) {
                    // if footer, we always show the data
                    return node.data;
                }
                else if (node.group) {
                    // if header and header is expanded, we show data in footer only
                    var footersEnabled = this.gridOptionsWrapper.isGroupIncludeFooter();
                    return (node.expanded && footersEnabled) ? undefined : node.data;
                }
                else {
                    // otherwise it's a normal node, just return data as normal
                    return node.data;
                }
            };
            RowRenderer.prototype.createValueGetter = function (data, colDef, node) {
                var that = this;
                return function () {
                    var api = that.gridOptionsWrapper.getApi();
                    var context = that.gridOptionsWrapper.getContext();
                    return _.getValue(that.expressionService, data, colDef, node, api, context);
                };
            };
            RowRenderer.prototype.createChildScopeOrNull = function (data, node) {
                if (this.gridOptionsWrapper.isAngularCompileRows()) {
                    var newChildScope = this.$scope.$new();
                    newChildScope.data = data;
                    newChildScope.node = node;
                    return newChildScope;
                }
                else {
                    return null;
                }
            };
            RowRenderer.prototype.compileAndAdd = function (container, element, scope) {
                if (scope) {
                    var eElementCompiled = this.$compile(element)(scope);
                    if (container) {
                        container.appendChild(eElementCompiled[0]);
                    }
                    return eElementCompiled[0];
                }
                else {
                    if (container) {
                        container.appendChild(element);
                    }
                    return element;
                }
            };
            RowRenderer.prototype.createCellFromColDef = function (isFirstColumn, column, valueGetter, node, rowIndex, eMainRow, ePinnedRow, $childScope, renderedRow) {
                var eGridCell = this.createCell(isFirstColumn, column, valueGetter, node, rowIndex, $childScope);
                if (column.colDef.volatile) {
                    renderedRow.eVolatileCells[column.colId] = eGridCell;
                }
                renderedRow.eCells[column.colId] = eGridCell;
                if (column.pinned) {
                    ePinnedRow.appendChild(eGridCell);
                }
                else {
                    eMainRow.appendChild(eGridCell);
                }
            };
            RowRenderer.prototype.addClassesToRow = function (rowIndex, node, eRow) {
                var classesList = ["ag-row"];
                classesList.push(rowIndex % 2 == 0 ? "ag-row-even" : "ag-row-odd");
                if (this.selectionController.isNodeSelected(node)) {
                    classesList.push("ag-row-selected");
                }
                if (node.group) {
                    // if a group, put the level of the group in
                    classesList.push("ag-row-level-" + node.level);
                }
                else {
                    // if a leaf, and a parent exists, put a level of the parent, else put level of 0 for top level item
                    if (node.parent) {
                        classesList.push("ag-row-level-" + (node.parent.level + 1));
                    }
                    else {
                        classesList.push("ag-row-level-0");
                    }
                }
                if (node.group) {
                    classesList.push("ag-row-group");
                }
                if (node.group && !node.footer && node.expanded) {
                    classesList.push("ag-row-group-expanded");
                }
                if (node.group && !node.footer && !node.expanded) {
                    // opposite of expanded is contracted according to the internet.
                    classesList.push("ag-row-group-contracted");
                }
                if (node.group && node.footer) {
                    classesList.push("ag-row-footer");
                }
                // add in extra classes provided by the config
                if (this.gridOptionsWrapper.getRowClass()) {
                    var gridOptionsRowClass = this.gridOptionsWrapper.getRowClass();
                    var classToUse;
                    if (typeof gridOptionsRowClass === 'function') {
                        var params = {
                            node: node,
                            data: node.data,
                            rowIndex: rowIndex,
                            context: this.gridOptionsWrapper.getContext(),
                            api: this.gridOptionsWrapper.getApi()
                        };
                        classToUse = gridOptionsRowClass(params);
                    }
                    else {
                        classToUse = gridOptionsRowClass;
                    }
                    if (classToUse) {
                        if (typeof classToUse === 'string') {
                            classesList.push(classToUse);
                        }
                        else if (Array.isArray(classToUse)) {
                            classToUse.forEach(function (classItem) {
                                classesList.push(classItem);
                            });
                        }
                    }
                }
                var classes = classesList.join(" ");
                eRow.className = classes;
            };
            RowRenderer.prototype.createRowContainer = function (rowIndex, node, groupRow, $scope) {
                var eRow = document.createElement("div");
                this.addClassesToRow(rowIndex, node, eRow);
                eRow.setAttribute('row', rowIndex);
                // if showing scrolls, position on the container
                if (!this.gridOptionsWrapper.isDontUseScrolls()) {
                    eRow.style.top = (this.gridOptionsWrapper.getRowHeight() * rowIndex) + "px";
                }
                eRow.style.height = (this.gridOptionsWrapper.getRowHeight()) + "px";
                if (this.gridOptionsWrapper.getRowStyle()) {
                    var cssToUse;
                    var rowStyle = this.gridOptionsWrapper.getRowStyle();
                    if (typeof rowStyle === 'function') {
                        var params = {
                            data: node.data,
                            node: node,
                            api: this.gridOptionsWrapper.getApi(),
                            context: this.gridOptionsWrapper.getContext(),
                            $scope: $scope
                        };
                        cssToUse = rowStyle(params);
                    }
                    else {
                        cssToUse = rowStyle;
                    }
                    if (cssToUse) {
                        Object.keys(cssToUse).forEach(function (key) {
                            eRow.style[key] = cssToUse[key];
                        });
                    }
                }
                var _this = this;
                eRow.addEventListener("click", function (event) {
                    _this.angularGrid.onRowClicked(event, Number(this.getAttribute("row")), node);
                });
                return eRow;
            };
            RowRenderer.prototype.getIndexOfRenderedNode = function (node) {
                var renderedRows = this.renderedRows;
                var keys = Object.keys(renderedRows);
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (renderedRows[key].node === node) {
                        return renderedRows[key].rowIndex;
                    }
                }
                return -1;
            };
            RowRenderer.prototype.createGroupElement = function (node, rowIndex, padding) {
                var eRow;
                // padding means we are on the right hand side of a pinned table, ie
                // in the main body.
                if (padding) {
                    eRow = document.createElement('span');
                }
                else {
                    var params = {
                        node: node,
                        data: node.data,
                        rowIndex: rowIndex,
                        api: this.gridOptionsWrapper.getApi(),
                        colDef: {
                            cellRenderer: {
                                renderer: 'group',
                                innerRenderer: this.gridOptionsWrapper.getGroupRowInnerRenderer()
                            }
                        }
                    };
                    eRow = this.cellRendererMap['group'](params);
                }
                if (node.footer) {
                    _.addCssClass(eRow, 'ag-footer-cell-entire-row');
                }
                else {
                    _.addCssClass(eRow, 'ag-group-cell-entire-row');
                }
                return eRow;
            };
            RowRenderer.prototype.putDataIntoCell = function (column, value, valueGetter, node, $childScope, eSpanWithValue, eGridCell, rowIndex, refreshCellFunction) {
                // template gets preference, then cellRenderer, then do it ourselves
                var colDef = column.colDef;
                if (colDef.template) {
                    eSpanWithValue.innerHTML = colDef.template;
                }
                else if (colDef.templateUrl) {
                    var template = this.templateService.getTemplate(colDef.templateUrl, refreshCellFunction);
                    if (template) {
                        eSpanWithValue.innerHTML = template;
                    }
                }
                else if (colDef.cellRenderer) {
                    this.useCellRenderer(column, value, node, $childScope, eSpanWithValue, rowIndex, refreshCellFunction, valueGetter, eGridCell);
                }
                else {
                    // if we insert undefined, then it displays as the string 'undefined', ugly!
                    if (value !== undefined && value !== null && value !== '') {
                        eSpanWithValue.innerHTML = value;
                    }
                }
            };
            RowRenderer.prototype.useCellRenderer = function (column, value, node, $childScope, eSpanWithValue, rowIndex, refreshCellFunction, valueGetter, eGridCell) {
                var colDef = column.colDef;
                var rendererParams = {
                    value: value,
                    valueGetter: valueGetter,
                    data: node.data,
                    node: node,
                    colDef: colDef,
                    column: column,
                    $scope: $childScope,
                    rowIndex: rowIndex,
                    api: this.gridOptionsWrapper.getApi(),
                    context: this.gridOptionsWrapper.getContext(),
                    refreshCell: refreshCellFunction,
                    eGridCell: eGridCell
                };
                var cellRenderer;
                if (typeof colDef.cellRenderer === 'object' && colDef.cellRenderer !== null) {
                    cellRenderer = this.cellRendererMap[colDef.cellRenderer.renderer];
                    if (!cellRenderer) {
                        throw 'Cell renderer ' + colDef.cellRenderer + ' not found, available are ' + Object.keys(this.cellRendererMap);
                    }
                }
                else if (typeof colDef.cellRenderer === 'function') {
                    cellRenderer = colDef.cellRenderer;
                }
                else {
                    throw 'Cell Renderer must be String or Function';
                }
                var resultFromRenderer = cellRenderer(rendererParams);
                if (_.isNodeOrElement(resultFromRenderer)) {
                    // a dom node or element was returned, so add child
                    eSpanWithValue.appendChild(resultFromRenderer);
                }
                else {
                    // otherwise assume it was html, so just insert
                    eSpanWithValue.innerHTML = resultFromRenderer;
                }
            };
            RowRenderer.prototype.addStylesFromCollDef = function (column, value, node, $childScope, eGridCell) {
                var colDef = column.colDef;
                if (colDef.cellStyle) {
                    var cssToUse;
                    if (typeof colDef.cellStyle === 'function') {
                        var cellStyleParams = {
                            value: value,
                            data: node.data,
                            node: node,
                            colDef: colDef,
                            column: column,
                            $scope: $childScope,
                            context: this.gridOptionsWrapper.getContext(),
                            api: this.gridOptionsWrapper.getApi()
                        };
                        cssToUse = colDef.cellStyle(cellStyleParams);
                    }
                    else {
                        cssToUse = colDef.cellStyle;
                    }
                    if (cssToUse) {
                        _.addStylesToElement(eGridCell, cssToUse);
                    }
                }
            };
            RowRenderer.prototype.addClassesFromCollDef = function (colDef, value, node, $childScope, eGridCell) {
                if (colDef.cellClass) {
                    var classToUse;
                    if (typeof colDef.cellClass === 'function') {
                        var cellClassParams = {
                            value: value,
                            data: node.data,
                            node: node,
                            colDef: colDef,
                            $scope: $childScope,
                            context: this.gridOptionsWrapper.getContext(),
                            api: this.gridOptionsWrapper.getApi()
                        };
                        classToUse = colDef.cellClass(cellClassParams);
                    }
                    else {
                        classToUse = colDef.cellClass;
                    }
                    if (typeof classToUse === 'string') {
                        _.addCssClass(eGridCell, classToUse);
                    }
                    else if (Array.isArray(classToUse)) {
                        classToUse.forEach(function (cssClassItem) {
                            _.addCssClass(eGridCell, cssClassItem);
                        });
                    }
                }
            };
            RowRenderer.prototype.addClassesToCell = function (column, node, eGridCell) {
                var classes = ['ag-cell', 'ag-cell-no-focus', 'cell-col-' + column.index];
                if (node.group) {
                    if (node.footer) {
                        classes.push('ag-footer-cell');
                    }
                    else {
                        classes.push('ag-group-cell');
                    }
                }
                eGridCell.className = classes.join(' ');
            };
            RowRenderer.prototype.addClassesFromRules = function (colDef, eGridCell, value, node, rowIndex) {
                var classRules = colDef.cellClassRules;
                if (typeof classRules === 'object' && classRules !== null) {
                    var params = {
                        value: value,
                        data: node.data,
                        node: node,
                        colDef: colDef,
                        rowIndex: rowIndex,
                        api: this.gridOptionsWrapper.getApi(),
                        context: this.gridOptionsWrapper.getContext()
                    };
                    var classNames = Object.keys(classRules);
                    for (var i = 0; i < classNames.length; i++) {
                        var className = classNames[i];
                        var rule = classRules[className];
                        var resultOfRule;
                        if (typeof rule === 'string') {
                            resultOfRule = this.expressionService.evaluate(rule, params);
                        }
                        else if (typeof rule === 'function') {
                            resultOfRule = rule(params);
                        }
                        if (resultOfRule) {
                            _.addCssClass(eGridCell, className);
                        }
                        else {
                            _.removeCssClass(eGridCell, className);
                        }
                    }
                }
            };
            RowRenderer.prototype.createCell = function (isFirstColumn, column, valueGetter, node, rowIndex, $childScope) {
                var that = this;
                var eGridCell = document.createElement("div");
                eGridCell.setAttribute("col", column.index);
                // only set tab index if cell selection is enabled
                if (!this.gridOptionsWrapper.isSuppressCellSelection()) {
                    eGridCell.setAttribute("tabindex", "-1");
                }
                var value;
                if (valueGetter) {
                    value = valueGetter();
                }
                // these are the grid styles, don't change between soft refreshes
                this.addClassesToCell(column, node, eGridCell);
                this.populateAndStyleGridCell(valueGetter, value, eGridCell, isFirstColumn, node, column, rowIndex, $childScope);
                this.addCellClickedHandler(eGridCell, node, column, value, rowIndex);
                this.addCellDoubleClickedHandler(eGridCell, node, column, value, rowIndex, $childScope, isFirstColumn, valueGetter);
                this.addCellNavigationHandler(eGridCell, rowIndex, column, node);
                eGridCell.style.width = _.formatWidth(column.actualWidth);
                // add the 'start editing' call to the chain of editors
                this.renderedRowStartEditingListeners[rowIndex][column.colId] = function () {
                    if (that.isCellEditable(column.colDef, node)) {
                        that.startEditing(eGridCell, column, node, $childScope, rowIndex, isFirstColumn, valueGetter);
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                return eGridCell;
            };
            RowRenderer.prototype.addCellNavigationHandler = function (eGridCell, rowIndex, column, node) {
                var that = this;
                eGridCell.addEventListener('keydown', function (event) {
                    if (that.editingCell) {
                        return;
                    }
                    // only interested on key presses that are directly on this element, not any children elements. this
                    // stops navigation if the user is in, for example, a text field inside the cell, and user hits
                    // on of the keys we are looking for.
                    if (event.target !== eGridCell) {
                        return;
                    }
                    var key = event.which || event.keyCode;
                    var startNavigation = key === grid.Constants.KEY_DOWN || key === grid.Constants.KEY_UP || key === grid.Constants.KEY_LEFT || key === grid.Constants.KEY_RIGHT;
                    if (startNavigation) {
                        event.preventDefault();
                        that.navigateToNextCell(key, rowIndex, column);
                    }
                    var startEdit = key === grid.Constants.KEY_ENTER;
                    if (startEdit) {
                        var startEditingFunc = that.renderedRowStartEditingListeners[rowIndex][column.colId];
                        if (startEditingFunc) {
                            var editingStarted = startEditingFunc();
                            if (editingStarted) {
                                // if we don't prevent default, then the editor that get displayed also picks up the 'enter key'
                                // press, and stops editing immediately, hence giving he user experience that nothing happened
                                event.preventDefault();
                            }
                        }
                    }
                    var selectRow = key === grid.Constants.KEY_SPACE;
                    if (selectRow && that.gridOptionsWrapper.isRowSelection()) {
                        var selected = that.selectionController.isNodeSelected(node);
                        if (selected) {
                            that.selectionController.deselectNode(node);
                        }
                        else {
                            that.selectionController.selectNode(node, true);
                        }
                        event.preventDefault();
                    }
                });
            };
            // we use index for rows, but column object for columns, as the next column (by index) might not
            // be visible (header grouping) so it's not reliable, so using the column object instead.
            RowRenderer.prototype.navigateToNextCell = function (key, rowIndex, column) {
                var cellToFocus = { rowIndex: rowIndex, column: column };
                var renderedRow;
                var eCell;
                while (!eCell) {
                    cellToFocus = this.getNextCellToFocus(key, cellToFocus);
                    // no next cell means we have reached a grid boundary, eg left, right, top or bottom of grid
                    if (!cellToFocus) {
                        return;
                    }
                    // see if the next cell is selectable, if yes, use it, if not, skip it
                    renderedRow = this.renderedRows[cellToFocus.rowIndex];
                    eCell = renderedRow.eCells[cellToFocus.column.colId];
                }
                // this scrolls the row into view
                this.gridPanel.ensureIndexVisible(renderedRow.rowIndex);
                // this changes the css on the cell
                this.focusCell(eCell, cellToFocus.rowIndex, cellToFocus.column.index, true);
            };
            RowRenderer.prototype.getNextCellToFocus = function (key, lastCellToFocus) {
                var lastRowIndex = lastCellToFocus.rowIndex;
                var lastColumn = lastCellToFocus.column;
                var nextRowToFocus;
                var nextColumnToFocus;
                switch (key) {
                    case grid.Constants.KEY_UP:
                        // if already on top row, do nothing
                        if (lastRowIndex === this.firstVirtualRenderedRow) {
                            return null;
                        }
                        nextRowToFocus = lastRowIndex - 1;
                        nextColumnToFocus = lastColumn;
                        break;
                    case grid.Constants.KEY_DOWN:
                        // if already on bottom, do nothing
                        if (lastRowIndex === this.lastVirtualRenderedRow) {
                            return null;
                        }
                        nextRowToFocus = lastRowIndex + 1;
                        nextColumnToFocus = lastColumn;
                        break;
                    case grid.Constants.KEY_RIGHT:
                        var colToRight = this.columnModel.getVisibleColAfter(lastColumn);
                        // if already on right, do nothing
                        if (!colToRight) {
                            return null;
                        }
                        nextRowToFocus = lastRowIndex;
                        nextColumnToFocus = colToRight;
                        break;
                    case grid.Constants.KEY_LEFT:
                        var colToLeft = this.columnModel.getVisibleColBefore(lastColumn);
                        // if already on left, do nothing
                        if (!colToLeft) {
                            return null;
                        }
                        nextRowToFocus = lastRowIndex;
                        nextColumnToFocus = colToLeft;
                        break;
                }
                return {
                    rowIndex: nextRowToFocus,
                    column: nextColumnToFocus
                };
            };
            // called internally
            RowRenderer.prototype.focusCell = function (eCell, rowIndex, colIndex, forceBrowserFocus) {
                // do nothing if cell selection is off
                if (this.gridOptionsWrapper.isSuppressCellSelection()) {
                    return;
                }
                // remove any previous focus
                _.querySelectorAll_replaceCssClass(this.eParentOfRows, '.ag-cell-focus', 'ag-cell-focus', 'ag-cell-no-focus');
                var selectorForCell = '[row="' + rowIndex + '"] [col="' + colIndex + '"]';
                _.querySelectorAll_replaceCssClass(this.eParentOfRows, selectorForCell, 'ag-cell-no-focus', 'ag-cell-focus');
                this.focusedCell = { rowIndex: rowIndex, colIndex: colIndex, node: this.rowModel.getVirtualRow(rowIndex) };
                // this puts the browser focus on the cell (so it gets key presses)
                if (forceBrowserFocus) {
                    eCell.focus();
                }
                if (typeof this.gridOptionsWrapper.getCellFocused() === 'function') {
                    this.gridOptionsWrapper.getCellFocused()(this.focusedCell);
                }
            };
            // for API
            RowRenderer.prototype.getFocusedCell = function () {
                return this.focusedCell;
            };
            // called via API
            RowRenderer.prototype.setFocusedCell = function (rowIndex, colIndex) {
                var renderedRow = this.renderedRows[rowIndex];
                var column = this.columnModel.getDisplayedColumns()[colIndex];
                if (renderedRow && column) {
                    var eCell = renderedRow.eCells[column.colId];
                    this.focusCell(eCell, rowIndex, colIndex, true);
                }
            };
            RowRenderer.prototype.populateAndStyleGridCell = function (valueGetter, value, eGridCell, isFirstColumn, node, column, rowIndex, $childScope) {
                var colDef = column.colDef;
                // populate
                this.populateGridCell(eGridCell, isFirstColumn, node, column, rowIndex, value, valueGetter, $childScope);
                // style
                this.addStylesFromCollDef(column, value, node, $childScope, eGridCell);
                this.addClassesFromCollDef(colDef, value, node, $childScope, eGridCell);
                this.addClassesFromRules(colDef, eGridCell, value, node, rowIndex);
            };
            RowRenderer.prototype.populateGridCell = function (eGridCell, isFirstColumn, node, column, rowIndex, value, valueGetter, $childScope) {
                var eCellWrapper = document.createElement('span');
                _.addCssClass(eCellWrapper, "ag-cell-wrapper");
                eGridCell.appendChild(eCellWrapper);
                var colDef = column.colDef;
                if (colDef.checkboxSelection) {
                    var eCheckbox = this.selectionRendererFactory.createSelectionCheckbox(node, rowIndex);
                    eCellWrapper.appendChild(eCheckbox);
                }
                // eventually we call eSpanWithValue.innerHTML = xxx, so cannot include the checkbox (above) in this span
                var eSpanWithValue = document.createElement("span");
                _.addCssClass(eSpanWithValue, "ag-cell-value");
                eCellWrapper.appendChild(eSpanWithValue);
                var that = this;
                var refreshCellFunction = function () {
                    that.softRefreshCell(eGridCell, isFirstColumn, node, column, $childScope, rowIndex);
                };
                this.putDataIntoCell(column, value, valueGetter, node, $childScope, eSpanWithValue, eGridCell, rowIndex, refreshCellFunction);
            };
            RowRenderer.prototype.addCellDoubleClickedHandler = function (eGridCell, node, column, value, rowIndex, $childScope, isFirstColumn, valueGetter) {
                var that = this;
                var colDef = column.colDef;
                eGridCell.addEventListener('dblclick', function (event) {
                    if (that.gridOptionsWrapper.getCellDoubleClicked()) {
                        var paramsForGrid = {
                            node: node,
                            data: node.data,
                            value: value,
                            rowIndex: rowIndex,
                            colDef: colDef,
                            event: event,
                            eventSource: this,
                            api: that.gridOptionsWrapper.getApi()
                        };
                        that.gridOptionsWrapper.getCellDoubleClicked()(paramsForGrid);
                    }
                    if (colDef.cellDoubleClicked) {
                        var paramsForColDef = {
                            node: node,
                            data: node.data,
                            value: value,
                            rowIndex: rowIndex,
                            colDef: colDef,
                            event: event,
                            eventSource: this,
                            api: that.gridOptionsWrapper.getApi()
                        };
                        colDef.cellDoubleClicked(paramsForColDef);
                    }
                    if (that.isCellEditable(colDef, node)) {
                        that.startEditing(eGridCell, column, node, $childScope, rowIndex, isFirstColumn, valueGetter);
                    }
                });
            };
            RowRenderer.prototype.addCellClickedHandler = function (eGridCell, node, column, value, rowIndex) {
                var colDef = column.colDef;
                var that = this;
                eGridCell.addEventListener("click", function (event) {
                    // we pass false to focusCell, as we don't want the cell to focus
                    // also get the browser focus. if we did, then the cellRenderer could
                    // have a text field in it, for example, and as the user clicks on the
                    // text field, the text field, the focus doesn't get to the text
                    // field, instead to goes to the div behind, making it impossible to
                    // select the text field.
                    that.focusCell(eGridCell, rowIndex, column.index, false);
                    if (that.gridOptionsWrapper.getCellClicked()) {
                        var paramsForGrid = {
                            node: node,
                            data: node.data,
                            value: value,
                            rowIndex: rowIndex,
                            colDef: colDef,
                            event: event,
                            eventSource: this,
                            api: that.gridOptionsWrapper.getApi()
                        };
                        that.gridOptionsWrapper.getCellClicked()(paramsForGrid);
                    }
                    if (colDef.cellClicked) {
                        var paramsForColDef = {
                            node: node,
                            data: node.data,
                            value: value,
                            rowIndex: rowIndex,
                            colDef: colDef,
                            event: event,
                            eventSource: this,
                            api: that.gridOptionsWrapper.getApi()
                        };
                        colDef.cellClicked(paramsForColDef);
                    }
                });
            };
            RowRenderer.prototype.isCellEditable = function (colDef, node) {
                if (this.editingCell) {
                    return false;
                }
                // never allow editing of groups
                if (node.group) {
                    return false;
                }
                // if boolean set, then just use it
                if (typeof colDef.editable === 'boolean') {
                    return colDef.editable;
                }
                // if function, then call the function to find out
                if (typeof colDef.editable === 'function') {
                    // should change this, so it gets passed params with nice useful values
                    return colDef.editable(node.data);
                }
                return false;
            };
            RowRenderer.prototype.stopEditing = function (eGridCell, column, node, $childScope, eInput, blurListener, rowIndex, isFirstColumn, valueGetter) {
                this.editingCell = false;
                var newValue = eInput.value;
                var colDef = column.colDef;
                //If we don't remove the blur listener first, we get:
                //Uncaught NotFoundError: Failed to execute 'removeChild' on 'Node': The node to be removed is no longer a child of this node. Perhaps it was moved in a 'blur' event handler?
                eInput.removeEventListener('blur', blurListener);
                _.removeAllChildren(eGridCell);
                var paramsForCallbacks = {
                    node: node,
                    data: node.data,
                    oldValue: node.data[colDef.field],
                    newValue: newValue,
                    rowIndex: rowIndex,
                    colDef: colDef,
                    api: this.gridOptionsWrapper.getApi(),
                    context: this.gridOptionsWrapper.getContext()
                };
                if (colDef.newValueHandler) {
                    colDef.newValueHandler(paramsForCallbacks);
                }
                else {
                    node.data[colDef.field] = newValue;
                }
                // at this point, the value has been updated
                var newValue;
                if (valueGetter) {
                    newValue = valueGetter();
                }
                paramsForCallbacks.newValue = newValue;
                if (typeof colDef.cellValueChanged === 'function') {
                    colDef.cellValueChanged(paramsForCallbacks);
                }
                if (typeof this.gridOptionsWrapper.getCellValueChanged() === 'function') {
                    this.gridOptionsWrapper.getCellValueChanged()(paramsForCallbacks);
                }
                this.populateAndStyleGridCell(valueGetter, newValue, eGridCell, isFirstColumn, node, column, rowIndex, $childScope);
            };
            RowRenderer.prototype.startEditing = function (eGridCell, column, node, $childScope, rowIndex, isFirstColumn, valueGetter) {
                var that = this;
                this.editingCell = true;
                _.removeAllChildren(eGridCell);
                var eInput = document.createElement('input');
                eInput.type = 'text';
                _.addCssClass(eInput, 'ag-cell-edit-input');
                if (valueGetter) {
                    var value = valueGetter();
                    if (value !== null && value !== undefined) {
                        eInput.value = value;
                    }
                }
                eInput.style.width = (column.actualWidth - 14) + 'px';
                eGridCell.appendChild(eInput);
                eInput.focus();
                eInput.select();
                var blurListener = function () {
                    that.stopEditing(eGridCell, column, node, $childScope, eInput, blurListener, rowIndex, isFirstColumn, valueGetter);
                };
                //stop entering if we loose focus
                eInput.addEventListener("blur", blurListener);
                //stop editing if enter pressed
                eInput.addEventListener('keypress', function (event) {
                    var key = event.which || event.keyCode;
                    // 13 is enter
                    if (key == grid.Constants.KEY_ENTER) {
                        that.stopEditing(eGridCell, column, node, $childScope, eInput, blurListener, rowIndex, isFirstColumn, valueGetter);
                        that.focusCell(eGridCell, rowIndex, column.index, true);
                    }
                });
                // tab key doesn't generate keypress, so need keydown to listen for that
                eInput.addEventListener('keydown', function (event) {
                    var key = event.which || event.keyCode;
                    if (key == grid.Constants.KEY_TAB) {
                        that.stopEditing(eGridCell, column, node, $childScope, eInput, blurListener, rowIndex, isFirstColumn, valueGetter);
                        that.startEditingNextCell(rowIndex, column, event.shiftKey);
                        // we don't want the default tab action, so return false, this stops the event from bubbling
                        event.preventDefault();
                        return false;
                    }
                });
            };
            RowRenderer.prototype.startEditingNextCell = function (rowIndex, column, shiftKey) {
                var firstRowToCheck = this.firstVirtualRenderedRow;
                var lastRowToCheck = this.lastVirtualRenderedRow;
                var currentRowIndex = rowIndex;
                var visibleColumns = this.columnModel.getDisplayedColumns();
                var currentCol = column;
                while (true) {
                    var indexOfCurrentCol = visibleColumns.indexOf(currentCol);
                    // move backward
                    if (shiftKey) {
                        // move along to the previous cell
                        currentCol = visibleColumns[indexOfCurrentCol - 1];
                        // check if end of the row, and if so, go back a row
                        if (!currentCol) {
                            currentCol = visibleColumns[visibleColumns.length - 1];
                            currentRowIndex--;
                        }
                        // if got to end of rendered rows, then quit looking
                        if (currentRowIndex < firstRowToCheck) {
                            return;
                        }
                    }
                    else {
                        // move along to the next cell
                        currentCol = visibleColumns[indexOfCurrentCol + 1];
                        // check if end of the row, and if so, go forward a row
                        if (!currentCol) {
                            currentCol = visibleColumns[0];
                            currentRowIndex++;
                        }
                        // if got to end of rendered rows, then quit looking
                        if (currentRowIndex > lastRowToCheck) {
                            return;
                        }
                    }
                    var nextFunc = this.renderedRowStartEditingListeners[currentRowIndex][currentCol.colId];
                    if (nextFunc) {
                        // see if the next cell is editable, and if so, we have come to
                        // the end of our search, so stop looking for the next cell
                        var nextCellAcceptedEdit = nextFunc();
                        if (nextCellAcceptedEdit) {
                            return;
                        }
                    }
                }
            };
            return RowRenderer;
        })();
        grid.RowRenderer = RowRenderer;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="utils.ts" />
/// <reference path="constants.ts" />
/// <reference path="svgFactory.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var constants = grid.Constants;
        var svgFactory = grid.SvgFactory.getInstance();
        var HeaderRenderer = (function () {
            function HeaderRenderer() {
            }
            HeaderRenderer.prototype.init = function (gridOptionsWrapper, columnController, columnModel, gridPanel, angularGrid, filterManager, $scope, $compile, expressionService) {
                this.expressionService = expressionService;
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.columnModel = columnModel;
                this.columnController = columnController;
                this.angularGrid = angularGrid;
                this.filterManager = filterManager;
                this.$scope = $scope;
                this.$compile = $compile;
                this.findAllElements(gridPanel);
            };
            HeaderRenderer.prototype.findAllElements = function (gridPanel) {
                this.ePinnedHeader = gridPanel.getPinnedHeader();
                this.eHeaderContainer = gridPanel.getHeaderContainer();
                this.eHeader = gridPanel.getHeader();
                this.eRoot = gridPanel.getRoot();
            };
            HeaderRenderer.prototype.refreshHeader = function () {
                utils.removeAllChildren(this.ePinnedHeader);
                utils.removeAllChildren(this.eHeaderContainer);
                if (this.childScopes) {
                    this.childScopes.forEach(function (childScope) {
                        childScope.$destroy();
                    });
                }
                this.childScopes = [];
                if (this.gridOptionsWrapper.isGroupHeaders()) {
                    this.insertHeadersWithGrouping();
                }
                else {
                    this.insertHeadersWithoutGrouping();
                }
            };
            HeaderRenderer.prototype.insertHeadersWithGrouping = function () {
                var groups = this.columnModel.getHeaderGroups();
                var that = this;
                groups.forEach(function (group) {
                    var eHeaderCell = that.createGroupedHeaderCell(group);
                    var eContainerToAddTo = group.pinned ? that.ePinnedHeader : that.eHeaderContainer;
                    eContainerToAddTo.appendChild(eHeaderCell);
                });
            };
            HeaderRenderer.prototype.createGroupedHeaderCell = function (group) {
                var eHeaderGroup = document.createElement('div');
                eHeaderGroup.className = 'ag-header-group';
                var eHeaderGroupCell = document.createElement('div');
                group.eHeaderGroupCell = eHeaderGroupCell;
                var classNames = ['ag-header-group-cell'];
                // having different classes below allows the style to not have a bottom border
                // on the group header, if no group is specified
                if (group.name) {
                    classNames.push('ag-header-group-cell-with-group');
                }
                else {
                    classNames.push('ag-header-group-cell-no-group');
                }
                eHeaderGroupCell.className = classNames.join(' ');
                if (this.gridOptionsWrapper.isEnableColResize()) {
                    var eHeaderCellResize = document.createElement("div");
                    eHeaderCellResize.className = "ag-header-cell-resize";
                    eHeaderGroupCell.appendChild(eHeaderCellResize);
                    group.eHeaderCellResize = eHeaderCellResize;
                    var dragCallback = this.groupDragCallbackFactory(group);
                    this.addDragHandler(eHeaderCellResize, dragCallback);
                }
                // no renderer, default text render
                var groupName = group.name;
                if (groupName && groupName !== '') {
                    var eGroupCellLabel = document.createElement("div");
                    eGroupCellLabel.className = 'ag-header-group-cell-label';
                    eHeaderGroupCell.appendChild(eGroupCellLabel);
                    var eInnerText = document.createElement("span");
                    eInnerText.className = 'ag-header-group-text';
                    eInnerText.innerHTML = groupName;
                    eGroupCellLabel.appendChild(eInnerText);
                    if (group.expandable) {
                        this.addGroupExpandIcon(group, eGroupCellLabel, group.expanded);
                    }
                }
                eHeaderGroup.appendChild(eHeaderGroupCell);
                var that = this;
                group.displayedColumns.forEach(function (column) {
                    var eHeaderCell = that.createHeaderCell(column, true, group);
                    eHeaderGroup.appendChild(eHeaderCell);
                });
                that.setWidthOfGroupHeaderCell(group);
                return eHeaderGroup;
            };
            HeaderRenderer.prototype.addGroupExpandIcon = function (group, eHeaderGroup, expanded) {
                var eGroupIcon;
                if (expanded) {
                    eGroupIcon = utils.createIcon('headerGroupOpened', this.gridOptionsWrapper, null, svgFactory.createArrowLeftSvg);
                }
                else {
                    eGroupIcon = utils.createIcon('headerGroupClosed', this.gridOptionsWrapper, null, svgFactory.createArrowRightSvg);
                }
                eGroupIcon.className = 'ag-header-expand-icon';
                eHeaderGroup.appendChild(eGroupIcon);
                var that = this;
                eGroupIcon.onclick = function () {
                    that.columnController.headerGroupOpened(group);
                };
            };
            HeaderRenderer.prototype.addDragHandler = function (eDraggableElement, dragCallback) {
                var that = this;
                eDraggableElement.addEventListener('mousedown', function (downEvent) {
                    dragCallback.onDragStart();
                    that.eRoot.style.cursor = "col-resize";
                    that.dragStartX = downEvent.clientX;
                    var listenersToRemove = {};
                    listenersToRemove.mousemove = function (moveEvent) {
                        var newX = moveEvent.clientX;
                        var change = newX - that.dragStartX;
                        dragCallback.onDragging(change);
                    };
                    listenersToRemove.mouseup = function () {
                        that.stopDragging(listenersToRemove);
                    };
                    listenersToRemove.mouseleave = function () {
                        that.stopDragging(listenersToRemove);
                    };
                    that.eRoot.addEventListener('mousemove', listenersToRemove.mousemove);
                    that.eRoot.addEventListener('mouseup', listenersToRemove.mouseup);
                    that.eRoot.addEventListener('mouseleave', listenersToRemove.mouseleave);
                });
            };
            HeaderRenderer.prototype.setWidthOfGroupHeaderCell = function (headerGroup) {
                var totalWidth = 0;
                headerGroup.displayedColumns.forEach(function (column) {
                    totalWidth += column.actualWidth;
                });
                headerGroup.eHeaderGroupCell.style.width = utils.formatWidth(totalWidth);
                headerGroup.actualWidth = totalWidth;
            };
            HeaderRenderer.prototype.insertHeadersWithoutGrouping = function () {
                var ePinnedHeader = this.ePinnedHeader;
                var eHeaderContainer = this.eHeaderContainer;
                var that = this;
                this.columnModel.getDisplayedColumns().forEach(function (column) {
                    // only include the first x cols
                    var headerCell = that.createHeaderCell(column, false);
                    if (column.pinned) {
                        ePinnedHeader.appendChild(headerCell);
                    }
                    else {
                        eHeaderContainer.appendChild(headerCell);
                    }
                });
            };
            HeaderRenderer.prototype.createHeaderCell = function (column, grouped, headerGroup) {
                var that = this;
                var colDef = column.colDef;
                var eHeaderCell = document.createElement("div");
                // stick the header cell in column, as we access it when group is re-sized
                column.eHeaderCell = eHeaderCell;
                var newChildScope;
                if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
                    newChildScope = this.$scope.$new();
                    newChildScope.colDef = colDef;
                    newChildScope.colIndex = colDef.index;
                    newChildScope.colDefWrapper = column;
                    this.childScopes.push(newChildScope);
                }
                var headerCellClasses = ['ag-header-cell'];
                if (grouped) {
                    headerCellClasses.push('ag-header-cell-grouped'); // this takes 50% height
                }
                else {
                    headerCellClasses.push('ag-header-cell-not-grouped'); // this takes 100% height
                }
                eHeaderCell.className = headerCellClasses.join(' ');
                this.addHeaderClassesFromCollDef(colDef, newChildScope, eHeaderCell);
                // add tooltip if exists
                if (colDef.headerTooltip) {
                    eHeaderCell.title = colDef.headerTooltip;
                }
                if (this.gridOptionsWrapper.isEnableColResize() && !colDef.suppressResize) {
                    var headerCellResize = document.createElement("div");
                    headerCellResize.className = "ag-header-cell-resize";
                    eHeaderCell.appendChild(headerCellResize);
                    var dragCallback = this.headerDragCallbackFactory(eHeaderCell, column, headerGroup);
                    this.addDragHandler(headerCellResize, dragCallback);
                }
                // filter button
                var showMenu = this.gridOptionsWrapper.isEnableFilter() && !colDef.suppressMenu;
                if (showMenu) {
                    var eMenuButton = utils.createIcon('menu', this.gridOptionsWrapper, column, svgFactory.createMenuSvg);
                    utils.addCssClass(eMenuButton, 'ag-header-icon');
                    eMenuButton.setAttribute("class", "ag-header-cell-menu-button");
                    eMenuButton.onclick = function () {
                        that.filterManager.showFilter(column, this);
                    };
                    eHeaderCell.appendChild(eMenuButton);
                    eHeaderCell.onmouseenter = function () {
                        eMenuButton.style.opacity = '1';
                    };
                    eHeaderCell.onmouseleave = function () {
                        eMenuButton.style.opacity = '0';
                    };
                    eMenuButton.style.opacity = '0';
                    eMenuButton.style['transition'] = 'opacity 0.5s, border 0.2s';
                    var style = eMenuButton.style;
                    style['-webkit-transition'] = 'opacity 0.5s, border 0.2s';
                }
                // label div
                var headerCellLabel = document.createElement("div");
                headerCellLabel.className = "ag-header-cell-label";
                // add in sort icons
                if (this.gridOptionsWrapper.isEnableSorting() && !colDef.suppressSorting) {
                    column.eSortAsc = utils.createIcon('sortAscending', this.gridOptionsWrapper, column, svgFactory.createArrowUpSvg);
                    column.eSortDesc = utils.createIcon('sortDescending', this.gridOptionsWrapper, column, svgFactory.createArrowDownSvg);
                    utils.addCssClass(column.eSortAsc, 'ag-header-icon ag-sort-ascending-icon');
                    utils.addCssClass(column.eSortDesc, 'ag-header-icon ag-sort-descending-icon');
                    headerCellLabel.appendChild(column.eSortAsc);
                    headerCellLabel.appendChild(column.eSortDesc);
                    // 'no sort' icon
                    if (colDef.unSortIcon || this.gridOptionsWrapper.isUnSortIcon()) {
                        column.eSortNone = utils.createIcon('sortUnSort', this.gridOptionsWrapper, column, svgFactory.createArrowUpDownSvg);
                        utils.addCssClass(column.eSortNone, 'ag-header-icon ag-sort-none-icon');
                        headerCellLabel.appendChild(column.eSortNone);
                    }
                    column.eSortAsc.style.display = 'none';
                    column.eSortDesc.style.display = 'none';
                    this.addSortHandling(headerCellLabel, column);
                }
                // add in filter icon
                column.eFilterIcon = utils.createIcon('filter', this.gridOptionsWrapper, column, svgFactory.createFilterSvg);
                utils.addCssClass(column.eFilterIcon, 'ag-header-icon');
                headerCellLabel.appendChild(column.eFilterIcon);
                // render the cell, use a renderer if one is provided
                var headerCellRenderer;
                if (colDef.headerCellRenderer) {
                    headerCellRenderer = colDef.headerCellRenderer;
                }
                else if (this.gridOptionsWrapper.getHeaderCellRenderer()) {
                    headerCellRenderer = this.gridOptionsWrapper.getHeaderCellRenderer();
                }
                var headerNameValue = this.columnModel.getDisplayNameForCol(column);
                if (headerCellRenderer) {
                    // renderer provided, use it
                    var cellRendererParams = {
                        colDef: colDef,
                        $scope: newChildScope,
                        context: this.gridOptionsWrapper.getContext(),
                        value: headerNameValue,
                        api: this.gridOptionsWrapper.getApi()
                    };
                    var cellRendererResult = headerCellRenderer(cellRendererParams);
                    var childToAppend;
                    if (utils.isNodeOrElement(cellRendererResult)) {
                        // a dom node or element was returned, so add child
                        childToAppend = cellRendererResult;
                    }
                    else {
                        // otherwise assume it was html, so just insert
                        var eTextSpan = document.createElement("span");
                        eTextSpan.innerHTML = cellRendererResult;
                        childToAppend = eTextSpan;
                    }
                    // angular compile header if option is turned on
                    if (this.gridOptionsWrapper.isAngularCompileHeaders()) {
                        var childToAppendCompiled = this.$compile(childToAppend)(newChildScope)[0];
                        headerCellLabel.appendChild(childToAppendCompiled);
                    }
                    else {
                        headerCellLabel.appendChild(childToAppend);
                    }
                }
                else {
                    // no renderer, default text render
                    var eInnerText = document.createElement("span");
                    eInnerText.className = 'ag-header-cell-text';
                    eInnerText.innerHTML = headerNameValue;
                    headerCellLabel.appendChild(eInnerText);
                }
                eHeaderCell.appendChild(headerCellLabel);
                eHeaderCell.style.width = utils.formatWidth(column.actualWidth);
                return eHeaderCell;
            };
            HeaderRenderer.prototype.addHeaderClassesFromCollDef = function (colDef, $childScope, eHeaderCell) {
                if (colDef.headerClass) {
                    var classToUse;
                    if (typeof colDef.headerClass === 'function') {
                        var params = {
                            colDef: colDef,
                            $scope: $childScope,
                            context: this.gridOptionsWrapper.getContext(),
                            api: this.gridOptionsWrapper.getApi()
                        };
                        classToUse = colDef.headerClass(params);
                    }
                    else {
                        classToUse = colDef.headerClass;
                    }
                    if (typeof classToUse === 'string') {
                        utils.addCssClass(eHeaderCell, classToUse);
                    }
                    else if (Array.isArray(classToUse)) {
                        classToUse.forEach(function (cssClassItem) {
                            utils.addCssClass(eHeaderCell, cssClassItem);
                        });
                    }
                }
            };
            HeaderRenderer.prototype.getNextSortDirection = function (direction) {
                var suppressUnSort = this.gridOptionsWrapper.isSuppressUnSort();
                var suppressDescSort = this.gridOptionsWrapper.isSuppressDescSort();
                switch (direction) {
                    case constants.DESC:
                        if (suppressUnSort) {
                            return constants.ASC;
                        }
                        else {
                            return null;
                        }
                    case constants.ASC:
                        if (suppressUnSort && suppressDescSort) {
                            return constants.ASC;
                        }
                        else if (suppressDescSort) {
                            return null;
                        }
                        else {
                            return constants.DESC;
                        }
                    default:
                        return constants.ASC;
                }
            };
            HeaderRenderer.prototype.addSortHandling = function (headerCellLabel, column) {
                var that = this;
                headerCellLabel.addEventListener("click", function (e) {
                    // update sort on current col
                    column.sort = that.getNextSortDirection(column.sort);
                    // sortedAt used for knowing order of cols when multi-col sort
                    if (column.sort) {
                        column.sortedAt = new Date().valueOf();
                    }
                    else {
                        column.sortedAt = null;
                    }
                    var doingMultiSort = !that.gridOptionsWrapper.isSuppressMultiSort() && e.shiftKey;
                    // clear sort on all columns except this one, and update the icons
                    that.columnModel.getAllColumns().forEach(function (columnToClear) {
                        // Do not clear if either holding shift, or if column in question was clicked
                        if (!(doingMultiSort || columnToClear === column)) {
                            columnToClear.sort = null;
                        }
                    });
                    that.angularGrid.onSortingChanged();
                });
            };
            HeaderRenderer.prototype.updateSortIcons = function () {
                this.columnModel.getAllColumns().forEach(function (column) {
                    // update visibility of icons
                    var sortAscending = column.sort === constants.ASC;
                    var sortDescending = column.sort === constants.DESC;
                    var unSort = column.sort !== constants.DESC && column.sort !== constants.ASC;
                    if (column.eSortAsc) {
                        utils.setVisible(column.eSortAsc, sortAscending);
                    }
                    if (column.eSortDesc) {
                        utils.setVisible(column.eSortDesc, sortDescending);
                    }
                    // UnSort Icon
                    if (column.eSortNone) {
                        utils.setVisible(column.eSortNone, unSort);
                    }
                });
            };
            HeaderRenderer.prototype.groupDragCallbackFactory = function (currentGroup) {
                var parent = this;
                var displayedColumns = currentGroup.displayedColumns;
                return {
                    onDragStart: function () {
                        this.groupWidthStart = currentGroup.actualWidth;
                        this.childrenWidthStarts = [];
                        var that = this;
                        displayedColumns.forEach(function (colDefWrapper) {
                            that.childrenWidthStarts.push(colDefWrapper.actualWidth);
                        });
                        this.minWidth = displayedColumns.length * constants.MIN_COL_WIDTH;
                    },
                    onDragging: function (dragChange) {
                        var newWidth = this.groupWidthStart + dragChange;
                        if (newWidth < this.minWidth) {
                            newWidth = this.minWidth;
                        }
                        // set the new width to the group header
                        var newWidthPx = newWidth + "px";
                        currentGroup.eHeaderGroupCell.style.width = newWidthPx;
                        currentGroup.actualWidth = newWidth;
                        // distribute the new width to the child headers
                        var changeRatio = newWidth / this.groupWidthStart;
                        // keep track of pixels used, and last column gets the remaining,
                        // to cater for rounding errors, and min width adjustments
                        var pixelsToDistribute = newWidth;
                        var that = this;
                        currentGroup.displayedColumns.forEach(function (colDefWrapper, index) {
                            var notLastCol = index !== (displayedColumns.length - 1);
                            var newChildSize;
                            if (notLastCol) {
                                // if not the last col, calculate the column width as normal
                                var startChildSize = that.childrenWidthStarts[index];
                                newChildSize = startChildSize * changeRatio;
                                if (newChildSize < constants.MIN_COL_WIDTH) {
                                    newChildSize = constants.MIN_COL_WIDTH;
                                }
                                pixelsToDistribute -= newChildSize;
                            }
                            else {
                                // if last col, give it the remaining pixels
                                newChildSize = pixelsToDistribute;
                            }
                            var eHeaderCell = displayedColumns[index].eHeaderCell;
                            parent.adjustColumnWidth(newChildSize, colDefWrapper, eHeaderCell);
                        });
                        // should not be calling these here, should do something else
                        if (currentGroup.pinned) {
                            parent.angularGrid.updatePinnedColContainerWidthAfterColResize();
                        }
                        else {
                            parent.angularGrid.updateBodyContainerWidthAfterColResize();
                        }
                    }
                };
            };
            HeaderRenderer.prototype.adjustColumnWidth = function (newWidth, column, eHeaderCell) {
                var newWidthPx = newWidth + "px";
                var selectorForAllColsInCell = ".cell-col-" + column.index;
                var cellsForThisCol = this.eRoot.querySelectorAll(selectorForAllColsInCell);
                for (var i = 0; i < cellsForThisCol.length; i++) {
                    cellsForThisCol[i].style.width = newWidthPx;
                }
                eHeaderCell.style.width = newWidthPx;
                column.actualWidth = newWidth;
            };
            // gets called when a header (not a header group) gets resized
            HeaderRenderer.prototype.headerDragCallbackFactory = function (headerCell, column, headerGroup) {
                var parent = this;
                return {
                    onDragStart: function () {
                        this.startWidth = column.actualWidth;
                    },
                    onDragging: function (dragChange) {
                        var newWidth = this.startWidth + dragChange;
                        if (newWidth < constants.MIN_COL_WIDTH) {
                            newWidth = constants.MIN_COL_WIDTH;
                        }
                        parent.adjustColumnWidth(newWidth, column, headerCell);
                        if (headerGroup) {
                            parent.setWidthOfGroupHeaderCell(headerGroup);
                        }
                        // should not be calling these here, should do something else
                        if (column.pinned) {
                            parent.angularGrid.updatePinnedColContainerWidthAfterColResize();
                        }
                        else {
                            parent.angularGrid.updateBodyContainerWidthAfterColResize();
                        }
                    }
                };
            };
            HeaderRenderer.prototype.stopDragging = function (listenersToRemove) {
                this.eRoot.style.cursor = "";
                var that = this;
                utils.iterateObject(listenersToRemove, function (key, listener) {
                    that.eRoot.removeEventListener(key, listener);
                });
            };
            HeaderRenderer.prototype.updateFilterIcons = function () {
                var that = this;
                this.columnModel.getDisplayedColumns().forEach(function (column) {
                    // todo: need to change this, so only updates if column is visible
                    if (column.eFilterIcon) {
                        var filterPresent = that.filterManager.isFilterPresentForCol(column.colId);
                        var displayStyle = filterPresent ? 'inline' : 'none';
                        column.eFilterIcon.style.display = displayStyle;
                    }
                });
            };
            return HeaderRenderer;
        })();
        grid.HeaderRenderer = HeaderRenderer;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="utils.ts"/>
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var _ = grid.Utils;
        var GroupCreator = (function () {
            function GroupCreator() {
            }
            GroupCreator.getInstance = function () {
                if (!this.theInstance) {
                    this.theInstance = new GroupCreator();
                }
                return this.theInstance;
            };
            GroupCreator.prototype.group = function (rowNodes, groupedCols, expandByDefault, expressionService, api, context) {
                var topMostGroup = {
                    level: -1,
                    children: [],
                    childrenMap: {}
                };
                var allGroups = [];
                allGroups.push(topMostGroup);
                var levelToInsertChild = groupedCols.length - 1;
                var i;
                var currentLevel;
                var node;
                var data;
                var currentGroup;
                var groupKey;
                var nextGroup;
                // start at -1 and go backwards, as all the positive indexes
                // are already used by the nodes.
                var index = -1;
                for (i = 0; i < rowNodes.length; i++) {
                    node = rowNodes[i];
                    data = node.data;
                    // all leaf nodes have the same level in this grouping, which is one level after the last group
                    node.level = levelToInsertChild + 1;
                    for (currentLevel = 0; currentLevel < groupedCols.length; currentLevel++) {
                        var groupColumn = groupedCols[currentLevel];
                        groupKey = _.getValue(expressionService, data, groupColumn.colDef, node, api, context);
                        if (currentLevel == 0) {
                            currentGroup = topMostGroup;
                        }
                        // if group doesn't exist yet, create it
                        nextGroup = currentGroup.childrenMap[groupKey];
                        if (!nextGroup) {
                            nextGroup = {
                                group: true,
                                field: groupColumn.colId,
                                id: index--,
                                key: groupKey,
                                expanded: this.isExpanded(expandByDefault, currentLevel),
                                children: [],
                                // for top most level, parent is null
                                parent: currentGroup === topMostGroup ? null : currentGroup,
                                allChildrenCount: 0,
                                level: currentGroup.level + 1,
                                childrenMap: {} //this is a temporary map, we remove at the end of this method
                            };
                            currentGroup.childrenMap[groupKey] = nextGroup;
                            currentGroup.children.push(nextGroup);
                            allGroups.push(nextGroup);
                        }
                        nextGroup.allChildrenCount++;
                        if (currentLevel == levelToInsertChild) {
                            node.parent = nextGroup === topMostGroup ? null : nextGroup;
                            nextGroup.children.push(node);
                        }
                        else {
                            currentGroup = nextGroup;
                        }
                    }
                }
                for (i = 0; i < allGroups.length; i++) {
                    delete allGroups[i].childrenMap;
                }
                return topMostGroup.children;
            };
            GroupCreator.prototype.isExpanded = function (expandByDefault, level) {
                if (typeof expandByDefault === 'number') {
                    return level < expandByDefault;
                }
                else {
                    return expandByDefault === true || expandByDefault === 'true';
                }
            };
            return GroupCreator;
        })();
        grid.GroupCreator = GroupCreator;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="../constants.ts" />
/// <reference path="../groupCreator.ts" />
/// <reference path="../expandCreator.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var constants = grid.Constants;
        var groupCreator = grid.GroupCreator.getInstance();
        var expandCreator = grid.ExpandCreator.getInstance();
        var InMemoryRowController = (function () {
            function InMemoryRowController() {
                this.createModel();
            }
            InMemoryRowController.prototype.init = function (gridOptionsWrapper, columnModel, angularGrid, filterManager, $scope, expressionService) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.columnModel = columnModel;
                this.angularGrid = angularGrid;
                this.filterManager = filterManager;
                this.$scope = $scope;
                this.expressionService = expressionService;
                this.allRows = null;
                this.rowsAfterGroup = null;
                this.rowsAfterFilter = null;
                this.rowsAfterSort = null;
                this.rowsAfterMap = null;
            };
            // private
            InMemoryRowController.prototype.createModel = function () {
                var that = this;
                this.model = {
                    // this method is implemented by the inMemory model only,
                    // it gives the top level of the selection. used by the selection
                    // controller, when it needs to do a full traversal
                    getTopLevelNodes: function () {
                        return that.rowsAfterGroup;
                    },
                    getVirtualRow: function (index) {
                        return that.rowsAfterMap[index];
                    },
                    getVirtualRowCount: function () {
                        if (that.rowsAfterMap) {
                            return that.rowsAfterMap.length;
                        }
                        else {
                            return 0;
                        }
                    },
                    forEachInMemory: function (callback) {
                        that.forEachInMemory(callback);
                    }
                };
            };
            // public
            InMemoryRowController.prototype.getModel = function () {
                return this.model;
            };
            // public
            InMemoryRowController.prototype.forEachInMemory = function (callback) {
                // iterates through each item in memory, and calls the callback function
                function doCallback(list) {
                    if (list) {
                        for (var i = 0; i < list.length; i++) {
                            var item = list[i];
                            callback(item);
                            if (item.group && item.group.children) {
                                doCallback(item.group.children);
                            }
                        }
                    }
                }
                doCallback(this.rowsAfterGroup);
            };
            // public
            InMemoryRowController.prototype.updateModel = function (step) {
                switch (step) {
                    case constants.STEP_EVERYTHING:
                    case constants.STEP_FILTER:
                        this.doFilter();
                        this.doAggregate();
                    case constants.STEP_SORT:
                        this.doSort();
                    case constants.STEP_MAP:
                        this.doGroupMapping();
                }
                if (typeof this.gridOptionsWrapper.getModelUpdated() === 'function') {
                    this.gridOptionsWrapper.getModelUpdated()();
                    var $scope = this.$scope;
                    if ($scope) {
                        setTimeout(function () {
                            $scope.$apply();
                        }, 0);
                    }
                }
            };
            // private
            InMemoryRowController.prototype.defaultGroupAggFunctionFactory = function (valueColumns, valueKeys) {
                return function groupAggFunction(rows) {
                    var result = {};
                    if (valueKeys) {
                        for (var i = 0; i < valueKeys.length; i++) {
                            var valueKey = valueKeys[i];
                            // at this point, if no values were numbers, the result is null (not zero)
                            result[valueKey] = aggregateColumn(rows, constants.SUM, valueKey);
                        }
                    }
                    if (valueColumns) {
                        for (var j = 0; j < valueColumns.length; j++) {
                            var valueColumn = valueColumns[j];
                            var colKey = valueColumn.colDef.field;
                            // at this point, if no values were numbers, the result is null (not zero)
                            result[colKey] = aggregateColumn(rows, valueColumn.aggFunc, colKey);
                        }
                    }
                    return result;
                };
                function aggregateColumn(rows, aggFunc, colKey) {
                    var resultForColumn = null;
                    for (var i = 0; i < rows.length; i++) {
                        var row = rows[i];
                        var thisColumnValue = row.data[colKey];
                        // only include if the value is a number
                        if (typeof thisColumnValue === 'number') {
                            switch (aggFunc) {
                                case constants.SUM:
                                    resultForColumn += thisColumnValue;
                                    break;
                                case constants.MIN:
                                    if (resultForColumn === null) {
                                        resultForColumn = thisColumnValue;
                                    }
                                    else if (resultForColumn > thisColumnValue) {
                                        resultForColumn = thisColumnValue;
                                    }
                                    break;
                                case constants.MAX:
                                    if (resultForColumn === null) {
                                        resultForColumn = thisColumnValue;
                                    }
                                    else if (resultForColumn < thisColumnValue) {
                                        resultForColumn = thisColumnValue;
                                    }
                                    break;
                            }
                        }
                    }
                    return resultForColumn;
                }
            };
            // private
            InMemoryRowController.prototype.getValue = function (data, colDef, node) {
                var api = this.gridOptionsWrapper.getApi();
                var context = this.gridOptionsWrapper.getContext();
                return utils.getValue(this.expressionService, data, colDef, node, api, context);
            };
            // public - it's possible to recompute the aggregate without doing the other parts
            InMemoryRowController.prototype.doAggregate = function () {
                var groupAggFunction = this.gridOptionsWrapper.getGroupAggFunction();
                if (typeof groupAggFunction === 'function') {
                    this.recursivelyCreateAggData(this.rowsAfterFilter, groupAggFunction);
                    return;
                }
                var valueColumns = this.columnModel.getValueColumns();
                var valueKeys = this.gridOptionsWrapper.getGroupAggFields();
                if ((valueColumns && valueColumns.length > 0) || (valueKeys && valueKeys.length > 0)) {
                    var defaultAggFunction = this.defaultGroupAggFunctionFactory(valueColumns, valueKeys);
                    this.recursivelyCreateAggData(this.rowsAfterFilter, defaultAggFunction);
                }
                else {
                    // if no agg data, need to clear out any previous items, when can be left behind
                    // if use is creating / removing columns using the tool panel.
                    // one exception - don't do this if already grouped, as this breaks the File Explorer example!!
                    // to fix another day - how to we reset when the user provided the data??
                    if (!this.gridOptionsWrapper.isRowsAlreadyGrouped()) {
                        this.recursivelyClearAggData(this.rowsAfterFilter);
                    }
                }
            };
            // public
            InMemoryRowController.prototype.expandOrCollapseAll = function (expand, rowNodes) {
                // if first call in recursion, we set list to parent list
                if (rowNodes === null) {
                    rowNodes = this.rowsAfterGroup;
                }
                if (!rowNodes) {
                    return;
                }
                var _this = this;
                rowNodes.forEach(function (node) {
                    if (node.group) {
                        node.expanded = expand;
                        _this.expandOrCollapseAll(expand, node.children);
                    }
                });
            };
            // private
            InMemoryRowController.prototype.recursivelyClearAggData = function (nodes) {
                for (var i = 0, l = nodes.length; i < l; i++) {
                    var node = nodes[i];
                    if (node.group) {
                        // agg function needs to start at the bottom, so traverse first
                        this.recursivelyClearAggData(node.childrenAfterFilter);
                        node.data = null;
                    }
                }
            };
            // private
            InMemoryRowController.prototype.recursivelyCreateAggData = function (nodes, groupAggFunction) {
                for (var i = 0, l = nodes.length; i < l; i++) {
                    var node = nodes[i];
                    if (node.group) {
                        // agg function needs to start at the bottom, so traverse first
                        this.recursivelyCreateAggData(node.childrenAfterFilter, groupAggFunction);
                        // after traversal, we can now do the agg at this level
                        var data = groupAggFunction(node.childrenAfterFilter);
                        node.data = data;
                        // if we are grouping, then it's possible there is a sibling footer
                        // to the group, so update the data here also if there is one
                        if (node.sibling) {
                            node.sibling.data = data;
                        }
                    }
                }
            };
            // private
            InMemoryRowController.prototype.doSort = function () {
                var sorting;
                // if the sorting is already done by the server, then we should not do it here
                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
                    sorting = false;
                }
                else {
                    //see if there is a col we are sorting by
                    var sortingOptions = [];
                    this.columnModel.getAllColumns().forEach(function (column) {
                        if (column.sort) {
                            var ascending = column.sort === constants.ASC;
                            sortingOptions.push({
                                inverter: ascending ? 1 : -1,
                                sortedAt: column.sortedAt,
                                colDef: column.colDef
                            });
                        }
                    });
                    if (sortingOptions.length > 0) {
                        sorting = true;
                    }
                }
                var rowNodesReadyForSorting = this.rowsAfterFilter ? this.rowsAfterFilter.slice(0) : null;
                if (sorting) {
                    // The columns are to be sorted in the order that the user selected them:
                    sortingOptions.sort(function (optionA, optionB) {
                        return optionA.sortedAt - optionB.sortedAt;
                    });
                    this.sortList(rowNodesReadyForSorting, sortingOptions);
                }
                else {
                    // if no sorting, set all group children after sort to the original list.
                    // note: it is important to do this, even if doing server side sorting,
                    // to allow the rows to pass to the next stage (ie set the node value
                    // childrenAfterSort)
                    this.recursivelyResetSort(rowNodesReadyForSorting);
                }
                this.rowsAfterSort = rowNodesReadyForSorting;
            };
            // private
            InMemoryRowController.prototype.recursivelyResetSort = function (rowNodes) {
                if (!rowNodes) {
                    return;
                }
                for (var i = 0, l = rowNodes.length; i < l; i++) {
                    var item = rowNodes[i];
                    if (item.group && item.children) {
                        item.childrenAfterSort = item.childrenAfterFilter;
                        this.recursivelyResetSort(item.children);
                    }
                }
            };
            // private
            InMemoryRowController.prototype.sortList = function (nodes, sortOptions) {
                for (var i = 0, l = nodes.length; i < l; i++) {
                    var node = nodes[i];
                    if (node.group && node.children) {
                        node.childrenAfterSort = node.childrenAfterFilter.slice(0);
                        this.sortList(node.childrenAfterSort, sortOptions);
                    }
                }
                var that = this;
                function compare(objA, objB, colDef) {
                    var valueA = that.getValue(objA.data, colDef, objA);
                    var valueB = that.getValue(objB.data, colDef, objB);
                    if (colDef.comparator) {
                        //if comparator provided, use it
                        return colDef.comparator(valueA, valueB, objA, objB);
                    }
                    else {
                        //otherwise do our own comparison
                        return utils.defaultComparator(valueA, valueB);
                    }
                }
                nodes.sort(function (objA, objB) {
                    for (var i = 0, len = sortOptions.length; i < len; i++) {
                        var sortOption = sortOptions[i];
                        var compared = compare(objA, objB, sortOption.colDef);
                        if (compared !== 0) {
                            return compared * sortOption.inverter;
                        }
                    }
                    // All matched, these are identical as far as the sort is concerned:
                    return 0;
                });
            };
            // private
            InMemoryRowController.prototype.doGrouping = function () {
                var rowsAfterGroup;
                var groupedCols = this.columnModel.getGroupedColumns();
                var rowsAlreadyGrouped = this.gridOptionsWrapper.isRowsAlreadyGrouped();
                var doingGrouping = !rowsAlreadyGrouped && groupedCols.length > 0;
                if (doingGrouping) {
                    var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();
                    var api = this.gridOptionsWrapper.getApi();
                    var context = this.gridOptionsWrapper.getContext();
                    rowsAfterGroup = groupCreator.group(this.allRows, groupedCols, expandByDefault, this.expressionService, api, context);
                }
                else {
                    rowsAfterGroup = this.allRows;
                }
                this.rowsAfterGroup = rowsAfterGroup;
            };
            // private
            InMemoryRowController.prototype.doExpanding = function () {
                if (this.gridOptionsWrapper.isDoInternalExpanding()) {
                    if (!this.gridOptionsWrapper.isRowsAlreadyExpanded()) {
                        var nodes = [];
                        for (var i = 0; i < (this.allRows || []).length; i++) {
                            var node = this.allRows[i];
                            nodes[i] = {
                                data: node,
                                id: node.id,
                                level: node.level
                            };
                        }
                        this.allRows = nodes;
                        this.gridOptionsWrapper.gridOptions.rowsAlreadyGrouped = true;
                    }
                    this.rowsAfterGroup = expandCreator.group(this.allRows, this.gridOptionsWrapper.getExpandedRowsDefault());
                }
            };
            // private
            InMemoryRowController.prototype.doFilter = function () {
                var doingFilter;
                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
                    doingFilter = false;
                }
                else {
                    var quickFilterPresent = this.angularGrid.getQuickFilter() !== null;
                    var advancedFilterPresent = this.filterManager.isFilterPresent();
                    doingFilter = quickFilterPresent || advancedFilterPresent;
                }
                var rowsAfterFilter;
                if (doingFilter) {
                    rowsAfterFilter = this.filterItems(this.rowsAfterGroup, quickFilterPresent, advancedFilterPresent);
                }
                else {
                    // do it here
                    rowsAfterFilter = this.rowsAfterGroup;
                    this.recursivelyResetFilter(this.rowsAfterGroup);
                }
                this.rowsAfterFilter = rowsAfterFilter;
            };
            // private
            InMemoryRowController.prototype.filterItems = function (rowNodes, quickFilterPresent, advancedFilterPresent) {
                var result = [];
                for (var i = 0, l = rowNodes.length; i < l; i++) {
                    var node = rowNodes[i];
                    if (node.group) {
                        // deal with group
                        node.childrenAfterFilter = this.filterItems(node.children, quickFilterPresent, advancedFilterPresent);
                        if (node.childrenAfterFilter.length > 0) {
                            node.allChildrenCount = this.getTotalChildCount(node.childrenAfterFilter);
                            result.push(node);
                        }
                    }
                    else {
                        if (this.doesRowPassFilter(node, quickFilterPresent, advancedFilterPresent)) {
                            result.push(node);
                        }
                    }
                }
                return result;
            };
            // private
            InMemoryRowController.prototype.recursivelyResetFilter = function (nodes) {
                if (!nodes) {
                    return;
                }
                for (var i = 0, l = nodes.length; i < l; i++) {
                    var node = nodes[i];
                    if (node.group && node.children) {
                        node.childrenAfterFilter = node.children;
                        this.recursivelyResetFilter(node.children);
                        node.allChildrenCount = this.getTotalChildCount(node.childrenAfterFilter);
                    }
                }
            };
            // private
            // rows: the rows to put into the model
            // firstId: the first id to use, used for paging, where we are not on the first page
            InMemoryRowController.prototype.setAllRows = function (rows, firstId) {
                var nodes;
                if (this.gridOptionsWrapper.isRowsAlreadyGrouped()) {
                    nodes = rows;
                    this.recursivelyCheckUserProvidedNodes(nodes, null, 0);
                }
                else {
                    // place each row into a wrapper
                    var nodes = [];
                    if (rows) {
                        for (var i = 0; i < rows.length; i++) {
                            nodes.push({
                                data: rows[i]
                            });
                        }
                    }
                }
                // if firstId provided, use it, otherwise start at 0
                var firstIdToUse = firstId ? firstId : 0;
                this.recursivelyAddIdToNodes(nodes, firstIdToUse);
                this.allRows = nodes;
                // aggregate here, so filters have the agg data ready
                this.doGrouping();
                // process here the expanded
                this.doExpanding();
            };
            // add in index - this is used by the selectionController - so quick
            // to look up selected rows
            InMemoryRowController.prototype.recursivelyAddIdToNodes = function (nodes, index) {
                if (!nodes) {
                    return;
                }
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    node.id = index++;
                    if (node.group && node.children) {
                        index = this.recursivelyAddIdToNodes(node.children, index);
                    }
                }
                return index;
            };
            // add in index - this is used by the selectionController - so quick
            // to look up selected rows
            InMemoryRowController.prototype.recursivelyCheckUserProvidedNodes = function (nodes, parent, level) {
                if (!nodes) {
                    return;
                }
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    if (parent) {
                        node.parent = parent;
                    }
                    node.level = level;
                    if (node.group && node.children) {
                        this.recursivelyCheckUserProvidedNodes(node.children, node, level + 1);
                    }
                }
            };
            // private
            InMemoryRowController.prototype.getTotalChildCount = function (rowNodes) {
                var count = 0;
                for (var i = 0, l = rowNodes.length; i < l; i++) {
                    var item = rowNodes[i];
                    if (item.group) {
                        count += item.allChildrenCount;
                    }
                    else {
                        count++;
                    }
                }
                return count;
            };
            // private
            InMemoryRowController.prototype.doGroupMapping = function () {
                // even if not doing grouping, we do the mapping, as the client might
                // of passed in data that already has a grouping in it somewhere
                var rowsAfterMap = [];
                this.addToMap(rowsAfterMap, this.rowsAfterSort);
                this.rowsAfterMap = rowsAfterMap;
            };
            // private
            InMemoryRowController.prototype.addToMap = function (mappedData, originalNodes) {
                if (!originalNodes) {
                    return;
                }
                for (var i = 0; i < originalNodes.length; i++) {
                    var node = originalNodes[i];
                    mappedData.push(node);
                    if (node.group && node.expanded) {
                        this.addToMap(mappedData, node.childrenAfterSort);
                        // put a footer in if user is looking for it
                        if (this.gridOptionsWrapper.isGroupIncludeFooter()) {
                            var footerNode = this.createFooterNode(node);
                            mappedData.push(footerNode);
                        }
                    }
                }
            };
            // private
            InMemoryRowController.prototype.createFooterNode = function (groupNode) {
                var footerNode = {};
                Object.keys(groupNode).forEach(function (key) {
                    footerNode[key] = groupNode[key];
                });
                footerNode.footer = true;
                // get both header and footer to reference each other as siblings. this is never undone,
                // only overwritten. so if a group is expanded, then contracted, it will have a ghost
                // sibling - but that's fine, as we can ignore this if the header is contracted.
                footerNode.sibling = groupNode;
                groupNode.sibling = footerNode;
                return footerNode;
            };
            // private
            InMemoryRowController.prototype.doesRowPassFilter = function (node, quickFilterPresent, advancedFilterPresent) {
                //first up, check quick filter
                if (quickFilterPresent) {
                    if (!node.quickFilterAggregateText) {
                        this.aggregateRowForQuickFilter(node);
                    }
                    if (node.quickFilterAggregateText.indexOf(this.angularGrid.getQuickFilter()) < 0) {
                        //quick filter fails, so skip item
                        return false;
                    }
                }
                //second, check advanced filter
                if (advancedFilterPresent) {
                    if (!this.filterManager.doesFilterPass(node)) {
                        return false;
                    }
                }
                //got this far, all filters pass
                return true;
            };
            // private
            InMemoryRowController.prototype.aggregateRowForQuickFilter = function (node) {
                var aggregatedText = '';
                var that = this;
                this.columnModel.getAllColumns().forEach(function (colDefWrapper) {
                    var data = node.data;
                    var value = that.getValue(data, colDefWrapper.colDef, node);
                    if (value && value !== '') {
                        aggregatedText = aggregatedText + value.toString().toUpperCase() + "_";
                    }
                });
                node.quickFilterAggregateText = aggregatedText;
            };
            return InMemoryRowController;
        })();
        grid.InMemoryRowController = InMemoryRowController;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/*
 * This row controller is used for infinite scrolling only. For normal 'in memory' table,
 * or standard pagination, the inMemoryRowController is used.
 */
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var logging = false;
        var VirtualPageRowController = (function () {
            function VirtualPageRowController() {
            }
            VirtualPageRowController.prototype.init = function (rowRenderer, gridOptionsWrapper, angularGrid) {
                this.rowRenderer = rowRenderer;
                this.datasourceVersion = 0;
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.angularGrid = angularGrid;
            };
            VirtualPageRowController.prototype.setDatasource = function (datasource) {
                this.datasource = datasource;
                if (!datasource) {
                    // only continue if we have a valid datasource to working with
                    return;
                }
                this.reset();
            };
            VirtualPageRowController.prototype.reset = function () {
                // see if datasource knows how many rows there are
                if (typeof this.datasource.rowCount === 'number' && this.datasource.rowCount >= 0) {
                    this.virtualRowCount = this.datasource.rowCount;
                    this.foundMaxRow = true;
                }
                else {
                    this.virtualRowCount = 0;
                    this.foundMaxRow = false;
                }
                // in case any daemon requests coming from datasource, we know it ignore them
                this.datasourceVersion++;
                // map of page numbers to rows in that page
                this.pageCache = {};
                this.pageCacheSize = 0;
                // if a number is in this array, it means we are pending a load from it
                this.pageLoadsInProgress = [];
                this.pageLoadsQueued = [];
                this.pageAccessTimes = {}; // keeps a record of when each page was last viewed, used for LRU cache
                this.accessTime = 0; // rather than using the clock, we use this counter
                // the number of concurrent loads we are allowed to the server
                if (typeof this.datasource.maxConcurrentRequests === 'number' && this.datasource.maxConcurrentRequests > 0) {
                    this.maxConcurrentDatasourceRequests = this.datasource.maxConcurrentRequests;
                }
                else {
                    this.maxConcurrentDatasourceRequests = 2;
                }
                // the number of pages to keep in browser cache
                if (typeof this.datasource.maxPagesInCache === 'number' && this.datasource.maxPagesInCache > 0) {
                    this.maxPagesInCache = this.datasource.maxPagesInCache;
                }
                else {
                    // null is default, means don't  have any max size on the cache
                    this.maxPagesInCache = null;
                }
                this.pageSize = this.datasource.pageSize; // take a copy of page size, we don't want it changing
                this.overflowSize = this.datasource.overflowSize; // take a copy of page size, we don't want it changing
                this.doLoadOrQueue(0);
            };
            VirtualPageRowController.prototype.createNodesFromRows = function (pageNumber, rows) {
                var nodes = [];
                if (rows) {
                    for (var i = 0, j = rows.length; i < j; i++) {
                        var virtualRowIndex = (pageNumber * this.pageSize) + i;
                        nodes.push({
                            data: rows[i],
                            id: virtualRowIndex
                        });
                    }
                }
                return nodes;
            };
            VirtualPageRowController.prototype.removeFromLoading = function (pageNumber) {
                var index = this.pageLoadsInProgress.indexOf(pageNumber);
                this.pageLoadsInProgress.splice(index, 1);
            };
            VirtualPageRowController.prototype.pageLoadFailed = function (pageNumber) {
                this.removeFromLoading(pageNumber);
                this.checkQueueForNextLoad();
            };
            VirtualPageRowController.prototype.pageLoaded = function (pageNumber, rows, lastRow) {
                this.putPageIntoCacheAndPurge(pageNumber, rows);
                this.checkMaxRowAndInformRowRenderer(pageNumber, lastRow);
                this.removeFromLoading(pageNumber);
                this.checkQueueForNextLoad();
            };
            VirtualPageRowController.prototype.putPageIntoCacheAndPurge = function (pageNumber, rows) {
                this.pageCache[pageNumber] = this.createNodesFromRows(pageNumber, rows);
                this.pageCacheSize++;
                if (logging) {
                    console.log('adding page ' + pageNumber);
                }
                var needToPurge = this.maxPagesInCache && this.maxPagesInCache < this.pageCacheSize;
                if (needToPurge) {
                    // find the LRU page
                    var youngestPageIndex = this.findLeastRecentlyAccessedPage(Object.keys(this.pageCache));
                    if (logging) {
                        console.log('purging page ' + youngestPageIndex + ' from cache ' + Object.keys(this.pageCache));
                    }
                    delete this.pageCache[youngestPageIndex];
                    this.pageCacheSize--;
                }
            };
            VirtualPageRowController.prototype.checkMaxRowAndInformRowRenderer = function (pageNumber, lastRow) {
                if (!this.foundMaxRow) {
                    // if we know the last row, use if
                    if (typeof lastRow === 'number' && lastRow >= 0) {
                        this.virtualRowCount = lastRow;
                        this.foundMaxRow = true;
                    }
                    else {
                        // otherwise, see if we need to add some virtual rows
                        var thisPagePlusBuffer = ((pageNumber + 1) * this.pageSize) + this.overflowSize;
                        if (this.virtualRowCount < thisPagePlusBuffer) {
                            this.virtualRowCount = thisPagePlusBuffer;
                        }
                    }
                    // if rowCount changes, refreshView, otherwise just refreshAllVirtualRows
                    this.rowRenderer.refreshView();
                }
                else {
                    this.rowRenderer.refreshAllVirtualRows();
                }
            };
            VirtualPageRowController.prototype.isPageAlreadyLoading = function (pageNumber) {
                var result = this.pageLoadsInProgress.indexOf(pageNumber) >= 0 || this.pageLoadsQueued.indexOf(pageNumber) >= 0;
                return result;
            };
            VirtualPageRowController.prototype.doLoadOrQueue = function (pageNumber) {
                // if we already tried to load this page, then ignore the request,
                // otherwise server would be hit 50 times just to display one page, the
                // first row to find the page missing is enough.
                if (this.isPageAlreadyLoading(pageNumber)) {
                    return;
                }
                // try the page load - if not already doing a load, then we can go ahead
                if (this.pageLoadsInProgress.length < this.maxConcurrentDatasourceRequests) {
                    // go ahead, load the page
                    this.loadPage(pageNumber);
                }
                else {
                    // otherwise, queue the request
                    this.addToQueueAndPurgeQueue(pageNumber);
                }
            };
            VirtualPageRowController.prototype.addToQueueAndPurgeQueue = function (pageNumber) {
                if (logging) {
                    console.log('queueing ' + pageNumber + ' - ' + this.pageLoadsQueued);
                }
                this.pageLoadsQueued.push(pageNumber);
                // see if there are more pages queued that are actually in our cache, if so there is
                // no point in loading them all as some will be purged as soon as loaded
                var needToPurge = this.maxPagesInCache && this.maxPagesInCache < this.pageLoadsQueued.length;
                if (needToPurge) {
                    // find the LRU page
                    var youngestPageIndex = this.findLeastRecentlyAccessedPage(this.pageLoadsQueued);
                    if (logging) {
                        console.log('de-queueing ' + pageNumber + ' - ' + this.pageLoadsQueued);
                    }
                    var indexToRemove = this.pageLoadsQueued.indexOf(youngestPageIndex);
                    this.pageLoadsQueued.splice(indexToRemove, 1);
                }
            };
            VirtualPageRowController.prototype.findLeastRecentlyAccessedPage = function (pageIndexes) {
                var youngestPageIndex = -1;
                var youngestPageAccessTime = Number.MAX_VALUE;
                var that = this;
                pageIndexes.forEach(function (pageIndex) {
                    var accessTimeThisPage = that.pageAccessTimes[pageIndex];
                    if (accessTimeThisPage < youngestPageAccessTime) {
                        youngestPageAccessTime = accessTimeThisPage;
                        youngestPageIndex = pageIndex;
                    }
                });
                return youngestPageIndex;
            };
            VirtualPageRowController.prototype.checkQueueForNextLoad = function () {
                if (this.pageLoadsQueued.length > 0) {
                    // take from the front of the queue
                    var pageToLoad = this.pageLoadsQueued[0];
                    this.pageLoadsQueued.splice(0, 1);
                    if (logging) {
                        console.log('dequeueing ' + pageToLoad + ' - ' + this.pageLoadsQueued);
                    }
                    this.loadPage(pageToLoad);
                }
            };
            VirtualPageRowController.prototype.loadPage = function (pageNumber) {
                this.pageLoadsInProgress.push(pageNumber);
                var startRow = pageNumber * this.pageSize;
                var endRow = (pageNumber + 1) * this.pageSize;
                var that = this;
                var datasourceVersionCopy = this.datasourceVersion;
                var sortModel;
                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
                    sortModel = this.angularGrid.getSortModel();
                }
                var filterModel;
                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
                    filterModel = this.angularGrid.getFilterModel();
                }
                var params = {
                    startRow: startRow,
                    endRow: endRow,
                    successCallback: successCallback,
                    failCallback: failCallback,
                    sortModel: sortModel,
                    filterModel: filterModel
                };
                // check if old version of datasource used
                var getRowsParams = utils.getFunctionParameters(this.datasource.getRows);
                if (getRowsParams.length > 1) {
                    console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
                    console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
                }
                this.datasource.getRows(params);
                function successCallback(rows, lastRowIndex) {
                    if (that.requestIsDaemon(datasourceVersionCopy)) {
                        return;
                    }
                    that.pageLoaded(pageNumber, rows, lastRowIndex);
                }
                function failCallback() {
                    if (that.requestIsDaemon(datasourceVersionCopy)) {
                        return;
                    }
                    that.pageLoadFailed(pageNumber);
                }
            };
            // check that the datasource has not changed since the lats time we did a request
            VirtualPageRowController.prototype.requestIsDaemon = function (datasourceVersionCopy) {
                return this.datasourceVersion !== datasourceVersionCopy;
            };
            VirtualPageRowController.prototype.getVirtualRow = function (rowIndex) {
                if (rowIndex > this.virtualRowCount) {
                    return null;
                }
                var pageNumber = Math.floor(rowIndex / this.pageSize);
                var page = this.pageCache[pageNumber];
                // for LRU cache, track when this page was last hit
                this.pageAccessTimes[pageNumber] = this.accessTime++;
                if (!page) {
                    this.doLoadOrQueue(pageNumber);
                    // return back an empty row, so table can at least render empty cells
                    return {
                        data: {},
                        id: rowIndex
                    };
                }
                else {
                    var indexInThisPage = rowIndex % this.pageSize;
                    return page[indexInThisPage];
                }
            };
            VirtualPageRowController.prototype.forEachInMemory = function (callback) {
                var pageKeys = Object.keys(this.pageCache);
                for (var i = 0; i < pageKeys.length; i++) {
                    var pageKey = pageKeys[i];
                    var page = this.pageCache[pageKey];
                    for (var j = 0; j < page.length; j++) {
                        var node = page[j];
                        callback(node);
                    }
                }
            };
            VirtualPageRowController.prototype.getModel = function () {
                var that = this;
                return {
                    getVirtualRow: function (index) {
                        return that.getVirtualRow(index);
                    },
                    getVirtualRowCount: function () {
                        return that.virtualRowCount;
                    },
                    forEachInMemory: function (callback) {
                        that.forEachInMemory(callback);
                    }
                };
            };
            return VirtualPageRowController;
        })();
        grid.VirtualPageRowController = VirtualPageRowController;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var template = '<div class="ag-paging-panel">' + '<span id="pageRowSummaryPanel" class="ag-paging-row-summary-panel">' + '<span id="firstRowOnPage"></span>' + ' [TO] ' + '<span id="lastRowOnPage"></span>' + ' [OF] ' + '<span id="recordCount"></span>' + '</span>' + '<span class="ag-paging-page-summary-panel">' + '<button class="ag-paging-button" id="btFirst">[FIRST]</button>' + '<button class="ag-paging-button" id="btPrevious">[PREVIOUS]</button>' + '[PAGE] ' + '<span id="current"></span>' + ' [OF] ' + '<span id="total"></span>' + '<button class="ag-paging-button" id="btNext">[NEXT]</button>' + '<button class="ag-paging-button" id="btLast">[LAST]</button>' + '</span>' + '</div>';
        var PaginationController = (function () {
            function PaginationController() {
            }
            PaginationController.prototype.init = function (angularGrid, gridOptionsWrapper) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.angularGrid = angularGrid;
                this.setupComponents();
                this.callVersion = 0;
            };
            PaginationController.prototype.setDatasource = function (datasource) {
                this.datasource = datasource;
                if (!datasource) {
                    // only continue if we have a valid datasource to work with
                    return;
                }
                this.reset();
            };
            PaginationController.prototype.reset = function () {
                // copy pageSize, to guard against it changing the the datasource between calls
                if (this.datasource.pageSize && typeof this.datasource.pageSize !== 'number') {
                    console.warn('datasource.pageSize should be a number');
                }
                this.pageSize = this.datasource.pageSize;
                // see if we know the total number of pages, or if it's 'to be decided'
                if (typeof this.datasource.rowCount === 'number' && this.datasource.rowCount >= 0) {
                    this.rowCount = this.datasource.rowCount;
                    this.foundMaxRow = true;
                    this.calculateTotalPages();
                }
                else {
                    this.rowCount = 0;
                    this.foundMaxRow = false;
                    this.totalPages = null;
                }
                this.currentPage = 0;
                // hide the summary panel until something is loaded
                this.ePageRowSummaryPanel.style.visibility = 'hidden';
                this.setTotalLabels();
                this.loadPage();
            };
            PaginationController.prototype.setTotalLabels = function () {
                if (this.foundMaxRow) {
                    this.lbTotal.innerHTML = this.totalPages.toLocaleString();
                    this.lbRecordCount.innerHTML = this.rowCount.toLocaleString();
                }
                else {
                    var moreText = this.gridOptionsWrapper.getLocaleTextFunc()('more', 'more');
                    this.lbTotal.innerHTML = moreText;
                    this.lbRecordCount.innerHTML = moreText;
                }
            };
            PaginationController.prototype.calculateTotalPages = function () {
                this.totalPages = Math.floor((this.rowCount - 1) / this.pageSize) + 1;
            };
            PaginationController.prototype.pageLoaded = function (rows, lastRowIndex) {
                var firstId = this.currentPage * this.pageSize;
                this.angularGrid.setRows(rows, firstId);
                // see if we hit the last row
                if (!this.foundMaxRow && typeof lastRowIndex === 'number' && lastRowIndex >= 0) {
                    this.foundMaxRow = true;
                    this.rowCount = lastRowIndex;
                    this.calculateTotalPages();
                    this.setTotalLabels();
                    // if overshot pages, go back
                    if (this.currentPage > this.totalPages) {
                        this.currentPage = this.totalPages - 1;
                        this.loadPage();
                    }
                }
                this.enableOrDisableButtons();
                this.updateRowLabels();
            };
            PaginationController.prototype.updateRowLabels = function () {
                var startRow;
                var endRow;
                if (this.isZeroPagesToDisplay()) {
                    startRow = 0;
                    endRow = 0;
                }
                else {
                    startRow = (this.pageSize * this.currentPage) + 1;
                    endRow = startRow + this.pageSize - 1;
                    if (this.foundMaxRow && endRow > this.rowCount) {
                        endRow = this.rowCount;
                    }
                }
                this.lbFirstRowOnPage.innerHTML = (startRow).toLocaleString();
                this.lbLastRowOnPage.innerHTML = (endRow).toLocaleString();
                // show the summary panel, when first shown, this is blank
                this.ePageRowSummaryPanel.style.visibility = null;
            };
            PaginationController.prototype.loadPage = function () {
                this.enableOrDisableButtons();
                var startRow = this.currentPage * this.datasource.pageSize;
                var endRow = (this.currentPage + 1) * this.datasource.pageSize;
                this.lbCurrent.innerHTML = (this.currentPage + 1).toLocaleString();
                this.callVersion++;
                var callVersionCopy = this.callVersion;
                var that = this;
                this.angularGrid.showLoadingPanel(true);
                var sortModel;
                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
                    sortModel = this.angularGrid.getSortModel();
                }
                var filterModel;
                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
                    filterModel = this.angularGrid.getFilterModel();
                }
                var params = {
                    startRow: startRow,
                    endRow: endRow,
                    successCallback: successCallback,
                    failCallback: failCallback,
                    sortModel: sortModel,
                    filterModel: filterModel
                };
                // check if old version of datasource used
                var getRowsParams = utils.getFunctionParameters(this.datasource.getRows);
                if (getRowsParams.length > 1) {
                    console.warn('ag-grid: It looks like your paging datasource is of the old type, taking more than one parameter.');
                    console.warn('ag-grid: From ag-grid 1.9.0, now the getRows takes one parameter. See the documentation for details.');
                }
                this.datasource.getRows(params);
                function successCallback(rows, lastRowIndex) {
                    if (that.isCallDaemon(callVersionCopy)) {
                        return;
                    }
                    that.pageLoaded(rows, lastRowIndex);
                }
                function failCallback() {
                    if (that.isCallDaemon(callVersionCopy)) {
                        return;
                    }
                    // set in an empty set of rows, this will at
                    // least get rid of the loading panel, and
                    // stop blocking things
                    that.angularGrid.setRows([]);
                }
            };
            PaginationController.prototype.isCallDaemon = function (versionCopy) {
                return versionCopy !== this.callVersion;
            };
            PaginationController.prototype.onBtNext = function () {
                this.currentPage++;
                this.loadPage();
            };
            PaginationController.prototype.onBtPrevious = function () {
                this.currentPage--;
                this.loadPage();
            };
            PaginationController.prototype.onBtFirst = function () {
                this.currentPage = 0;
                this.loadPage();
            };
            PaginationController.prototype.onBtLast = function () {
                this.currentPage = this.totalPages - 1;
                this.loadPage();
            };
            PaginationController.prototype.isZeroPagesToDisplay = function () {
                return this.foundMaxRow && this.totalPages === 0;
            };
            PaginationController.prototype.enableOrDisableButtons = function () {
                var disablePreviousAndFirst = this.currentPage === 0;
                this.btPrevious.disabled = disablePreviousAndFirst;
                this.btFirst.disabled = disablePreviousAndFirst;
                var zeroPagesToDisplay = this.isZeroPagesToDisplay();
                var onLastPage = this.foundMaxRow && this.currentPage === (this.totalPages - 1);
                var disableNext = onLastPage || zeroPagesToDisplay;
                this.btNext.disabled = disableNext;
                var disableLast = !this.foundMaxRow || zeroPagesToDisplay || this.currentPage === (this.totalPages - 1);
                this.btLast.disabled = disableLast;
            };
            PaginationController.prototype.createTemplate = function () {
                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
                return template.replace('[PAGE]', localeTextFunc('page', 'Page')).replace('[TO]', localeTextFunc('to', 'to')).replace('[OF]', localeTextFunc('of', 'of')).replace('[OF]', localeTextFunc('of', 'of')).replace('[FIRST]', localeTextFunc('first', 'First')).replace('[PREVIOUS]', localeTextFunc('previous', 'Previous')).replace('[NEXT]', localeTextFunc('next', 'Next')).replace('[LAST]', localeTextFunc('last', 'Last'));
            };
            PaginationController.prototype.getGui = function () {
                return this.eGui;
            };
            PaginationController.prototype.setupComponents = function () {
                this.eGui = utils.loadTemplate(this.createTemplate());
                this.btNext = this.eGui.querySelector('#btNext');
                this.btPrevious = this.eGui.querySelector('#btPrevious');
                this.btFirst = this.eGui.querySelector('#btFirst');
                this.btLast = this.eGui.querySelector('#btLast');
                this.lbCurrent = this.eGui.querySelector('#current');
                this.lbTotal = this.eGui.querySelector('#total');
                this.lbRecordCount = this.eGui.querySelector('#recordCount');
                this.lbFirstRowOnPage = this.eGui.querySelector('#firstRowOnPage');
                this.lbLastRowOnPage = this.eGui.querySelector('#lastRowOnPage');
                this.ePageRowSummaryPanel = this.eGui.querySelector('#pageRowSummaryPanel');
                var that = this;
                this.btNext.addEventListener('click', function () {
                    that.onBtNext();
                });
                this.btPrevious.addEventListener('click', function () {
                    that.onBtPrevious();
                });
                this.btFirst.addEventListener('click', function () {
                    that.onBtFirst();
                });
                this.btLast.addEventListener('click', function () {
                    that.onBtLast();
                });
            };
            return PaginationController;
        })();
        grid.PaginationController = PaginationController;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var TemplateService = (function () {
            function TemplateService() {
                this.templateCache = {};
                this.waitingCallbacks = {};
            }
            TemplateService.prototype.init = function ($scope) {
                this.$scope = $scope;
            };
            // returns the template if it is loaded, or null if it is not loaded
            // but will call the callback when it is loaded
            TemplateService.prototype.getTemplate = function (url, callback) {
                var templateFromCache = this.templateCache[url];
                if (templateFromCache) {
                    return templateFromCache;
                }
                var callbackList = this.waitingCallbacks[url];
                var that = this;
                if (!callbackList) {
                    // first time this was called, so need a new list for callbacks
                    callbackList = [];
                    this.waitingCallbacks[url] = callbackList;
                    // and also need to do the http request
                    var client = new XMLHttpRequest();
                    client.onload = function () {
                        that.handleHttpResult(this, url);
                    };
                    client.open("GET", url);
                    client.send();
                }
                // add this callback
                if (callback) {
                    callbackList.push(callback);
                }
                // caller needs to wait for template to load, so return null
                return null;
            };
            TemplateService.prototype.handleHttpResult = function (httpResult, url) {
                if (httpResult.status !== 200 || httpResult.response === null) {
                    console.warn('Unable to get template error ' + httpResult.status + ' - ' + url);
                    return;
                }
                // response success, so process it
                this.templateCache[url] = httpResult.response;
                // inform all listeners that this is now in the cache
                var callbacks = this.waitingCallbacks[url];
                for (var i = 0; i < callbacks.length; i++) {
                    var callback = callbacks[i];
                    // we could pass the callback the response, however we know the client of this code
                    // is the cell renderer, and it passes the 'cellRefresh' method in as the callback
                    // which doesn't take any parameters.
                    callback();
                }
                if (this.$scope) {
                    var that = this;
                    setTimeout(function () {
                        that.$scope.$apply();
                    }, 0);
                }
            };
            return TemplateService;
        })();
        grid.TemplateService = TemplateService;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var _ = grid.Utils;
        var BorderLayout = (function () {
            function BorderLayout(params) {
                this.isLayoutPanel = true;
                this.fullHeight = !params.north && !params.south;
                var template;
                if (!params.dontFill) {
                    if (this.fullHeight) {
                        template = '<div style="height: 100%; overflow: auto; position: relative;">' + '<div id="west" style="height: 100%; float: left;"></div>' + '<div id="east" style="height: 100%; float: right;"></div>' + '<div id="center" style="height: 100%;"></div>' + '<div id="overlay" style="position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>' + '</div>';
                    }
                    else {
                        template = '<div style="height: 100%; position: relative;">' + '<div id="north"></div>' + '<div id="centerRow" style="height: 100%; overflow: hidden;">' + '<div id="west" style="height: 100%; float: left;"></div>' + '<div id="east" style="height: 100%; float: right;"></div>' + '<div id="center" style="height: 100%;"></div>' + '</div>' + '<div id="south"></div>' + '<div id="overlay" style="position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>' + '</div>';
                    }
                    this.layoutActive = true;
                }
                else {
                    template = '<div style="position: relative;">' + '<div id="north"></div>' + '<div id="centerRow">' + '<div id="west"></div>' + '<div id="east"></div>' + '<div id="center"></div>' + '</div>' + '<div id="south"></div>' + '<div id="overlay" style="position: absolute; height: 100%; width: 100%; top: 0px; left: 0px;"></div>' + '</div>';
                    this.layoutActive = false;
                }
                this.eGui = _.loadTemplate(template);
                this.id = 'borderLayout';
                if (params.name) {
                    this.id += '_' + params.name;
                }
                this.eGui.setAttribute('id', this.id);
                this.childPanels = [];
                if (params) {
                    this.setupPanels(params);
                }
                this.setOverlayVisible(false);
            }
            BorderLayout.prototype.setupPanels = function (params) {
                this.eNorthWrapper = this.eGui.querySelector('#north');
                this.eSouthWrapper = this.eGui.querySelector('#south');
                this.eEastWrapper = this.eGui.querySelector('#east');
                this.eWestWrapper = this.eGui.querySelector('#west');
                this.eCenterWrapper = this.eGui.querySelector('#center');
                this.eOverlayWrapper = this.eGui.querySelector('#overlay');
                this.eCenterRow = this.eGui.querySelector('#centerRow');
                this.eNorthChildLayout = this.setupPanel(params.north, this.eNorthWrapper);
                this.eSouthChildLayout = this.setupPanel(params.south, this.eSouthWrapper);
                this.eEastChildLayout = this.setupPanel(params.east, this.eEastWrapper);
                this.eWestChildLayout = this.setupPanel(params.west, this.eWestWrapper);
                this.eCenterChildLayout = this.setupPanel(params.center, this.eCenterWrapper);
                this.setupPanel(params.overlay, this.eOverlayWrapper);
            };
            BorderLayout.prototype.setupPanel = function (content, ePanel) {
                if (!ePanel) {
                    return;
                }
                if (content) {
                    if (content.isLayoutPanel) {
                        this.childPanels.push(content);
                        ePanel.appendChild(content.getGui());
                        return content;
                    }
                    else {
                        ePanel.appendChild(content);
                        return null;
                    }
                }
                else {
                    ePanel.parentNode.removeChild(ePanel);
                    return null;
                }
            };
            BorderLayout.prototype.getGui = function () {
                return this.eGui;
            };
            // returns true if any item changed size, otherwise returns false
            BorderLayout.prototype.doLayout = function () {
                if (!_.isVisible(this.eGui)) {
                    return false;
                }
                var atLeastOneChanged = false;
                var childLayouts = [this.eNorthChildLayout, this.eSouthChildLayout, this.eEastChildLayout, this.eWestChildLayout];
                var that = this;
                _.forEach(childLayouts, function (childLayout) {
                    var childChangedSize = that.layoutChild(childLayout);
                    if (childChangedSize) {
                        atLeastOneChanged = true;
                    }
                });
                if (this.layoutActive) {
                    var ourHeightChanged = this.layoutHeight();
                    var ourWidthChanged = this.layoutWidth();
                    if (ourHeightChanged || ourWidthChanged) {
                        atLeastOneChanged = true;
                    }
                }
                var centerChanged = this.layoutChild(this.eCenterChildLayout);
                if (centerChanged) {
                    atLeastOneChanged = true;
                }
                return atLeastOneChanged;
            };
            BorderLayout.prototype.layoutChild = function (childPanel) {
                if (childPanel) {
                    return childPanel.doLayout();
                }
                else {
                    return false;
                }
            };
            BorderLayout.prototype.layoutHeight = function () {
                if (this.fullHeight) {
                    return false;
                }
                var totalHeight = _.offsetHeight(this.eGui);
                var northHeight = _.offsetHeight(this.eNorthWrapper);
                var southHeight = _.offsetHeight(this.eSouthWrapper);
                var centerHeight = totalHeight - northHeight - southHeight;
                if (centerHeight < 0) {
                    centerHeight = 0;
                }
                if (this.centerHeightLastTime !== centerHeight) {
                    this.eCenterRow.style.height = centerHeight + 'px';
                    this.centerHeightLastTime = centerHeight;
                    return true; // return true because there was a change
                }
                else {
                    return false;
                }
            };
            BorderLayout.prototype.layoutWidth = function () {
                var totalWidth = _.offsetWidth(this.eGui);
                var eastWidth = _.offsetWidth(this.eEastWrapper);
                var westWidth = _.offsetWidth(this.eWestWrapper);
                var centerWidth = totalWidth - eastWidth - westWidth;
                if (centerWidth < 0) {
                    centerWidth = 0;
                }
                this.eCenterWrapper.style.width = centerWidth + 'px';
            };
            BorderLayout.prototype.setEastVisible = function (visible) {
                if (this.eEastWrapper) {
                    this.eEastWrapper.style.display = visible ? '' : 'none';
                }
                this.doLayout();
            };
            BorderLayout.prototype.setOverlayVisible = function (visible) {
                if (this.eOverlayWrapper) {
                    this.eOverlayWrapper.style.display = visible ? '' : 'none';
                }
                this.doLayout();
            };
            BorderLayout.prototype.setSouthVisible = function (visible) {
                if (this.eSouthWrapper) {
                    this.eSouthWrapper.style.display = visible ? '' : 'none';
                }
                this.doLayout();
            };
            return BorderLayout;
        })();
        grid.BorderLayout = BorderLayout;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="../layout/borderLayout.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var gridHtml = '<div>' + '<!-- header -->' + '<div class="ag-header">' + '<div class="ag-pinned-header"></div><div class="ag-header-viewport"><div class="ag-header-container"></div></div>' + '</div>' + '<!-- body -->' + '<div class="ag-body">' + '<div class="ag-pinned-cols-viewport">' + '<div class="ag-pinned-cols-container"></div>' + '</div>' + '<div class="ag-body-viewport-wrapper">' + '<div class="ag-body-viewport">' + '<div class="ag-body-container"></div>' + '</div>' + '</div>' + '</div>' + '</div>';
        var gridNoScrollsHtml = '<div>' + '<!-- header -->' + '<div class="ag-header-container"></div>' + '<!-- body -->' + '<div class="ag-body-container"></div>' + '</div>';
        // wrapping in outer div, and wrapper, is needed to center the loading icon
        // The idea for centering came from here: http://www.vanseodesign.com/css/vertical-centering/
        var loadingHtml = '<div class="ag-loading-panel">' + '<div class="ag-loading-wrapper">' + '<span class="ag-loading-center">Loading...</span>' + '</div>' + '</div>';
        var utils = grid.Utils;
        var GridPanel = (function () {
            function GridPanel(gridOptionsWrapper) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                // makes code below more readable if we pull 'forPrint' out
                this.forPrint = this.gridOptionsWrapper.isDontUseScrolls();
                this.setupComponents();
                this.scrollWidth = utils.getScrollbarWidth();
            }
            GridPanel.prototype.setupComponents = function () {
                if (this.forPrint) {
                    this.eRoot = utils.loadTemplate(gridNoScrollsHtml);
                    utils.addCssClass(this.eRoot, 'ag-root ag-no-scrolls');
                }
                else {
                    this.eRoot = utils.loadTemplate(gridHtml);
                    utils.addCssClass(this.eRoot, 'ag-root ag-scrolls');
                }
                this.findElements();
                this.layout = new grid.BorderLayout({
                    overlay: utils.loadTemplate(loadingHtml),
                    center: this.eRoot,
                    dontFill: this.forPrint,
                    name: 'eGridPanel'
                });
                this.addScrollListener();
            };
            GridPanel.prototype.ensureIndexVisible = function (index) {
                var lastRow = this.rowModel.getVirtualRowCount();
                if (typeof index !== 'number' || index < 0 || index >= lastRow) {
                    console.warn('invalid row index for ensureIndexVisible: ' + index);
                    return;
                }
                var rowHeight = this.gridOptionsWrapper.getRowHeight();
                var rowTopPixel = rowHeight * index;
                var rowBottomPixel = rowTopPixel + rowHeight;
                var viewportTopPixel = this.eBodyViewport.scrollTop;
                var viewportHeight = this.eBodyViewport.offsetHeight;
                var scrollShowing = this.eBodyViewport.clientWidth < this.eBodyViewport.scrollWidth;
                if (scrollShowing) {
                    viewportHeight -= this.scrollWidth;
                }
                var viewportBottomPixel = viewportTopPixel + viewportHeight;
                var viewportScrolledPastRow = viewportTopPixel > rowTopPixel;
                var viewportScrolledBeforeRow = viewportBottomPixel < rowBottomPixel;
                if (viewportScrolledPastRow) {
                    // if row is before, scroll up with row at top
                    this.eBodyViewport.scrollTop = rowTopPixel;
                }
                else if (viewportScrolledBeforeRow) {
                    // if row is below, scroll down with row at bottom
                    var newScrollPosition = rowBottomPixel - viewportHeight;
                    this.eBodyViewport.scrollTop = newScrollPosition;
                }
                // otherwise, row is already in view, so do nothing
            };
            GridPanel.prototype.ensureColIndexVisible = function (index) {
                if (typeof index !== 'number') {
                    console.warn('col index must be a number: ' + index);
                    return;
                }
                var columns = this.columnModel.getDisplayedColumns();
                if (typeof index !== 'number' || index < 0 || index >= columns.length) {
                    console.warn('invalid col index for ensureColIndexVisible: ' + index + ', should be between 0 and ' + (columns.length - 1));
                    return;
                }
                var column = columns[index];
                var pinnedColCount = this.gridOptionsWrapper.getPinnedColCount();
                if (index < pinnedColCount) {
                    console.warn('invalid col index for ensureColIndexVisible: ' + index + ', scrolling to a pinned col makes no sense');
                    return;
                }
                // sum up all col width to the let to get the start pixel
                var colLeftPixel = 0;
                for (var i = pinnedColCount; i < index; i++) {
                    colLeftPixel += columns[i].actualWidth;
                }
                var colRightPixel = colLeftPixel + column.actualWidth;
                var viewportLeftPixel = this.eBodyViewport.scrollLeft;
                var viewportWidth = this.eBodyViewport.offsetWidth;
                var scrollShowing = this.eBodyViewport.clientHeight < this.eBodyViewport.scrollHeight;
                if (scrollShowing) {
                    viewportWidth -= this.scrollWidth;
                }
                var viewportRightPixel = viewportLeftPixel + viewportWidth;
                var viewportScrolledPastCol = viewportLeftPixel > colLeftPixel;
                var viewportScrolledBeforeCol = viewportRightPixel < colRightPixel;
                if (viewportScrolledPastCol) {
                    // if viewport's left side is after col's left side, scroll right to pull col into viewport at left
                    this.eBodyViewport.scrollLeft = colLeftPixel;
                }
                else if (viewportScrolledBeforeCol) {
                    // if viewport's right side is before col's right side, scroll left to pull col into viewport at right
                    var newScrollPosition = colRightPixel - viewportWidth;
                    this.eBodyViewport.scrollLeft = newScrollPosition;
                }
                // otherwise, col is already in view, so do nothing
            };
            GridPanel.prototype.showLoading = function (loading) {
                this.layout.setOverlayVisible(loading);
            };
            GridPanel.prototype.getWidthForSizeColsToFit = function () {
                var availableWidth = this.eBody.clientWidth;
                var scrollShowing = this.eBodyViewport.clientHeight < this.eBodyViewport.scrollHeight;
                if (scrollShowing) {
                    availableWidth -= this.scrollWidth;
                }
                return availableWidth;
            };
            GridPanel.prototype.init = function (columnModel, rowRenderer) {
                this.columnModel = columnModel;
                this.rowRenderer = rowRenderer;
            };
            GridPanel.prototype.setRowModel = function (rowModel) {
                this.rowModel = rowModel;
            };
            GridPanel.prototype.getBodyContainer = function () {
                return this.eBodyContainer;
            };
            GridPanel.prototype.getBodyViewport = function () {
                return this.eBodyViewport;
            };
            GridPanel.prototype.getPinnedColsContainer = function () {
                return this.ePinnedColsContainer;
            };
            GridPanel.prototype.getHeaderContainer = function () {
                return this.eHeaderContainer;
            };
            GridPanel.prototype.getRoot = function () {
                return this.eRoot;
            };
            GridPanel.prototype.getPinnedHeader = function () {
                return this.ePinnedHeader;
            };
            GridPanel.prototype.getHeader = function () {
                return this.eHeader;
            };
            GridPanel.prototype.getRowsParent = function () {
                return this.eParentOfRows;
            };
            GridPanel.prototype.findElements = function () {
                if (this.forPrint) {
                    this.eHeaderContainer = this.eRoot.querySelector(".ag-header-container");
                    this.eBodyContainer = this.eRoot.querySelector(".ag-body-container");
                    // for no-scrolls, all rows live in the body container
                    this.eParentOfRows = this.eBodyContainer;
                }
                else {
                    this.eBody = this.eRoot.querySelector(".ag-body");
                    this.eBodyContainer = this.eRoot.querySelector(".ag-body-container");
                    this.eBodyViewport = this.eRoot.querySelector(".ag-body-viewport");
                    this.eBodyViewportWrapper = this.eRoot.querySelector(".ag-body-viewport-wrapper");
                    this.ePinnedColsContainer = this.eRoot.querySelector(".ag-pinned-cols-container");
                    this.ePinnedColsViewport = this.eRoot.querySelector(".ag-pinned-cols-viewport");
                    this.ePinnedHeader = this.eRoot.querySelector(".ag-pinned-header");
                    this.eHeader = this.eRoot.querySelector(".ag-header");
                    this.eHeaderContainer = this.eRoot.querySelector(".ag-header-container");
                    // for scrolls, all rows live in eBody (containing pinned and normal body)
                    this.eParentOfRows = this.eBody;
                }
            };
            GridPanel.prototype.setBodyContainerWidth = function () {
                var mainRowWidth = this.columnModel.getBodyContainerWidth() + "px";
                this.eBodyContainer.style.width = mainRowWidth;
            };
            GridPanel.prototype.setPinnedColContainerWidth = function () {
                var pinnedColWidth = this.columnModel.getPinnedContainerWidth() + "px";
                this.ePinnedColsContainer.style.width = pinnedColWidth;
                this.eBodyViewportWrapper.style.marginLeft = pinnedColWidth;
            };
            GridPanel.prototype.showPinnedColContainersIfNeeded = function () {
                // no need to do this if not using scrolls
                if (this.forPrint) {
                    return;
                }
                var showingPinnedCols = this.gridOptionsWrapper.getPinnedColCount() > 0;
                //some browsers had layout issues with the blank divs, so if blank,
                //we don't display them
                if (showingPinnedCols) {
                    this.ePinnedHeader.style.display = 'inline-block';
                    this.ePinnedColsViewport.style.display = 'inline';
                }
                else {
                    this.ePinnedHeader.style.display = 'none';
                    this.ePinnedColsViewport.style.display = 'none';
                }
            };
            GridPanel.prototype.setHeaderHeight = function () {
                var headerHeight = this.gridOptionsWrapper.getHeaderHeight();
                var headerHeightPixels = headerHeight + 'px';
                if (this.forPrint) {
                    this.eHeaderContainer.style['height'] = headerHeightPixels;
                }
                else {
                    this.eHeader.style['height'] = headerHeightPixels;
                    this.eBody.style['paddingTop'] = headerHeightPixels;
                }
            };
            // see if a grey box is needed at the bottom of the pinned col
            GridPanel.prototype.setPinnedColHeight = function () {
                if (!this.forPrint) {
                    var bodyHeight = this.eBodyViewport.offsetHeight;
                    this.ePinnedColsViewport.style.height = bodyHeight + "px";
                }
            };
            GridPanel.prototype.addScrollListener = function () {
                // if printing, then no scrolling, so no point in listening for scroll events
                if (this.forPrint) {
                    return;
                }
                var that = this;
                var lastLeftPosition = -1;
                var lastTopPosition = -1;
                this.eBodyViewport.addEventListener("scroll", function () {
                    var newLeftPosition = that.eBodyViewport.scrollLeft;
                    var newTopPosition = that.eBodyViewport.scrollTop;
                    if (newLeftPosition !== lastLeftPosition) {
                        lastLeftPosition = newLeftPosition;
                        that.scrollHeader(newLeftPosition);
                    }
                    if (newTopPosition !== lastTopPosition) {
                        lastTopPosition = newTopPosition;
                        that.scrollPinned(newTopPosition);
                        that.rowRenderer.drawVirtualRows();
                    }
                });
                this.ePinnedColsViewport.addEventListener("scroll", function () {
                    // this means the pinned panel was moved, which can only
                    // happen when the user is navigating in the pinned container
                    // as the pinned col should never scroll. so we rollback
                    // the scroll on the pinned.
                    that.ePinnedColsViewport.scrollTop = 0;
                });
            };
            GridPanel.prototype.scrollHeader = function (bodyLeftPosition) {
                // this.eHeaderContainer.style.transform = 'translate3d(' + -bodyLeftPosition + "px,0,0)";
                this.eHeaderContainer.style.left = -bodyLeftPosition + "px";
            };
            GridPanel.prototype.scrollPinned = function (bodyTopPosition) {
                // this.ePinnedColsContainer.style.transform = 'translate3d(0,' + -bodyTopPosition + "px,0)";
                this.ePinnedColsContainer.style.top = -bodyTopPosition + "px";
            };
            return GridPanel;
        })();
        grid.GridPanel = GridPanel;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var DragAndDropService = (function () {
            function DragAndDropService() {
                // need to clean this up, add to 'finished' logic in grid
                document.addEventListener('mouseup', this.stopDragging.bind(this));
            }
            DragAndDropService.getInstance = function () {
                if (!this.theInstance) {
                    this.theInstance = new DragAndDropService();
                }
                return this.theInstance;
            };
            DragAndDropService.prototype.stopDragging = function () {
                if (this.dragItem) {
                    this.setDragCssClasses(this.dragItem.eDragSource, false);
                    this.dragItem = null;
                }
            };
            DragAndDropService.prototype.setDragCssClasses = function (eListItem, dragging) {
                utils.addOrRemoveCssClass(eListItem, 'ag-dragging', dragging);
                utils.addOrRemoveCssClass(eListItem, 'ag-not-dragging', !dragging);
            };
            DragAndDropService.prototype.addDragSource = function (eDragSource, dragSourceCallback) {
                this.setDragCssClasses(eDragSource, false);
                eDragSource.addEventListener('mousedown', this.onMouseDownDragSource.bind(this, eDragSource, dragSourceCallback));
            };
            DragAndDropService.prototype.onMouseDownDragSource = function (eDragSource, dragSourceCallback) {
                if (this.dragItem) {
                    this.stopDragging();
                }
                var data;
                if (dragSourceCallback.getData) {
                    data = dragSourceCallback.getData();
                }
                var containerId;
                if (dragSourceCallback.getContainerId) {
                    containerId = dragSourceCallback.getContainerId();
                }
                this.dragItem = {
                    eDragSource: eDragSource,
                    data: data,
                    containerId: containerId
                };
                this.setDragCssClasses(this.dragItem.eDragSource, true);
            };
            DragAndDropService.prototype.addDropTarget = function (eDropTarget, dropTargetCallback) {
                var mouseIn = false;
                var acceptDrag = false;
                var that = this;
                eDropTarget.addEventListener('mouseover', function () {
                    if (!mouseIn) {
                        mouseIn = true;
                        if (that.dragItem) {
                            acceptDrag = dropTargetCallback.acceptDrag(that.dragItem);
                        }
                        else {
                            acceptDrag = false;
                        }
                    }
                });
                eDropTarget.addEventListener('mouseout', function () {
                    if (acceptDrag) {
                        dropTargetCallback.noDrop();
                    }
                    mouseIn = false;
                    acceptDrag = false;
                });
                eDropTarget.addEventListener('mouseup', function () {
                    // dragItem should never be null, checking just in case
                    if (acceptDrag && that.dragItem) {
                        dropTargetCallback.drop(that.dragItem);
                    }
                });
            };
            return DragAndDropService;
        })();
        grid.DragAndDropService = DragAndDropService;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="../dragAndDrop/dragAndDropService" />
/// <amd-dependency path="text!agList.html"/>
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        //var template = require('./agList.html');
        var utils = grid.Utils;
        var dragAndDropService = grid.DragAndDropService.getInstance();
        var template = '<div class="ag-list-selection">' + '<div>' + '<div ag-repeat class="ag-list-item">' + '</div>' + '</div>' + '</div>';
        var NOT_DROP_TARGET = 0;
        var DROP_TARGET_ABOVE = 1;
        var DROP_TARGET_BELOW = -11;
        var AgList = (function () {
            function AgList() {
                this.setupComponents();
                this.uniqueId = 'CheckboxSelection-' + Math.random();
                this.modelChangedListeners = [];
                this.itemSelectedListeners = [];
                this.beforeDropListeners = [];
                this.dragSources = [];
                this.setupAsDropTarget();
            }
            AgList.prototype.setEmptyMessage = function (emptyMessage) {
                this.emptyMessage = emptyMessage;
                this.refreshView();
            };
            AgList.prototype.getUniqueId = function () {
                return this.uniqueId;
            };
            AgList.prototype.addStyles = function (styles) {
                utils.addStylesToElement(this.eGui, styles);
            };
            AgList.prototype.addCssClass = function (cssClass) {
                utils.addCssClass(this.eGui, cssClass);
            };
            AgList.prototype.addDragSource = function (dragSource) {
                this.dragSources.push(dragSource);
            };
            AgList.prototype.addModelChangedListener = function (listener) {
                this.modelChangedListeners.push(listener);
            };
            AgList.prototype.addItemSelectedListener = function (listener) {
                this.itemSelectedListeners.push(listener);
            };
            AgList.prototype.addBeforeDropListener = function (listener) {
                this.beforeDropListeners.push(listener);
            };
            AgList.prototype.fireModelChanged = function () {
                for (var i = 0; i < this.modelChangedListeners.length; i++) {
                    this.modelChangedListeners[i]();
                }
            };
            AgList.prototype.fireItemSelected = function (item) {
                for (var i = 0; i < this.itemSelectedListeners.length; i++) {
                    this.itemSelectedListeners[i](item);
                }
            };
            AgList.prototype.fireBeforeDrop = function (item) {
                for (var i = 0; i < this.beforeDropListeners.length; i++) {
                    this.beforeDropListeners[i](item);
                }
            };
            AgList.prototype.setupComponents = function () {
                this.eGui = utils.loadTemplate(template);
                this.eFilterValueTemplate = this.eGui.querySelector("[ag-repeat]");
                this.eListParent = this.eFilterValueTemplate.parentNode;
                utils.removeAllChildren(this.eListParent);
            };
            AgList.prototype.setModel = function (model) {
                this.model = model;
                this.refreshView();
            };
            AgList.prototype.getModel = function () {
                return this.model;
            };
            AgList.prototype.setCellRenderer = function (cellRenderer) {
                this.cellRenderer = cellRenderer;
            };
            AgList.prototype.refreshView = function () {
                utils.removeAllChildren(this.eListParent);
                if (this.model && this.model.length > 0) {
                    this.insertRows();
                }
                else {
                    this.insertBlankMessage();
                }
            };
            AgList.prototype.insertRows = function () {
                for (var i = 0; i < this.model.length; i++) {
                    var item = this.model[i];
                    //var text = this.getText(item);
                    //var selected = this.isSelected(item);
                    var eListItem = this.eFilterValueTemplate.cloneNode(true);
                    if (this.cellRenderer) {
                        var params = { value: item };
                        utils.useRenderer(eListItem, this.cellRenderer, params);
                    }
                    else {
                        eListItem.innerHTML = item;
                    }
                    eListItem.addEventListener('click', this.fireItemSelected.bind(this, item));
                    this.addDragAndDropToListItem(eListItem, item);
                    this.eListParent.appendChild(eListItem);
                }
            };
            AgList.prototype.insertBlankMessage = function () {
                if (this.emptyMessage) {
                    var eMessage = document.createElement('div');
                    eMessage.style.color = 'grey';
                    eMessage.style.padding = '4px';
                    eMessage.style.textAlign = 'center';
                    eMessage.innerHTML = this.emptyMessage;
                    this.eListParent.appendChild(eMessage);
                }
            };
            AgList.prototype.setupAsDropTarget = function () {
                dragAndDropService.addDropTarget(this.eGui, {
                    acceptDrag: this.externalAcceptDrag.bind(this),
                    drop: this.externalDrop.bind(this),
                    noDrop: this.externalNoDrop.bind(this)
                });
            };
            AgList.prototype.externalAcceptDrag = function (dragEvent) {
                var allowedSource = this.dragSources.indexOf(dragEvent.containerId) >= 0;
                if (!allowedSource) {
                    return false;
                }
                var alreadyHaveCol = this.model.indexOf(dragEvent.data) >= 0;
                if (alreadyHaveCol) {
                    return false;
                }
                this.eGui.style.backgroundColor = 'lightgreen';
                return true;
            };
            AgList.prototype.externalDrop = function (dragEvent) {
                var newListItem = dragEvent.data;
                this.fireBeforeDrop(newListItem);
                this.addItemToList(newListItem);
                this.eGui.style.backgroundColor = '';
            };
            AgList.prototype.externalNoDrop = function () {
                this.eGui.style.backgroundColor = '';
            };
            AgList.prototype.addItemToList = function (newItem) {
                this.model.push(newItem);
                this.refreshView();
                this.fireModelChanged();
            };
            AgList.prototype.addDragAndDropToListItem = function (eListItem, item) {
                var that = this;
                dragAndDropService.addDragSource(eListItem, {
                    getData: function () {
                        return item;
                    },
                    getContainerId: function () {
                        return that.uniqueId;
                    }
                });
                dragAndDropService.addDropTarget(eListItem, {
                    acceptDrag: function (dragItem) {
                        return that.internalAcceptDrag(item, dragItem, eListItem);
                    },
                    drop: function (dragItem) {
                        that.internalDrop(item, dragItem.data);
                    },
                    noDrop: function () {
                        that.internalNoDrop(eListItem);
                    }
                });
            };
            AgList.prototype.internalAcceptDrag = function (targetColumn, dragItem, eListItem) {
                var result = dragItem.data !== targetColumn && dragItem.containerId === this.uniqueId;
                if (result) {
                    if (this.dragAfterThisItem(targetColumn, dragItem.data)) {
                        this.setDropCssClasses(eListItem, DROP_TARGET_ABOVE);
                    }
                    else {
                        this.setDropCssClasses(eListItem, DROP_TARGET_BELOW);
                    }
                }
                return result;
            };
            AgList.prototype.internalDrop = function (targetColumn, draggedColumn) {
                var oldIndex = this.model.indexOf(draggedColumn);
                var newIndex = this.model.indexOf(targetColumn);
                this.model.splice(oldIndex, 1);
                this.model.splice(newIndex, 0, draggedColumn);
                this.refreshView();
                this.fireModelChanged();
            };
            AgList.prototype.internalNoDrop = function (eListItem) {
                this.setDropCssClasses(eListItem, NOT_DROP_TARGET);
            };
            AgList.prototype.dragAfterThisItem = function (targetColumn, draggedColumn) {
                return this.model.indexOf(targetColumn) < this.model.indexOf(draggedColumn);
            };
            AgList.prototype.setDropCssClasses = function (eListItem, state) {
                utils.addOrRemoveCssClass(eListItem, 'ag-not-drop-target', state === NOT_DROP_TARGET);
                utils.addOrRemoveCssClass(eListItem, 'ag-drop-target-above', state === DROP_TARGET_ABOVE);
                utils.addOrRemoveCssClass(eListItem, 'ag-drop-target-below', state === DROP_TARGET_BELOW);
            };
            AgList.prototype.getGui = function () {
                return this.eGui;
            };
            return AgList;
        })();
        grid.AgList = AgList;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../widgets/agList.ts" />
/// <reference path="../utils.ts" />
/// <reference path="../svgFactory.ts" />
/// <reference path="../layout/BorderLayout.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var svgFactory = grid.SvgFactory.getInstance();
        var ColumnSelectionPanel = (function () {
            function ColumnSelectionPanel(columnController, gridOptionsWrapper) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.setupComponents();
                this.columnController = columnController;
                var that = this;
                this.columnController.addListener({
                    columnsChanged: that.columnsChanged.bind(that)
                });
            }
            ColumnSelectionPanel.prototype.columnsChanged = function (newColumns) {
                this.cColumnList.setModel(newColumns);
            };
            ColumnSelectionPanel.prototype.getDragSource = function () {
                return this.cColumnList.getUniqueId();
            };
            ColumnSelectionPanel.prototype.columnCellRenderer = function (params) {
                var column = params.value;
                var colDisplayName = this.columnController.getDisplayNameForCol(column);
                var eResult = document.createElement('span');
                var eVisibleIcons = document.createElement('span');
                utils.addCssClass(eVisibleIcons, 'ag-visible-icons');
                var eShowing = utils.createIcon('columnVisible', this.gridOptionsWrapper, column, svgFactory.createColumnShowingSvg);
                var eHidden = utils.createIcon('columnHidden', this.gridOptionsWrapper, column, svgFactory.createColumnHiddenSvg);
                eVisibleIcons.appendChild(eShowing);
                eVisibleIcons.appendChild(eHidden);
                eShowing.style.display = column.visible ? '' : 'none';
                eHidden.style.display = column.visible ? 'none' : '';
                eResult.appendChild(eVisibleIcons);
                var eValue = document.createElement('span');
                eValue.innerHTML = colDisplayName;
                eResult.appendChild(eValue);
                if (!column.visible) {
                    utils.addCssClass(eResult, 'ag-column-not-visible');
                }
                // change visible if use clicks the visible icon, or if row is double clicked
                eVisibleIcons.addEventListener('click', showEventListener);
                var that = this;
                function showEventListener() {
                    column.visible = !column.visible;
                    that.cColumnList.refreshView();
                    that.columnController.onColumnStateChanged();
                }
                return eResult;
            };
            ColumnSelectionPanel.prototype.setupComponents = function () {
                this.cColumnList = new grid.AgList();
                this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this));
                this.cColumnList.addStyles({ height: '100%', overflow: 'auto' });
                var that = this;
                this.cColumnList.addModelChangedListener(function () {
                    that.columnController.onColumnStateChanged();
                });
                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
                var columnsLocalText = localeTextFunc('columns', 'Columns');
                var eNorthPanel = document.createElement('div');
                eNorthPanel.innerHTML = '<div style="text-align: center;">' + columnsLocalText + '</div>';
                this.layout = new grid.BorderLayout({
                    center: this.cColumnList.getGui(),
                    north: eNorthPanel
                });
            };
            // not sure if this is called anywhere
            ColumnSelectionPanel.prototype.setSelected = function (column, selected) {
                column.visible = selected;
                this.columnController.onColumnStateChanged();
            };
            ColumnSelectionPanel.prototype.getGui = function () {
                return this.eRootPanel.getGui();
            };
            return ColumnSelectionPanel;
        })();
        grid.ColumnSelectionPanel = ColumnSelectionPanel;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../widgets/agList.ts" />
/// <reference path="../utils.ts" />
/// <reference path="../svgFactory.ts" />
/// <reference path="../layout/BorderLayout.ts" />
/// <reference path="../constants.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var svgFactory = grid.SvgFactory.getInstance();
        var constants = grid.Constants;
        var GroupSelectionPanel = (function () {
            function GroupSelectionPanel(columnController, inMemoryRowController, gridOptionsWrapper) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.setupComponents();
                this.columnController = columnController;
                this.inMemoryRowController = inMemoryRowController;
                var that = this;
                this.columnController.addListener({
                    columnsChanged: that.columnsChanged.bind(that)
                });
            }
            GroupSelectionPanel.prototype.columnsChanged = function (newColumns, newGroupedColumns) {
                this.cColumnList.setModel(newGroupedColumns);
            };
            GroupSelectionPanel.prototype.addDragSource = function (dragSource) {
                this.cColumnList.addDragSource(dragSource);
            };
            GroupSelectionPanel.prototype.columnCellRenderer = function (params) {
                var column = params.value;
                var colDisplayName = this.columnController.getDisplayNameForCol(column);
                var eResult = document.createElement('span');
                var eRemove = utils.createIcon('columnRemoveFromGroup', this.gridOptionsWrapper, column, svgFactory.createArrowUpSvg);
                utils.addCssClass(eRemove, 'ag-visible-icons');
                eResult.appendChild(eRemove);
                var that = this;
                eRemove.addEventListener('click', function () {
                    var model = that.cColumnList.getModel();
                    model.splice(model.indexOf(column), 1);
                    that.cColumnList.setModel(model);
                    that.onGroupingChanged();
                });
                var eValue = document.createElement('span');
                eValue.innerHTML = colDisplayName;
                eResult.appendChild(eValue);
                return eResult;
            };
            GroupSelectionPanel.prototype.setupComponents = function () {
                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
                var columnsLocalText = localeTextFunc('pivotedColumns', 'Pivoted Columns');
                var pivotedColumnsEmptyMessage = localeTextFunc('pivotedColumnsEmptyMessage', 'Drag columns from above to pivot');
                this.cColumnList = new grid.AgList();
                this.cColumnList.setCellRenderer(this.columnCellRenderer.bind(this));
                this.cColumnList.addModelChangedListener(this.onGroupingChanged.bind(this));
                this.cColumnList.setEmptyMessage(pivotedColumnsEmptyMessage);
                this.cColumnList.addStyles({ height: '100%', overflow: 'auto' });
                var eNorthPanel = document.createElement('div');
                eNorthPanel.style.paddingTop = '10px';
                eNorthPanel.innerHTML = '<div style="text-align: center;">' + columnsLocalText + '</div>';
                this.layout = new grid.BorderLayout({
                    center: this.cColumnList.getGui(),
                    north: eNorthPanel
                });
            };
            GroupSelectionPanel.prototype.onGroupingChanged = function () {
                this.inMemoryRowController.doGrouping();
                this.inMemoryRowController.updateModel(constants.STEP_EVERYTHING);
                this.columnController.onColumnStateChanged();
            };
            return GroupSelectionPanel;
        })();
        grid.GroupSelectionPanel = GroupSelectionPanel;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="./agList.ts" />
/// <reference path="../svgFactory.ts" />
/// <reference path="../widgets/agPopupService.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var svgFactory = grid.SvgFactory.getInstance();
        var agPopupService = grid.PopupService.getInstance();
        var AgDropdownList = (function () {
            function AgDropdownList() {
                this.setupComponents();
                this.itemSelectedListeners = [];
            }
            AgDropdownList.prototype.setWidth = function (width) {
                this.eValue.style.width = width + 'px';
                this.agList.addStyles({ width: width + 'px' });
            };
            AgDropdownList.prototype.addItemSelectedListener = function (listener) {
                this.itemSelectedListeners.push(listener);
            };
            AgDropdownList.prototype.fireItemSelected = function (item) {
                for (var i = 0; i < this.itemSelectedListeners.length; i++) {
                    this.itemSelectedListeners[i](item);
                }
            };
            AgDropdownList.prototype.setupComponents = function () {
                this.eGui = document.createElement('span');
                this.eValue = document.createElement('span');
                this.eGui.appendChild(this.eValue);
                this.agList = new grid.AgList();
                this.eValue.addEventListener('click', this.onClick.bind(this));
                this.agList.addItemSelectedListener(this.itemSelected.bind(this));
                this.agList.addCssClass('ag-popup-list');
                utils.addStylesToElement(this.eValue, {
                    border: '1px solid darkgrey',
                    display: 'inline-block',
                    paddingLeft: 2
                });
                utils.addStylesToElement(this.eGui, { position: 'relative' });
                this.agList.addStyles({
                    display: 'inline-block',
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    backgroudColor: 'white'
                });
            };
            AgDropdownList.prototype.itemSelected = function (item) {
                this.setSelected(item);
                if (this.hidePopupCallback) {
                    this.hidePopupCallback();
                }
                this.fireItemSelected(item);
            };
            AgDropdownList.prototype.onClick = function () {
                var agListGui = this.agList.getGui();
                agPopupService.positionPopup(this.eGui, agListGui, -1);
                this.hidePopupCallback = agPopupService.addAsModalPopup(agListGui);
            };
            AgDropdownList.prototype.getGui = function () {
                return this.eGui;
            };
            AgDropdownList.prototype.setSelected = function (item) {
                this.selectedItem = item;
                this.refreshView();
            };
            AgDropdownList.prototype.setCellRenderer = function (cellRenderer) {
                this.agList.setCellRenderer(cellRenderer);
                this.cellRenderer = cellRenderer;
            };
            AgDropdownList.prototype.refreshView = function () {
                utils.removeAllChildren(this.eValue);
                if (this.selectedItem) {
                    if (this.cellRenderer) {
                        var params = { value: this.selectedItem };
                        utils.useRenderer(this.eValue, this.cellRenderer, params);
                    }
                    else {
                        this.eValue.appendChild(document.createTextNode(this.selectedItem));
                    }
                }
                var eDownIcon = svgFactory.createSmallArrowDownSvg();
                eDownIcon.style.float = 'right';
                eDownIcon.style.marginTop = '6';
                eDownIcon.style.marginRight = '2';
                this.eValue.appendChild(eDownIcon);
            };
            AgDropdownList.prototype.setModel = function (model) {
                this.agList.setModel(model);
            };
            return AgDropdownList;
        })();
        grid.AgDropdownList = AgDropdownList;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../widgets/agList.ts" />
/// <reference path="../constants.ts" />
/// <reference path="../utils.ts" />
/// <reference path="../layout/borderLayout.ts" />
/// <reference path="../svgFactory.ts" />
/// <reference path="../widgets/agDropdownList.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var svgFactory = grid.SvgFactory.getInstance();
        var constants = grid.Constants;
        var utils = grid.Utils;
        var ValuesSelectionPanel = (function () {
            function ValuesSelectionPanel(columnController, gridOptionsWrapper, api) {
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.setupComponents();
                this.columnController = columnController;
                this.api = api;
                var that = this;
                this.columnController.addListener({
                    columnsChanged: that.columnsChanged.bind(that)
                });
            }
            ValuesSelectionPanel.prototype.columnsChanged = function (newColumns, newGroupedColumns, newValuesColumns) {
                this.cColumnList.setModel(newValuesColumns);
            };
            ValuesSelectionPanel.prototype.addDragSource = function (dragSource) {
                this.cColumnList.addDragSource(dragSource);
            };
            ValuesSelectionPanel.prototype.cellRenderer = function (params) {
                var column = params.value;
                var colDisplayName = this.columnController.getDisplayNameForCol(column);
                var eResult = document.createElement('span');
                var eRemove = utils.createIcon('columnRemoveFromGroup', this.gridOptionsWrapper, column, svgFactory.createArrowUpSvg);
                utils.addCssClass(eRemove, 'ag-visible-icons');
                eResult.appendChild(eRemove);
                var that = this;
                eRemove.addEventListener('click', function () {
                    var model = that.cColumnList.getModel();
                    model.splice(model.indexOf(column), 1);
                    that.cColumnList.setModel(model);
                    that.onValuesChanged();
                });
                var agValueType = new grid.AgDropdownList();
                agValueType.setModel([constants.SUM, constants.MIN, constants.MAX]);
                agValueType.setSelected(column.aggFunc);
                agValueType.setWidth(45);
                agValueType.addItemSelectedListener(function (item) {
                    column.aggFunc = item;
                    that.onValuesChanged();
                });
                eResult.appendChild(agValueType.getGui());
                var eValue = document.createElement('span');
                eValue.innerHTML = colDisplayName;
                eValue.style.paddingLeft = '2px';
                eResult.appendChild(eValue);
                return eResult;
            };
            ValuesSelectionPanel.prototype.setupComponents = function () {
                var localeTextFunc = this.gridOptionsWrapper.getLocaleTextFunc();
                var columnsLocalText = localeTextFunc('valueColumns', 'Value Columns');
                var emptyMessage = localeTextFunc('valueColumnsEmptyMessage', 'Drag columns from above to create values');
                this.cColumnList = new grid.AgList();
                this.cColumnList.setCellRenderer(this.cellRenderer.bind(this));
                this.cColumnList.addModelChangedListener(this.onValuesChanged.bind(this));
                this.cColumnList.setEmptyMessage(emptyMessage);
                this.cColumnList.addStyles({ height: '100%', overflow: 'auto' });
                this.cColumnList.addBeforeDropListener(this.beforeDropListener.bind(this));
                var eNorthPanel = document.createElement('div');
                eNorthPanel.style.paddingTop = '10px';
                eNorthPanel.innerHTML = '<div style="text-align: center;">' + columnsLocalText + '</div>';
                this.layout = new grid.BorderLayout({
                    center: this.cColumnList.getGui(),
                    north: eNorthPanel
                });
            };
            ValuesSelectionPanel.prototype.beforeDropListener = function (newItem) {
                if (!newItem.aggFunc) {
                    newItem.aggFunc = constants.SUM;
                }
            };
            ValuesSelectionPanel.prototype.onValuesChanged = function () {
                this.api.recomputeAggregates();
            };
            return ValuesSelectionPanel;
        })();
        grid.ValuesSelectionPanel = ValuesSelectionPanel;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var VerticalStack = (function () {
            function VerticalStack() {
                this.isLayoutPanel = true;
                this.childPanels = [];
                this.eGui = document.createElement('div');
                this.eGui.style.height = '100%';
            }
            VerticalStack.prototype.addPanel = function (panel, height) {
                var component;
                if (panel.isLayoutPanel) {
                    this.childPanels.push(panel);
                    component = panel.getGui();
                }
                else {
                    component = panel;
                }
                if (height) {
                    component.style.height = height;
                }
                this.eGui.appendChild(component);
            };
            VerticalStack.prototype.getGui = function () {
                return this.eGui;
            };
            VerticalStack.prototype.doLayout = function () {
                for (var i = 0; i < this.childPanels.length; i++) {
                    this.childPanels[i].doLayout();
                }
            };
            return VerticalStack;
        })();
        grid.VerticalStack = VerticalStack;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="../utils.ts" />
/// <reference path="./columnSelectionPanel.ts" />
/// <reference path="./groupSelectionPanel.ts" />
/// <reference path="./valuesSelectionPanel.ts" />
/// <reference path="../layout/verticalStack.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var utils = grid.Utils;
        var ToolPanel = (function () {
            function ToolPanel() {
                this.layout = new grid.VerticalStack();
            }
            ToolPanel.prototype.init = function (columnController, inMemoryRowController, gridOptionsWrapper, api) {
                var suppressPivotAndValues = gridOptionsWrapper.isToolPanelSuppressPivot();
                var suppressValues = gridOptionsWrapper.isToolPanelSuppressValues();
                var showPivot = !suppressPivotAndValues;
                var showValues = !suppressPivotAndValues && !suppressValues;
                // top list, column reorder and visibility
                var columnSelectionPanel = new grid.ColumnSelectionPanel(columnController, gridOptionsWrapper);
                var heightColumnSelection = suppressPivotAndValues ? '100%' : '50%';
                this.layout.addPanel(columnSelectionPanel.layout, heightColumnSelection);
                var dragSource = columnSelectionPanel.getDragSource();
                if (showValues) {
                    var valuesSelectionPanel = new grid.ValuesSelectionPanel(columnController, gridOptionsWrapper, api);
                    this.layout.addPanel(valuesSelectionPanel.layout, '25%');
                    valuesSelectionPanel.addDragSource(dragSource);
                }
                if (showPivot) {
                    var groupSelectionPanel = new grid.GroupSelectionPanel(columnController, inMemoryRowController, gridOptionsWrapper);
                    var heightPivotSelection = showValues ? '25%' : '50%';
                    this.layout.addPanel(groupSelectionPanel.layout, heightPivotSelection);
                    groupSelectionPanel.addDragSource(dragSource);
                }
                var eGui = this.layout.getGui();
                utils.addCssClass(eGui, 'ag-tool-panel-container');
            };
            return ToolPanel;
        })();
        grid.ToolPanel = ToolPanel;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="grid.ts" />
/// <reference path="rowRenderer.ts" />
/// <reference path="headerRenderer.ts" />
var awk;
(function (awk) {
    var grid;
    (function (_grid) {
        var GridApi = (function () {
            function GridApi(grid, rowRenderer, headerRenderer, filterManager, columnController, inMemoryRowController, selectionController, gridOptionsWrapper, gridPanel) {
                this.grid = grid;
                this.rowRenderer = rowRenderer;
                this.headerRenderer = headerRenderer;
                this.filterManager = filterManager;
                this.columnController = columnController;
                this.inMemoryRowController = inMemoryRowController;
                this.selectionController = selectionController;
                this.gridOptionsWrapper = gridOptionsWrapper;
                this.gridPanel = gridPanel;
            }
            GridApi.prototype.setDatasource = function (datasource) {
                this.grid.setDatasource(datasource);
            };
            GridApi.prototype.onNewDatasource = function () {
                this.grid.setDatasource();
            };
            GridApi.prototype.setRows = function (rows) {
                this.grid.setRows(rows);
            };
            GridApi.prototype.onNewRows = function () {
                this.grid.setRows();
            };
            GridApi.prototype.onNewCols = function () {
                this.grid.onNewCols();
            };
            GridApi.prototype.unselectAll = function () {
                console.error("unselectAll deprecated, call deselectAll instead");
                this.deselectAll();
            };
            GridApi.prototype.refreshView = function () {
                this.rowRenderer.refreshView();
            };
            GridApi.prototype.softRefreshView = function () {
                this.rowRenderer.softRefreshView();
            };
            GridApi.prototype.refreshGroupRows = function () {
                this.rowRenderer.refreshGroupRows();
            };
            GridApi.prototype.refreshHeader = function () {
                // need to review this - the refreshHeader should also refresh all icons in the header
                this.headerRenderer.refreshHeader();
                this.headerRenderer.updateFilterIcons();
            };
            GridApi.prototype.getModel = function () {
                return this.grid.rowModel;
            };
            GridApi.prototype.onGroupExpandedOrCollapsed = function (refreshFromIndex) {
                this.grid.updateModelAndRefresh(_grid.Constants.STEP_MAP, refreshFromIndex);
            };
            GridApi.prototype.expandAll = function () {
                this.inMemoryRowController.expandOrCollapseAll(true, null);
                this.grid.updateModelAndRefresh(_grid.Constants.STEP_MAP);
            };
            GridApi.prototype.collapseAll = function () {
                this.inMemoryRowController.expandOrCollapseAll(false, null);
                this.grid.updateModelAndRefresh(_grid.Constants.STEP_MAP);
            };
            GridApi.prototype.addVirtualRowListener = function (rowIndex, callback) {
                this.grid.addVirtualRowListener(rowIndex, callback);
            };
            GridApi.prototype.rowDataChanged = function (rows) {
                this.rowRenderer.rowDataChanged(rows);
            };
            GridApi.prototype.setQuickFilter = function (newFilter) {
                this.grid.onQuickFilterChanged(newFilter);
            };
            GridApi.prototype.selectIndex = function (index, tryMulti, suppressEvents) {
                this.selectionController.selectIndex(index, tryMulti, suppressEvents);
            };
            GridApi.prototype.deselectIndex = function (index) {
                this.selectionController.deselectIndex(index);
            };
            GridApi.prototype.selectNode = function (node, tryMulti, suppressEvents) {
                this.selectionController.selectNode(node, tryMulti, suppressEvents);
            };
            GridApi.prototype.deselectNode = function (node) {
                this.selectionController.deselectNode(node);
            };
            GridApi.prototype.selectAll = function () {
                this.selectionController.selectAll();
                this.rowRenderer.refreshView();
            };
            GridApi.prototype.deselectAll = function () {
                this.selectionController.deselectAll();
                this.rowRenderer.refreshView();
            };
            GridApi.prototype.recomputeAggregates = function () {
                this.inMemoryRowController.doAggregate();
                this.rowRenderer.refreshGroupRows();
            };
            GridApi.prototype.sizeColumnsToFit = function () {
                if (this.gridOptionsWrapper.isDontUseScrolls()) {
                    console.warn('ag-grid: sizeColumnsToFit does not work when dontUseScrolls=true');
                    return;
                }
                var availableWidth = this.gridPanel.getWidthForSizeColsToFit();
                this.columnController.sizeColumnsToFit(availableWidth);
            };
            GridApi.prototype.showLoading = function (show) {
                this.grid.showLoadingPanel(show);
            };
            GridApi.prototype.isNodeSelected = function (node) {
                return this.selectionController.isNodeSelected(node);
            };
            GridApi.prototype.getSelectedNodes = function () {
                return this.selectionController.getSelectedNodes();
            };
            GridApi.prototype.getBestCostNodeSelection = function () {
                return this.selectionController.getBestCostNodeSelection();
            };
            GridApi.prototype.ensureColIndexVisible = function (index) {
                this.gridPanel.ensureColIndexVisible(index);
            };
            GridApi.prototype.ensureIndexVisible = function (index) {
                this.gridPanel.ensureIndexVisible(index);
            };
            GridApi.prototype.ensureNodeVisible = function (comparator) {
                this.grid.ensureNodeVisible(comparator);
            };
            GridApi.prototype.forEachInMemory = function (callback) {
                this.grid.rowModel.forEachInMemory(callback);
            };
            GridApi.prototype.getFilterApiForColDef = function (colDef) {
                console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
                return this.getFilterApi(colDef);
            };
            GridApi.prototype.getFilterApi = function (key) {
                var column = this.grid.columnModel.getColumn(key);
                return this.filterManager.getFilterApi(column);
            };
            GridApi.prototype.getColumnDef = function (key) {
                var column = this.grid.columnModel.getColumn(key);
                if (column) {
                    return column.colDef;
                }
                else {
                    return null;
                }
            };
            GridApi.prototype.onFilterChanged = function () {
                this.grid.onFilterChanged();
            };
            GridApi.prototype.setSortModel = function (sortModel) {
                this.grid.setSortModel(sortModel);
            };
            GridApi.prototype.getSortModel = function () {
                return this.grid.getSortModel();
            };
            GridApi.prototype.setFilterModel = function (model) {
                this.filterManager.setFilterModel(model);
            };
            GridApi.prototype.getFilterModel = function () {
                return this.grid.getFilterModel();
            };
            GridApi.prototype.getFocusedCell = function () {
                return this.rowRenderer.getFocusedCell();
            };
            GridApi.prototype.setFocusedCell = function (rowIndex, colIndex) {
                this.grid.setFocusedCell(rowIndex, colIndex);
            };
            GridApi.prototype.showToolPanel = function (show) {
                this.grid.showToolPanel(show);
            };
            GridApi.prototype.isToolPanelShowing = function () {
                return this.grid.isToolPanelShowing();
            };
            GridApi.prototype.hideColumn = function (colId, hide) {
                this.columnController.hideColumns([colId], hide);
            };
            GridApi.prototype.hideColumns = function (colIds, hide) {
                this.columnController.hideColumns(colIds, hide);
            };
            GridApi.prototype.getColumnState = function () {
                return this.columnController.getState();
            };
            GridApi.prototype.setColumnState = function (state) {
                this.columnController.setState(state);
                this.inMemoryRowController.doGrouping();
                this.inMemoryRowController.updateModel(_grid.Constants.STEP_EVERYTHING);
                this.grid.refreshHeaderAndBody();
            };
            GridApi.prototype.doLayout = function () {
                this.grid.doLayout();
            };
            return GridApi;
        })();
        _grid.GridApi = GridApi;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="constants.ts" />
/// <reference path="gridOptionsWrapper.ts" />
/// <reference path="utils.ts" />
/// <reference path="filter/filterManager.ts" />
/// <reference path="columnController.ts" />
/// <reference path="selectionController.ts" />
/// <reference path="selectionRendererFactory.ts" />
/// <reference path="rowRenderer.ts" />
/// <reference path="headerRenderer.ts" />
/// <reference path="rowControllers/inMemoryRowController.ts" />
/// <reference path="rowControllers/virtualPageRowController.ts" />
/// <reference path="rowControllers/paginationController.ts" />
/// <reference path="expressionService.ts" />
/// <reference path="templateService.ts" />
/// <reference path="gridPanel/gridPanel.ts" />
/// <reference path="toolPanel/toolPanel.ts" />
/// <reference path="widgets/agPopupService.ts" />
/// <reference path="gridOptions.ts" />
/// <reference path="gridApi.ts" />
var awk;
(function (awk) {
    var grid;
    (function (grid) {
        var agPopupService = grid.PopupService.getInstance();
        var Grid = (function () {
            function Grid(eGridDiv, gridOptions, $scope, $compile, quickFilterOnScope) {
                this.gridOptions = gridOptions;
                this.gridOptionsWrapper = new grid.GridOptionsWrapper(this.gridOptions);
                this.setupComponents($scope, $compile, eGridDiv);
                this.gridOptions.api = new grid.GridApi(this, this.rowRenderer, this.headerRenderer, this.filterManager, this.columnController, this.inMemoryRowController, this.selectionController, this.gridOptionsWrapper, this.gridPanel);
                var that = this;
                this.quickFilter = null;
                // if using angular, watch for quickFilter changes
                if ($scope) {
                    $scope.$watch(quickFilterOnScope, function (newFilter) {
                        that.onQuickFilterChanged(newFilter);
                    });
                }
                this.virtualRowCallbacks = {};
                // done when cols change
                this.setupColumns();
                this.inMemoryRowController.setAllRows(this.gridOptionsWrapper.getAllRows());
                var forPrint = this.gridOptionsWrapper.isDontUseScrolls();
                if (!forPrint) {
                    window.addEventListener('resize', this.doLayout.bind(this));
                }
                this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);
                // if no data provided initially, and not doing infinite scrolling, show the loading panel
                var showLoading = !this.gridOptionsWrapper.getAllRows() && !this.gridOptionsWrapper.isVirtualPaging();
                this.showLoadingPanel(showLoading);
                // if datasource provided, use it
                if (this.gridOptionsWrapper.getDatasource()) {
                    this.setDatasource();
                }
                this.doLayout();
                this.finished = false;
                this.periodicallyDoLayout();
                // if ready function provided, use it
                if (typeof this.gridOptionsWrapper.getReady() == 'function') {
                    this.gridOptionsWrapper.getReady()(gridOptions.api);
                }
            }
            Grid.prototype.periodicallyDoLayout = function () {
                if (!this.finished) {
                    var that = this;
                    setTimeout(function () {
                        that.doLayout();
                        that.periodicallyDoLayout();
                    }, 500);
                }
            };
            Grid.prototype.setupComponents = function ($scope, $compile, eUserProvidedDiv) {
                // make local references, to make the below more human readable
                var gridOptionsWrapper = this.gridOptionsWrapper;
                var gridOptions = this.gridOptions;
                var forPrint = gridOptionsWrapper.isDontUseScrolls();
                // create all the beans
                var selectionController = new grid.SelectionController();
                var filterManager = new grid.FilterManager();
                var selectionRendererFactory = new grid.SelectionRendererFactory();
                var columnController = new grid.ColumnController();
                var rowRenderer = new grid.RowRenderer();
                var headerRenderer = new grid.HeaderRenderer();
                var inMemoryRowController = new grid.InMemoryRowController();
                var virtualPageRowController = new grid.VirtualPageRowController();
                var expressionService = new grid.ExpressionService();
                var templateService = new grid.TemplateService();
                var gridPanel = new grid.GridPanel(gridOptionsWrapper);
                var columnModel = columnController.getModel();
                // initialise all the beans
                templateService.init($scope);
                selectionController.init(this, gridPanel, gridOptionsWrapper, $scope, rowRenderer);
                filterManager.init(this, gridOptionsWrapper, $compile, $scope, expressionService, columnModel);
                selectionRendererFactory.init(this, selectionController);
                columnController.init(this, selectionRendererFactory, gridOptionsWrapper, expressionService);
                rowRenderer.init(gridOptions, columnModel, gridOptionsWrapper, gridPanel, this, selectionRendererFactory, $compile, $scope, selectionController, expressionService, templateService);
                headerRenderer.init(gridOptionsWrapper, columnController, columnModel, gridPanel, this, filterManager, $scope, $compile, expressionService);
                inMemoryRowController.init(gridOptionsWrapper, columnModel, this, filterManager, $scope, expressionService);
                virtualPageRowController.init(rowRenderer, gridOptionsWrapper, this);
                gridPanel.init(columnModel, rowRenderer);
                var toolPanelLayout = null;
                var toolPanel = null;
                if (!forPrint) {
                    toolPanel = new grid.ToolPanel();
                    toolPanelLayout = toolPanel.layout;
                    toolPanel.init(columnController, inMemoryRowController, gridOptionsWrapper, this.gridOptions.api);
                }
                // this is a child bean, get a reference and pass it on
                // CAN WE DELETE THIS? it's done in the setDatasource section
                var rowModel = inMemoryRowController.getModel();
                selectionController.setRowModel(rowModel);
                filterManager.setRowModel(rowModel);
                rowRenderer.setRowModel(rowModel);
                gridPanel.setRowModel(rowModel);
                // and the last bean, done in it's own section, as it's optional
                var paginationController = null;
                var paginationGui = null;
                if (!forPrint) {
                    paginationController = new grid.PaginationController();
                    paginationController.init(this, gridOptionsWrapper);
                    paginationGui = paginationController.getGui();
                }
                this.rowModel = rowModel;
                this.selectionController = selectionController;
                this.columnController = columnController;
                this.columnModel = columnModel;
                this.inMemoryRowController = inMemoryRowController;
                this.virtualPageRowController = virtualPageRowController;
                this.rowRenderer = rowRenderer;
                this.headerRenderer = headerRenderer;
                this.paginationController = paginationController;
                this.filterManager = filterManager;
                this.toolPanel = toolPanel;
                this.gridPanel = gridPanel;
                this.eRootPanel = new grid.BorderLayout({
                    center: gridPanel.layout,
                    east: toolPanelLayout,
                    south: paginationGui,
                    dontFill: forPrint,
                    name: 'eRootPanel'
                });
                agPopupService.init(this.eRootPanel.getGui());
                // default is we don't show paging panel, this is set to true when datasource is set
                this.eRootPanel.setSouthVisible(false);
                // see what the grid options are for default of toolbar
                this.showToolPanel(gridOptionsWrapper.isShowToolPanel());
                eUserProvidedDiv.appendChild(this.eRootPanel.getGui());
            };
            Grid.prototype.showToolPanel = function (show) {
                if (!this.toolPanel) {
                    this.toolPanelShowing = false;
                    return;
                }
                this.toolPanelShowing = show;
                this.eRootPanel.setEastVisible(show);
            };
            Grid.prototype.isToolPanelShowing = function () {
                return this.toolPanelShowing;
            };
            Grid.prototype.setDatasource = function (datasource) {
                // if datasource provided, then set it
                if (datasource) {
                    this.gridOptions.datasource = datasource;
                }
                // get the set datasource (if null was passed to this method,
                // then need to get the actual datasource from options
                var datasourceToUse = this.gridOptionsWrapper.getDatasource();
                this.doingVirtualPaging = this.gridOptionsWrapper.isVirtualPaging() && datasourceToUse;
                this.doingPagination = datasourceToUse && !this.doingVirtualPaging;
                var showPagingPanel;
                if (this.doingVirtualPaging) {
                    this.paginationController.setDatasource(null);
                    this.virtualPageRowController.setDatasource(datasourceToUse);
                    this.rowModel = this.virtualPageRowController.getModel();
                    showPagingPanel = false;
                }
                else if (this.doingPagination) {
                    this.paginationController.setDatasource(datasourceToUse);
                    this.virtualPageRowController.setDatasource(null);
                    this.rowModel = this.inMemoryRowController.getModel();
                    showPagingPanel = true;
                }
                else {
                    this.paginationController.setDatasource(null);
                    this.virtualPageRowController.setDatasource(null);
                    this.rowModel = this.inMemoryRowController.getModel();
                    showPagingPanel = false;
                }
                this.selectionController.setRowModel(this.rowModel);
                this.filterManager.setRowModel(this.rowModel);
                this.rowRenderer.setRowModel(this.rowModel);
                this.eRootPanel.setSouthVisible(showPagingPanel);
                // because we just set the rowModel, need to update the gui
                this.rowRenderer.refreshView();
                this.doLayout();
            };
            // gets called after columns are shown / hidden from groups expanding
            Grid.prototype.refreshHeaderAndBody = function () {
                this.headerRenderer.refreshHeader();
                this.headerRenderer.updateFilterIcons();
                this.headerRenderer.updateSortIcons();
                this.gridPanel.setBodyContainerWidth();
                this.gridPanel.setPinnedColContainerWidth();
                this.rowRenderer.refreshView();
            };
            Grid.prototype.setFinished = function () {
                window.removeEventListener('resize', this.doLayout);
                this.finished = true;
            };
            Grid.prototype.getQuickFilter = function () {
                return this.quickFilter;
            };
            Grid.prototype.onQuickFilterChanged = function (newFilter) {
                if (newFilter === undefined || newFilter === "") {
                    newFilter = null;
                }
                if (this.quickFilter !== newFilter) {
                    if (this.gridOptionsWrapper.isVirtualPaging()) {
                        console.warn('ag-grid: cannot do quick filtering when doing virtual paging');
                        return;
                    }
                    //want 'null' to mean to filter, so remove undefined and empty string
                    if (newFilter === undefined || newFilter === "") {
                        newFilter = null;
                    }
                    if (newFilter !== null) {
                        newFilter = newFilter.toUpperCase();
                    }
                    this.quickFilter = newFilter;
                    this.onFilterChanged();
                }
            };
            Grid.prototype.onFilterChanged = function () {
                this.headerRenderer.updateFilterIcons();
                if (this.gridOptionsWrapper.isEnableServerSideFilter()) {
                    // if doing server side filtering, changing the sort has the impact
                    // of resetting the datasource
                    this.setDatasource();
                }
                else {
                    // if doing in memory filtering, we just update the in memory data
                    this.updateModelAndRefresh(grid.Constants.STEP_FILTER);
                }
            };
            Grid.prototype.onRowClicked = function (event, rowIndex, node) {
                if (this.gridOptions.rowClicked) {
                    var params = {
                        node: node,
                        data: node.data,
                        event: event,
                        rowIndex: rowIndex
                    };
                    this.gridOptions.rowClicked(params);
                }
                // we do not allow selecting groups by clicking (as the click here expands the group)
                // so return if it's a group row
                if (node.group) {
                    return;
                }
                // making local variables to make the below more readable
                var gridOptionsWrapper = this.gridOptionsWrapper;
                var selectionController = this.selectionController;
                // if no selection method enabled, do nothing
                if (!gridOptionsWrapper.isRowSelection()) {
                    return;
                }
                // if click selection suppressed, do nothing
                if (gridOptionsWrapper.isSuppressRowClickSelection()) {
                    return;
                }
                // ctrlKey for windows, metaKey for Apple
                var ctrlKeyPressed = event.ctrlKey || event.metaKey;
                var doDeselect = ctrlKeyPressed && selectionController.isNodeSelected(node) && gridOptionsWrapper.isRowDeselection();
                if (doDeselect) {
                    selectionController.deselectNode(node);
                }
                else {
                    var tryMulti = ctrlKeyPressed;
                    selectionController.selectNode(node, tryMulti);
                }
            };
            Grid.prototype.showLoadingPanel = function (show) {
                this.gridPanel.showLoading(show);
            };
            Grid.prototype.setupColumns = function () {
                this.gridPanel.setHeaderHeight();
                this.columnController.setColumns(this.gridOptionsWrapper.getColumnDefs());
                this.gridPanel.showPinnedColContainersIfNeeded();
                this.headerRenderer.refreshHeader();
                if (!this.gridOptionsWrapper.isDontUseScrolls()) {
                    this.gridPanel.setPinnedColContainerWidth();
                    this.gridPanel.setBodyContainerWidth();
                }
                this.headerRenderer.updateFilterIcons();
            };
            // rowsToRefresh is at what index to start refreshing the rows. the assumption is
            // if we are expanding or collapsing a group, then only he rows below the group
            // need to be refresh. this allows the context (eg focus) of the other cells to
            // remain.
            Grid.prototype.updateModelAndRefresh = function (step, refreshFromIndex) {
                this.inMemoryRowController.updateModel(step);
                this.rowRenderer.refreshView(refreshFromIndex);
            };
            Grid.prototype.setRows = function (rows, firstId) {
                if (rows) {
                    this.gridOptions.rowData = rows;
                }
                this.inMemoryRowController.setAllRows(this.gridOptionsWrapper.getAllRows(), firstId);
                this.selectionController.deselectAll();
                this.filterManager.onNewRowsLoaded();
                this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);
                this.headerRenderer.updateFilterIcons();
                this.showLoadingPanel(false);
            };
            Grid.prototype.ensureNodeVisible = function (comparator) {
                if (this.doingVirtualPaging) {
                    throw 'Cannot use ensureNodeVisible when doing virtual paging, as we cannot check rows that are not in memory';
                }
                // look for the node index we want to display
                var rowCount = this.rowModel.getVirtualRowCount();
                var comparatorIsAFunction = typeof comparator === 'function';
                var indexToSelect = -1;
                for (var i = 0; i < rowCount; i++) {
                    var node = this.rowModel.getVirtualRow(i);
                    if (comparatorIsAFunction) {
                        if (comparator(node)) {
                            indexToSelect = i;
                            break;
                        }
                    }
                    else {
                        // check object equality against node and data
                        if (comparator === node || comparator === node.data) {
                            indexToSelect = i;
                            break;
                        }
                    }
                }
                if (indexToSelect >= 0) {
                    this.gridPanel.ensureIndexVisible(indexToSelect);
                }
            };
            Grid.prototype.getFilterModel = function () {
                return this.filterManager.getFilterModel();
            };
            /*
                    addApi() {
                        var that = this;
                        var api = {
                            setDatasource: function (datasource: any) {
                                that.setDatasource(datasource);
                            },
                            onNewDatasource: function () {
                                that.setDatasource();
                            },
                            setRows: function (rows: any) {
                                that.setRows(rows);
                            },
                            onNewRows: function () {
                                that.setRows();
                            },
                            onNewCols: function () {
                                that.onNewCols();
                            },
                            unselectAll: function () {
                                console.error("unselectAll deprecated, call deselectAll instead");
                                this.deselectAll();
                            },
                            refreshView: function () {
                                that.rowRenderer.refreshView();
                            },
                            softRefreshView: function () {
                                that.rowRenderer.softRefreshView();
                            },
                            refreshGroupRows: function () {
                                that.rowRenderer.refreshGroupRows();
                            },
                            refreshHeader: function () {
                                // need to review this - the refreshHeader should also refresh all icons in the header
                                that.headerRenderer.refreshHeader();
                                that.headerRenderer.updateFilterIcons();
                            },
                            getModel: function () {
                                return that.rowModel;
                            },
                            onGroupExpandedOrCollapsed: function (refreshFromIndex: any) {
                                that.updateModelAndRefresh(Constants.STEP_MAP, refreshFromIndex);
                            },
                            expandAll: function () {
                                that.inMemoryRowController.expandOrCollapseAll(true, null);
                                that.updateModelAndRefresh(Constants.STEP_MAP);
                            },
                            collapseAll: function () {
                                that.inMemoryRowController.expandOrCollapseAll(false, null);
                                that.updateModelAndRefresh(Constants.STEP_MAP);
                            },
                            addVirtualRowListener: function (rowIndex: any, callback: any) {
                                that.addVirtualRowListener(rowIndex, callback);
                            },
                            rowDataChanged: function (rows: any) {
                                that.rowRenderer.rowDataChanged(rows);
                            },
                            setQuickFilter: function (newFilter: any) {
                                that.onQuickFilterChanged(newFilter)
                            },
                            selectIndex: function (index: any, tryMulti: any, suppressEvents: any) {
                                that.selectionController.selectIndex(index, tryMulti, suppressEvents);
                            },
                            deselectIndex: function (index: any) {
                                that.selectionController.deselectIndex(index);
                            },
                            selectNode: function (node: any, tryMulti: any, suppressEvents: any) {
                                that.selectionController.selectNode(node, tryMulti, suppressEvents);
                            },
                            deselectNode: function (node: any) {
                                that.selectionController.deselectNode(node);
                            },
                            selectAll: function () {
                                that.selectionController.selectAll();
                                that.rowRenderer.refreshView();
                            },
                            deselectAll: function () {
                                that.selectionController.deselectAll();
                                that.rowRenderer.refreshView();
                            },
                            recomputeAggregates: function () {
                                that.inMemoryRowController.doAggregate();
                                that.rowRenderer.refreshGroupRows();
                            },
                            sizeColumnsToFit: function () {
                                if (that.gridOptionsWrapper.isDontUseScrolls()) {
                                    console.warn('ag-grid: sizeColumnsToFit does not work when dontUseScrolls=true');
                                    return;
                                }
                                var availableWidth = that.gridPanel.getWidthForSizeColsToFit();
                                that.columnController.sizeColumnsToFit(availableWidth);
                            },
                            showLoading: function (show: any) {
                                that.showLoadingPanel(show);
                            },
                            isNodeSelected: function (node: any) {
                                return that.selectionController.isNodeSelected(node);
                            },
                            getSelectedNodes: function () {
                                return that.selectionController.getSelectedNodes();
                            },
                            getBestCostNodeSelection: function () {
                                return that.selectionController.getBestCostNodeSelection();
                            },
                            ensureColIndexVisible: function (index: any) {
                                that.gridPanel.ensureColIndexVisible(index);
                            },
                            ensureIndexVisible: function (index: any) {
                                that.gridPanel.ensureIndexVisible(index);
                            },
                            ensureNodeVisible: function (comparator: any) {
                                that.ensureNodeVisible(comparator);
                            },
                            forEachInMemory: function (callback: any) {
                                that.rowModel.forEachInMemory(callback);
                            },
                            getFilterApiForColDef: function (colDef: any) {
                                console.warn('ag-grid API method getFilterApiForColDef deprecated, use getFilterApi instead');
                                return this.getFilterApi(colDef);
                            },
                            getFilterApi: function (key: any) {
                                var column = that.columnModel.getColumn(key);
                                return that.filterManager.getFilterApi(column);
                            },
                            getColumnDef: function (key: any) {
                                var column = that.columnModel.getColumn(key);
                                if (column) {
                                    return column.colDef;
                                } else {
                                    return null;
                                }
                            },
                            onFilterChanged: function () {
                                that.onFilterChanged();
                            },
                            setSortModel: function (sortModel: any) {
                                that.setSortModel(sortModel);
                            },
                            getSortModel: function () {
                                return that.getSortModel();
                            },
                            setFilterModel: function (model: any) {
                                that.filterManager.setFilterModel(model);
                            },
                            getFilterModel: function () {
                                return that.getFilterModel();
                            },
                            getFocusedCell: function () {
                                return that.rowRenderer.getFocusedCell();
                            },
                            setFocusedCell: function (rowIndex: any, colIndex: any) {
                                that.setFocusedCell(rowIndex, colIndex);
                            },
                            showToolPanel: function (show: any) {
                                that.showToolPanel(show);
                            },
                            isToolPanelShowing: function () {
                                return that.isToolPanelShowing();
                            },
                            hideColumn: function (colId: any, hide: any) {
                                that.columnController.hideColumns([colId], hide);
                            },
                            hideColumns: function (colIds: any, hide: any) {
                                that.columnController.hideColumns(colIds, hide);
                            },
                            getColumnState: function () {
                                return that.columnController.getState();
                            },
                            setColumnState: function (state: any) {
                                that.columnController.setState(state);
                                that.inMemoryRowController.doGrouping();
                                that.inMemoryRowController.updateModel(Constants.STEP_EVERYTHING);
                                that.refreshHeaderAndBody();
                            }
                        };
                        this.gridOptions.api = api;
                    }*/
            Grid.prototype.setFocusedCell = function (rowIndex, colIndex) {
                this.gridPanel.ensureIndexVisible(rowIndex);
                this.gridPanel.ensureColIndexVisible(colIndex);
                var that = this;
                setTimeout(function () {
                    that.rowRenderer.setFocusedCell(rowIndex, colIndex);
                }, 10);
            };
            Grid.prototype.getSortModel = function () {
                var allColumns = this.columnModel.getAllColumns();
                var columnsWithSorting = [];
                var i;
                for (i = 0; i < allColumns.length; i++) {
                    if (allColumns[i].sort) {
                        columnsWithSorting.push(allColumns[i]);
                    }
                }
                columnsWithSorting.sort(function (a, b) {
                    return a.sortedAt - b.sortedAt;
                });
                var result = [];
                for (i = 0; i < columnsWithSorting.length; i++) {
                    var resultEntry = {
                        field: columnsWithSorting[i].colDef.field,
                        sort: columnsWithSorting[i].sort
                    };
                    result.push(resultEntry);
                }
                return result;
            };
            Grid.prototype.setSortModel = function (sortModel) {
                if (!this.gridOptionsWrapper.isEnableSorting()) {
                    console.warn('ag-grid: You are setting the sort model on a grid that does not have sorting enabled');
                    return;
                }
                // first up, clear any previous sort
                var sortModelProvided = sortModel !== null && sortModel !== undefined && sortModel.length > 0;
                var allColumns = this.columnModel.getAllColumns();
                for (var i = 0; i < allColumns.length; i++) {
                    var column = allColumns[i];
                    var sortForCol = null;
                    var sortedAt = -1;
                    if (sortModelProvided && !column.colDef.suppressSorting) {
                        for (var j = 0; j < sortModel.length; j++) {
                            var sortModelEntry = sortModel[j];
                            if (typeof sortModelEntry.field === 'string' && typeof column.colDef.field === 'string' && sortModelEntry.field === column.colDef.field) {
                                sortForCol = sortModelEntry.sort;
                                sortedAt = j;
                            }
                        }
                    }
                    if (sortForCol) {
                        column.sort = sortForCol;
                        column.sortedAt = sortedAt;
                    }
                    else {
                        column.sort = null;
                        column.sortedAt = null;
                    }
                }
                this.onSortingChanged();
            };
            Grid.prototype.onSortingChanged = function () {
                this.headerRenderer.updateSortIcons();
                if (this.gridOptionsWrapper.isEnableServerSideSorting()) {
                    // if doing server side sorting, changing the sort has the impact
                    // of resetting the datasource
                    this.setDatasource();
                }
                else {
                    // if doing in memory sorting, we just update the in memory data
                    this.updateModelAndRefresh(grid.Constants.STEP_SORT);
                }
            };
            Grid.prototype.addVirtualRowListener = function (rowIndex, callback) {
                if (!this.virtualRowCallbacks[rowIndex]) {
                    this.virtualRowCallbacks[rowIndex] = [];
                }
                this.virtualRowCallbacks[rowIndex].push(callback);
            };
            Grid.prototype.onVirtualRowSelected = function (rowIndex, selected) {
                // inform the callbacks of the event
                if (this.virtualRowCallbacks[rowIndex]) {
                    this.virtualRowCallbacks[rowIndex].forEach(function (callback) {
                        if (typeof callback.rowRemoved === 'function') {
                            callback.rowSelected(selected);
                        }
                    });
                }
            };
            Grid.prototype.onVirtualRowRemoved = function (rowIndex) {
                // inform the callbacks of the event
                if (this.virtualRowCallbacks[rowIndex]) {
                    this.virtualRowCallbacks[rowIndex].forEach(function (callback) {
                        if (typeof callback.rowRemoved === 'function') {
                            callback.rowRemoved();
                        }
                    });
                }
                // remove the callbacks
                delete this.virtualRowCallbacks[rowIndex];
            };
            Grid.prototype.onNewCols = function () {
                this.setupColumns();
                this.updateModelAndRefresh(grid.Constants.STEP_EVERYTHING);
            };
            Grid.prototype.updateBodyContainerWidthAfterColResize = function () {
                this.rowRenderer.setMainRowWidths();
                this.gridPanel.setBodyContainerWidth();
            };
            Grid.prototype.updatePinnedColContainerWidthAfterColResize = function () {
                this.gridPanel.setPinnedColContainerWidth();
            };
            Grid.prototype.doLayout = function () {
                // need to do layout first, as drawVirtualRows and setPinnedColHeight
                // need to know the result of the resizing of the panels.
                var sizeChanged = this.eRootPanel.doLayout();
                // both of the two below should be done in gridPanel, the gridPanel should register 'resize' to the panel
                if (sizeChanged) {
                    this.rowRenderer.drawVirtualRows();
                    this.gridPanel.setPinnedColHeight();
                }
            };
            return Grid;
        })();
        grid.Grid = Grid;
    })(grid = awk.grid || (awk.grid = {}));
})(awk || (awk = {}));
/// <reference path="grid.ts" />
(function () {
    // Establish the root object, `window` or `exports`
    var root = this;
    // if angular is present, register the directive
    if (typeof angular !== 'undefined') {
        var angularModule = angular.module("angularGrid", []);
        angularModule.directive("angularGrid", function () {
            return {
                restrict: "A",
                controller: ['$element', '$scope', '$compile', AngularDirectiveController],
                scope: {
                    angularGrid: "="
                }
            };
        });
        angularModule.directive("agGrid", function () {
            return {
                restrict: "A",
                controller: ['$element', '$scope', '$compile', '$attrs', AngularDirectiveController],
                scope: true
            };
        });
    }
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = angularGridGlobalFunction;
        }
        exports.angularGrid = angularGridGlobalFunction;
    }
    root.angularGrid = angularGridGlobalFunction;
    function AngularDirectiveController($element, $scope, $compile, $attrs) {
        var gridOptions;
        var quickFilterOnScope;
        if ($attrs) {
            // new directive of ag-grid
            var keyOfGridInScope = $attrs.agGrid;
            quickFilterOnScope = keyOfGridInScope + '.quickFilterText';
            gridOptions = $scope.$eval(keyOfGridInScope);
            if (!gridOptions) {
                console.warn("WARNING - grid options for Angular Grid not found. Please ensure the attribute ag-grid points to a valid object on the scope");
                return;
            }
        }
        else {
            // old directive of angular-grid
            console.warn("WARNING - Directive angular-grid is deprecated, you should use the ag-grid directive instead.");
            gridOptions = $scope.angularGrid;
            quickFilterOnScope = 'angularGrid.quickFilterText';
            if (!gridOptions) {
                console.warn("WARNING - grid options for Angular Grid not found. Please ensure the attribute angular-grid points to a valid object on the scope");
                return;
            }
        }
        var eGridDiv = $element[0];
        var grid = new awk.grid.Grid(eGridDiv, gridOptions, $scope, $compile, quickFilterOnScope);
        $scope.$on("$destroy", function () {
            grid.setFinished();
        });
    }
    // Global Function - this function is used for creating a grid, outside of any AngularJS
    function angularGridGlobalFunction(element, gridOptions) {
        // see if element is a query selector, or a real element
        var eGridDiv;
        if (typeof element === 'string') {
            eGridDiv = document.querySelector(element);
            if (!eGridDiv) {
                console.warn('WARNING - was not able to find element ' + element + ' in the DOM, Angular Grid initialisation aborted.');
                return;
            }
        }
        else {
            eGridDiv = element;
        }
        new awk.grid.Grid(eGridDiv, gridOptions, null, null, null);
    }
}).call(window);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWxzLnRzIiwiY29uc3RhbnRzLnRzIiwiY29sdW1uQ29udHJvbGxlci50cyIsImV4cGFuZENyZWF0b3IudHMiLCJleHByZXNzaW9uU2VydmljZS50cyIsImdyaWRPcHRpb25zV3JhcHBlci50cyIsImZpbHRlci90ZXh0RmlsdGVyLnRzIiwiZmlsdGVyL251bWJlckZpbHRlci50cyIsImZpbHRlci9zZXRGaWx0ZXJNb2RlbC50cyIsImZpbHRlci9zZXRGaWx0ZXIudHMiLCJ3aWRnZXRzL2FnUG9wdXBTZXJ2aWNlLnRzIiwiZmlsdGVyL2ZpbHRlck1hbmFnZXIudHMiLCJzZWxlY3Rpb25Db250cm9sbGVyLnRzIiwic2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5LnRzIiwic3ZnRmFjdG9yeS50cyIsImNlbGxSZW5kZXJlcnMvZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5LnRzIiwicm93UmVuZGVyZXIudHMiLCJoZWFkZXJSZW5kZXJlci50cyIsImdyb3VwQ3JlYXRvci50cyIsInJvd0NvbnRyb2xsZXJzL2luTWVtb3J5Um93Q29udHJvbGxlci50cyIsInJvd0NvbnRyb2xsZXJzL3ZpcnR1YWxQYWdlUm93Q29udHJvbGxlci50cyIsInJvd0NvbnRyb2xsZXJzL3BhZ2luYXRpb25Db250cm9sbGVyLnRzIiwidGVtcGxhdGVTZXJ2aWNlLnRzIiwibGF5b3V0L2JvcmRlckxheW91dC50cyIsImdyaWRQYW5lbC9ncmlkUGFuZWwudHMiLCJkcmFnQW5kRHJvcC9kcmFnQW5kRHJvcFNlcnZpY2UudHMiLCJ3aWRnZXRzL2FnTGlzdC50cyIsInRvb2xQYW5lbC9jb2x1bW5TZWxlY3Rpb25QYW5lbC50cyIsInRvb2xQYW5lbC9ncm91cFNlbGVjdGlvblBhbmVsLnRzIiwid2lkZ2V0cy9hZ0Ryb3Bkb3duTGlzdC50cyIsInRvb2xQYW5lbC92YWx1ZXNTZWxlY3Rpb25QYW5lbC50cyIsImxheW91dC92ZXJ0aWNhbFN0YWNrLnRzIiwidG9vbFBhbmVsL3Rvb2xQYW5lbC50cyIsImdyaWRBcGkudHMiLCJncmlkLnRzIiwibWFpbi50cyIsImZpbHRlci9maWx0ZXIudHMiXSwibmFtZXMiOlsiYXdrIiwiYXdrLmdyaWQiLCJhd2suZ3JpZC5VdGlscyIsImF3ay5ncmlkLlV0aWxzLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuVXRpbHMuaXRlcmF0ZU9iamVjdCIsImF3ay5ncmlkLlV0aWxzLm1hcCIsImF3ay5ncmlkLlV0aWxzLmZvckVhY2giLCJhd2suZ3JpZC5VdGlscy5nZXRGdW5jdGlvblBhcmFtZXRlcnMiLCJhd2suZ3JpZC5VdGlscy5maW5kIiwiYXdrLmdyaWQuVXRpbHMudG9TdHJpbmdzIiwiYXdrLmdyaWQuVXRpbHMuaXRlcmF0ZUFycmF5IiwiYXdrLmdyaWQuVXRpbHMuZ2V0VmFsdWUiLCJhd2suZ3JpZC5VdGlscy5pc05vZGUiLCJhd2suZ3JpZC5VdGlscy5pc0VsZW1lbnQiLCJhd2suZ3JpZC5VdGlscy5pc05vZGVPckVsZW1lbnQiLCJhd2suZ3JpZC5VdGlscy5hZGRDaGFuZ2VMaXN0ZW5lciIsImF3ay5ncmlkLlV0aWxzLm1ha2VOdWxsIiwiYXdrLmdyaWQuVXRpbHMucmVtb3ZlQWxsQ2hpbGRyZW4iLCJhd2suZ3JpZC5VdGlscy5yZW1vdmVFbGVtZW50IiwiYXdrLmdyaWQuVXRpbHMucmVtb3ZlRnJvbVBhcmVudCIsImF3ay5ncmlkLlV0aWxzLmlzVmlzaWJsZSIsImF3ay5ncmlkLlV0aWxzLmxvYWRUZW1wbGF0ZSIsImF3ay5ncmlkLlV0aWxzLnF1ZXJ5U2VsZWN0b3JBbGxfYWRkQ3NzQ2xhc3MiLCJhd2suZ3JpZC5VdGlscy5xdWVyeVNlbGVjdG9yQWxsX3JlbW92ZUNzc0NsYXNzIiwiYXdrLmdyaWQuVXRpbHMucXVlcnlTZWxlY3RvckFsbF9yZXBsYWNlQ3NzQ2xhc3MiLCJhd2suZ3JpZC5VdGlscy5hZGRPclJlbW92ZUNzc0NsYXNzIiwiYXdrLmdyaWQuVXRpbHMuYWRkQ3NzQ2xhc3MiLCJhd2suZ3JpZC5VdGlscy5vZmZzZXRIZWlnaHQiLCJhd2suZ3JpZC5VdGlscy5vZmZzZXRXaWR0aCIsImF3ay5ncmlkLlV0aWxzLnJlbW92ZUNzc0NsYXNzIiwiYXdrLmdyaWQuVXRpbHMucmVtb3ZlRnJvbUFycmF5IiwiYXdrLmdyaWQuVXRpbHMuZGVmYXVsdENvbXBhcmF0b3IiLCJhd2suZ3JpZC5VdGlscy5mb3JtYXRXaWR0aCIsImF3ay5ncmlkLlV0aWxzLnVzZVJlbmRlcmVyIiwiYXdrLmdyaWQuVXRpbHMuY3JlYXRlSWNvbiIsImF3ay5ncmlkLlV0aWxzLmFkZFN0eWxlc1RvRWxlbWVudCIsImF3ay5ncmlkLlV0aWxzLmdldFNjcm9sbGJhcldpZHRoIiwiYXdrLmdyaWQuVXRpbHMuaXNLZXlQcmVzc2VkIiwiYXdrLmdyaWQuVXRpbHMuc2V0VmlzaWJsZSIsImF3ay5ncmlkLkNvbnN0YW50cyIsImF3ay5ncmlkLkNvbnN0YW50cy5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIiLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5pbml0IiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5jcmVhdGVNb2RlbCIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuZ2V0U3RhdGUiLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLnNldFN0YXRlIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5nZXRDb2x1bW4iLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLmdldERpc3BsYXlOYW1lRm9yQ29sIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5hZGRMaXN0ZW5lciIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuZmlyZUNvbHVtbnNDaGFuZ2VkIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5nZXRNb2RlbCIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuc2V0Q29sdW1ucyIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuY2hlY2tGb3JEZXByZWNhdGVkSXRlbXMiLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLmhlYWRlckdyb3VwT3BlbmVkIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5vbkNvbHVtblN0YXRlQ2hhbmdlZCIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuaGlkZUNvbHVtbnMiLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLnVwZGF0ZU1vZGVsIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci51cGRhdGVEaXNwbGF5ZWRDb2x1bW5zIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5zaXplQ29sdW1uc1RvRml0IiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5idWlsZEdyb3VwcyIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIudXBkYXRlR3JvdXBzIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci51cGRhdGVWaXNpYmxlQ29sdW1ucyIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIudXBkYXRlUGlubmVkQ29sdW1ucyIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuY3JlYXRlQ29sdW1ucyIsImF3ay5ncmlkLkNvbHVtbkNvbnRyb2xsZXIuY3JlYXRlUGl2b3RDb2x1bW5zIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5jcmVhdGVWYWx1ZUNvbHVtbnMiLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLmNyZWF0ZUR1bW15Q29sdW1uIiwiYXdrLmdyaWQuQ29sdW1uQ29udHJvbGxlci5jYWxjdWxhdGVDb2xJbml0aWFsV2lkdGgiLCJhd2suZ3JpZC5Db2x1bW5Db250cm9sbGVyLmdldFRvdGFsQ29sV2lkdGgiLCJhd2suZ3JpZC5IZWFkZXJHcm91cCIsImF3ay5ncmlkLkhlYWRlckdyb3VwLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuSGVhZGVyR3JvdXAuYWRkQ29sdW1uIiwiYXdrLmdyaWQuSGVhZGVyR3JvdXAuY2FsY3VsYXRlRXhwYW5kYWJsZSIsImF3ay5ncmlkLkhlYWRlckdyb3VwLmNhbGN1bGF0ZURpc3BsYXllZENvbHVtbnMiLCJhd2suZ3JpZC5IZWFkZXJHcm91cC5hZGRUb1Zpc2libGVDb2x1bW5zIiwiYXdrLmdyaWQuQ29sdW1uIiwiYXdrLmdyaWQuQ29sdW1uLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuRXhwYW5kQ3JlYXRvciIsImF3ay5ncmlkLkV4cGFuZENyZWF0b3IuY29uc3RydWN0b3IiLCJhd2suZ3JpZC5FeHBhbmRDcmVhdG9yLmdldEluc3RhbmNlIiwiYXdrLmdyaWQuRXhwYW5kQ3JlYXRvci5ncm91cCIsImF3ay5ncmlkLkV4cGFuZENyZWF0b3IuaXNFeHBhbmRlZCIsImF3ay5ncmlkLkV4cHJlc3Npb25TZXJ2aWNlIiwiYXdrLmdyaWQuRXhwcmVzc2lvblNlcnZpY2UuY29uc3RydWN0b3IiLCJhd2suZ3JpZC5FeHByZXNzaW9uU2VydmljZS5ldmFsdWF0ZSIsImF3ay5ncmlkLkV4cHJlc3Npb25TZXJ2aWNlLmNyZWF0ZUV4cHJlc3Npb25GdW5jdGlvbiIsImF3ay5ncmlkLkV4cHJlc3Npb25TZXJ2aWNlLmNyZWF0ZUZ1bmN0aW9uQm9keSIsImF3ay5ncmlkLmlzVHJ1ZSIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlciIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1Jvd1NlbGVjdGlvbiIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1Jvd0Rlc2VsZWN0aW9uIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93U2VsZWN0aW9uTXVsdGkiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29udGV4dCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1ZpcnR1YWxQYWdpbmciLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuaXNTaG93VG9vbFBhbmVsIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzVG9vbFBhbmVsU3VwcHJlc3NQaXZvdCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1Rvb2xQYW5lbFN1cHByZXNzVmFsdWVzIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93c0FscmVhZHlHcm91cGVkIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93c0FscmVhZHlFeHBhbmRlZCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc0dyb3VwU2VsZWN0c0NoaWxkcmVuIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBIaWRlUGl2b3RDb2x1bW5zIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBJbmNsdWRlRm9vdGVyIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzU3VwcHJlc3NSb3dDbGlja1NlbGVjdGlvbiIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1N1cHByZXNzQ2VsbFNlbGVjdGlvbiIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1N1cHByZXNzVW5Tb3J0IiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzU3VwcHJlc3NNdWx0aVNvcnQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cFN1cHByZXNzQXV0b0NvbHVtbiIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc0dyb3VwSGVhZGVycyIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc0RvbnRVc2VTY3JvbGxzIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzU3VwcHJlc3NEZXNjU29ydCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc1VuU29ydEljb24iLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0Um93U3R5bGUiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0Um93Q2xhc3MiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0SGVhZGVyQ2VsbFJlbmRlcmVyIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZUNvbFJlc2l6ZSIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRHcm91cERlZmF1bHRFeHBhbmRlZCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRHcm91cEtleXMiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0R3JvdXBBZ2dGdW5jdGlvbiIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRHcm91cEFnZ0ZpZWxkcyIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRBbGxSb3dzIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBVc2VFbnRpcmVSb3ciLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0R3JvdXBDb2x1bW5EZWYiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuaXNBbmd1bGFyQ29tcGlsZVJvd3MiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuaXNBbmd1bGFyQ29tcGlsZUZpbHRlcnMiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuaXNBbmd1bGFyQ29tcGlsZUhlYWRlcnMiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29sdW1uRGVmcyIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dIZWlnaHQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0TW9kZWxVcGRhdGVkIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldENlbGxDbGlja2VkIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldENlbGxEb3VibGVDbGlja2VkIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldENlbGxWYWx1ZUNoYW5nZWQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q2VsbEZvY3VzZWQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0Um93U2VsZWN0ZWQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuZ2V0U2VsZWN0aW9uQ2hhbmdlZCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRWaXJ0dWFsUm93UmVtb3ZlZCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXREYXRhc291cmNlIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldFJlYWR5IiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldFJvd0J1ZmZlciIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRFeHBhbmRlZFJvd3NEZWZhdWx0IiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzRW5hYmxlU29ydGluZyIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZVNlcnZlclNpZGVTb3J0aW5nIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzRW5hYmxlRmlsdGVyIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmlzRW5hYmxlU2VydmVyU2lkZUZpbHRlciIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5zZXRTZWxlY3RlZFJvd3MiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuc2V0U2VsZWN0ZWROb2Rlc0J5SWQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuaXNEb0ludGVybmFsRXhwYW5kaW5nIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldEljb25zIiwiYXdrLmdyaWQuR3JpZE9wdGlvbnNXcmFwcGVyLmdldEdyb3VwUm93SW5uZXJSZW5kZXJlciIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRDb2xXaWR0aCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRIZWFkZXJIZWlnaHQiLCJhd2suZ3JpZC5HcmlkT3B0aW9uc1dyYXBwZXIuc2V0dXBEZWZhdWx0cyIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRQaW5uZWRDb2xDb3VudCIsImF3ay5ncmlkLkdyaWRPcHRpb25zV3JhcHBlci5nZXRMb2NhbGVUZXh0RnVuYyIsImF3ay5ncmlkLlRleHRGaWx0ZXIiLCJhd2suZ3JpZC5UZXh0RmlsdGVyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuVGV4dEZpbHRlci5vbk5ld1Jvd3NMb2FkZWQiLCJhd2suZ3JpZC5UZXh0RmlsdGVyLmFmdGVyR3VpQXR0YWNoZWQiLCJhd2suZ3JpZC5UZXh0RmlsdGVyLmRvZXNGaWx0ZXJQYXNzIiwiYXdrLmdyaWQuVGV4dEZpbHRlci5nZXRHdWkiLCJhd2suZ3JpZC5UZXh0RmlsdGVyLmlzRmlsdGVyQWN0aXZlIiwiYXdrLmdyaWQuVGV4dEZpbHRlci5jcmVhdGVUZW1wbGF0ZSIsImF3ay5ncmlkLlRleHRGaWx0ZXIuY3JlYXRlR3VpIiwiYXdrLmdyaWQuVGV4dEZpbHRlci5zZXR1cEFwcGx5IiwiYXdrLmdyaWQuVGV4dEZpbHRlci5vblR5cGVDaGFuZ2VkIiwiYXdrLmdyaWQuVGV4dEZpbHRlci5vbkZpbHRlckNoYW5nZWQiLCJhd2suZ3JpZC5UZXh0RmlsdGVyLmZpbHRlckNoYW5nZWQiLCJhd2suZ3JpZC5UZXh0RmlsdGVyLmNyZWF0ZUFwaSIsImF3ay5ncmlkLlRleHRGaWx0ZXIuZ2V0QXBpIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyLm9uTmV3Um93c0xvYWRlZCIsImF3ay5ncmlkLk51bWJlckZpbHRlci5hZnRlckd1aUF0dGFjaGVkIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyLmRvZXNGaWx0ZXJQYXNzIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyLmdldEd1aSIsImF3ay5ncmlkLk51bWJlckZpbHRlci5pc0ZpbHRlckFjdGl2ZSIsImF3ay5ncmlkLk51bWJlckZpbHRlci5jcmVhdGVUZW1wbGF0ZSIsImF3ay5ncmlkLk51bWJlckZpbHRlci5jcmVhdGVHdWkiLCJhd2suZ3JpZC5OdW1iZXJGaWx0ZXIuc2V0dXBBcHBseSIsImF3ay5ncmlkLk51bWJlckZpbHRlci5vblR5cGVDaGFuZ2VkIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyLmZpbHRlckNoYW5nZWQiLCJhd2suZ3JpZC5OdW1iZXJGaWx0ZXIub25GaWx0ZXJDaGFuZ2VkIiwiYXdrLmdyaWQuTnVtYmVyRmlsdGVyLmNyZWF0ZUFwaSIsImF3ay5ncmlkLk51bWJlckZpbHRlci5nZXRBcGkiLCJhd2suZ3JpZC5TZXRGaWx0ZXJNb2RlbCIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuU2V0RmlsdGVyTW9kZWwucmVmcmVzaFVuaXF1ZVZhbHVlcyIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmNyZWF0ZVVuaXF1ZVZhbHVlcyIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLml0ZXJhdGVUaHJvdWdoTm9kZXNGb3JWYWx1ZXMiLCJhd2suZ3JpZC5TZXRGaWx0ZXJNb2RlbC5pdGVyYXRlVGhyb3VnaE5vZGVzRm9yVmFsdWVzLnJlY3Vyc2l2ZWx5UHJvY2VzcyIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLnNldE1pbmlGaWx0ZXIiLCJhd2suZ3JpZC5TZXRGaWx0ZXJNb2RlbC5nZXRNaW5pRmlsdGVyIiwiYXdrLmdyaWQuU2V0RmlsdGVyTW9kZWwuZmlsdGVyRGlzcGxheWVkVmFsdWVzIiwiYXdrLmdyaWQuU2V0RmlsdGVyTW9kZWwuZ2V0RGlzcGxheWVkVmFsdWVDb3VudCIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmdldERpc3BsYXllZFZhbHVlIiwiYXdrLmdyaWQuU2V0RmlsdGVyTW9kZWwuc2VsZWN0RXZlcnl0aGluZyIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmlzRmlsdGVyQWN0aXZlIiwiYXdrLmdyaWQuU2V0RmlsdGVyTW9kZWwuc2VsZWN0Tm90aGluZyIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmdldFVuaXF1ZVZhbHVlQ291bnQiLCJhd2suZ3JpZC5TZXRGaWx0ZXJNb2RlbC5nZXRVbmlxdWVWYWx1ZSIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLnVuc2VsZWN0VmFsdWUiLCJhd2suZ3JpZC5TZXRGaWx0ZXJNb2RlbC5zZWxlY3RWYWx1ZSIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmlzVmFsdWVTZWxlY3RlZCIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLmlzRXZlcnl0aGluZ1NlbGVjdGVkIiwiYXdrLmdyaWQuU2V0RmlsdGVyTW9kZWwuaXNOb3RoaW5nU2VsZWN0ZWQiLCJhd2suZ3JpZC5TZXRGaWx0ZXJNb2RlbC5nZXRNb2RlbCIsImF3ay5ncmlkLlNldEZpbHRlck1vZGVsLnNldE1vZGVsIiwiYXdrLmdyaWQuU2V0RmlsdGVyIiwiYXdrLmdyaWQuU2V0RmlsdGVyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuU2V0RmlsdGVyLmFmdGVyR3VpQXR0YWNoZWQiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuaXNGaWx0ZXJBY3RpdmUiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuZG9lc0ZpbHRlclBhc3MiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuZ2V0R3VpIiwiYXdrLmdyaWQuU2V0RmlsdGVyLm9uTmV3Um93c0xvYWRlZCIsImF3ay5ncmlkLlNldEZpbHRlci5jcmVhdGVUZW1wbGF0ZSIsImF3ay5ncmlkLlNldEZpbHRlci5jcmVhdGVHdWkiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuc2V0dXBBcHBseSIsImF3ay5ncmlkLlNldEZpbHRlci5zZXRDb250YWluZXJIZWlnaHQiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuZHJhd1ZpcnR1YWxSb3dzIiwiYXdrLmdyaWQuU2V0RmlsdGVyLmVuc3VyZVJvd3NSZW5kZXJlZCIsImF3ay5ncmlkLlNldEZpbHRlci5yZW1vdmVWaXJ0dWFsUm93cyIsImF3ay5ncmlkLlNldEZpbHRlci5pbnNlcnRSb3ciLCJhd2suZ3JpZC5TZXRGaWx0ZXIub25DaGVja2JveENsaWNrZWQiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuZmlsdGVyQ2hhbmdlZCIsImF3ay5ncmlkLlNldEZpbHRlci5vbk1pbmlGaWx0ZXJDaGFuZ2VkIiwiYXdrLmdyaWQuU2V0RmlsdGVyLnJlZnJlc2hWaXJ0dWFsUm93cyIsImF3ay5ncmlkLlNldEZpbHRlci5jbGVhclZpcnR1YWxSb3dzIiwiYXdrLmdyaWQuU2V0RmlsdGVyLm9uU2VsZWN0QWxsIiwiYXdrLmdyaWQuU2V0RmlsdGVyLnVwZGF0ZUFsbENoZWNrYm94ZXMiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuYWRkU2Nyb2xsTGlzdGVuZXIiLCJhd2suZ3JpZC5TZXRGaWx0ZXIuZ2V0QXBpIiwiYXdrLmdyaWQuU2V0RmlsdGVyLmNyZWF0ZUFwaSIsImF3ay5ncmlkLlBvcHVwU2VydmljZSIsImF3ay5ncmlkLlBvcHVwU2VydmljZS5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLlBvcHVwU2VydmljZS5nZXRJbnN0YW5jZSIsImF3ay5ncmlkLlBvcHVwU2VydmljZS5pbml0IiwiYXdrLmdyaWQuUG9wdXBTZXJ2aWNlLnBvc2l0aW9uUG9wdXAiLCJhd2suZ3JpZC5Qb3B1cFNlcnZpY2UuYWRkQXNNb2RhbFBvcHVwIiwiYXdrLmdyaWQuUG9wdXBTZXJ2aWNlLmFkZEFzTW9kYWxQb3B1cC5oaWRlUG9wdXAiLCJhd2suZ3JpZC5Qb3B1cFNlcnZpY2UuYWRkQXNNb2RhbFBvcHVwLmNvbnN1bWVDbGljayIsImF3ay5ncmlkLkZpbHRlck1hbmFnZXIiLCJhd2suZ3JpZC5GaWx0ZXJNYW5hZ2VyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5pbml0IiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5zZXRGaWx0ZXJNb2RlbCIsImF3ay5ncmlkLkZpbHRlck1hbmFnZXIuc2V0TW9kZWxPbkZpbHRlcldyYXBwZXIiLCJhd2suZ3JpZC5GaWx0ZXJNYW5hZ2VyLmdldEZpbHRlck1vZGVsIiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5zZXRSb3dNb2RlbCIsImF3ay5ncmlkLkZpbHRlck1hbmFnZXIuaXNGaWx0ZXJQcmVzZW50IiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5pc0ZpbHRlclByZXNlbnRGb3JDb2wiLCJhd2suZ3JpZC5GaWx0ZXJNYW5hZ2VyLmRvZXNGaWx0ZXJQYXNzIiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5vbk5ld1Jvd3NMb2FkZWQiLCJhd2suZ3JpZC5GaWx0ZXJNYW5hZ2VyLmNyZWF0ZVZhbHVlR2V0dGVyIiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5jcmVhdGVWYWx1ZUdldHRlci52YWx1ZUdldHRlciIsImF3ay5ncmlkLkZpbHRlck1hbmFnZXIuZ2V0RmlsdGVyQXBpIiwiYXdrLmdyaWQuRmlsdGVyTWFuYWdlci5nZXRPckNyZWF0ZUZpbHRlcldyYXBwZXIiLCJhd2suZ3JpZC5GaWx0ZXJNYW5hZ2VyLmNyZWF0ZUZpbHRlcldyYXBwZXIiLCJhd2suZ3JpZC5GaWx0ZXJNYW5hZ2VyLnNob3dGaWx0ZXIiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIuaW5pdCIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIuaW5pdFNlbGVjdGVkTm9kZXNCeUlkIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5nZXRTZWxlY3RlZE5vZGVzIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5nZXRCZXN0Q29zdE5vZGVTZWxlY3Rpb24iLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLmdldEJlc3RDb3N0Tm9kZVNlbGVjdGlvbi50cmF2ZXJzZSIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIuc2V0Um93TW9kZWwiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLmRlc2VsZWN0QWxsIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5zZWxlY3RBbGwiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLnNlbGVjdEFsbC5yZWN1cnNpdmVseVNlbGVjdCIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIuc2VsZWN0Tm9kZSIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIucmVjdXJzaXZlbHlTZWxlY3RBbGxDaGlsZHJlbiIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIucmVjdXJzaXZlbHlEZXNlbGVjdEFsbENoaWxkcmVuIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5kb1dvcmtPZlNlbGVjdE5vZGUiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLmFkZENzc0NsYXNzRm9yTm9kZV9hbmRJbmZvcm1WaXJ0dWFsUm93TGlzdGVuZXIiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLmRvV29ya09mRGVzZWxlY3RBbGxOb2RlcyIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIuZGVzZWxlY3RSZWFsTm9kZSIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIucmVtb3ZlQ3NzQ2xhc3NGb3JOb2RlIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5kZXNlbGVjdEluZGV4IiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5kZXNlbGVjdE5vZGUiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLnNlbGVjdEluZGV4IiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5zeW5jU2VsZWN0ZWRSb3dzQW5kQ2FsbExpc3RlbmVyIiwiYXdrLmdyaWQuU2VsZWN0aW9uQ29udHJvbGxlci5yZWN1cnNpdmVseUNoZWNrSWZTZWxlY3RlZCIsImF3ay5ncmlkLlNlbGVjdGlvbkNvbnRyb2xsZXIuaXNOb2RlU2VsZWN0ZWQiLCJhd2suZ3JpZC5TZWxlY3Rpb25Db250cm9sbGVyLnVwZGF0ZUdyb3VwUGFyZW50c0lmTmVlZGVkIiwiYXdrLmdyaWQuU2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5IiwiYXdrLmdyaWQuU2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5LmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuU2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5LmluaXQiLCJhd2suZ3JpZC5TZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkuY3JlYXRlQ2hlY2tib3hDb2xEZWYiLCJhd2suZ3JpZC5TZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkuY3JlYXRlQ2hlY2tib3hSZW5kZXJlciIsImF3ay5ncmlkLlNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeS5jcmVhdGVTZWxlY3Rpb25DaGVja2JveCIsImF3ay5ncmlkLnNldENoZWNrYm94U3RhdGUiLCJhd2suZ3JpZC5TdmdGYWN0b3J5IiwiYXdrLmdyaWQuU3ZnRmFjdG9yeS5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLlN2Z0ZhY3RvcnkuZ2V0SW5zdGFuY2UiLCJhd2suZ3JpZC5TdmdGYWN0b3J5LmNyZWF0ZUZpbHRlclN2ZyIsImF3ay5ncmlkLlN2Z0ZhY3RvcnkuY3JlYXRlQ29sdW1uU2hvd2luZ1N2ZyIsImF3ay5ncmlkLlN2Z0ZhY3RvcnkuY3JlYXRlQ29sdW1uSGlkZGVuU3ZnIiwiYXdrLmdyaWQuU3ZnRmFjdG9yeS5jcmVhdGVNZW51U3ZnIiwiYXdrLmdyaWQuU3ZnRmFjdG9yeS5jcmVhdGVBcnJvd1VwU3ZnIiwiYXdrLmdyaWQuU3ZnRmFjdG9yeS5jcmVhdGVBcnJvd0xlZnRTdmciLCJhd2suZ3JpZC5TdmdGYWN0b3J5LmNyZWF0ZUFycm93RG93blN2ZyIsImF3ay5ncmlkLlN2Z0ZhY3RvcnkuY3JlYXRlQXJyb3dSaWdodFN2ZyIsImF3ay5ncmlkLlN2Z0ZhY3RvcnkuY3JlYXRlU21hbGxBcnJvd0Rvd25TdmciLCJhd2suZ3JpZC5TdmdGYWN0b3J5LmNyZWF0ZUFycm93VXBEb3duU3ZnIiwiYXdrLmdyaWQuY3JlYXRlUG9seWdvblN2ZyIsImF3ay5ncmlkLmNyZWF0ZUljb25TdmciLCJhd2suZ3JpZC5jcmVhdGVDaXJjbGUiLCJhd2suZ3JpZC5ncm91cENlbGxSZW5kZXJlckZhY3RvcnkiLCJhd2suZ3JpZC5ncm91cENlbGxSZW5kZXJlckZhY3RvcnkuZ3JvdXBDZWxsUmVuZGVyZXIiLCJhd2suZ3JpZC5ncm91cENlbGxSZW5kZXJlckZhY3RvcnkuYWRkRXhwYW5kQW5kQ29udHJhY3QiLCJhd2suZ3JpZC5ncm91cENlbGxSZW5kZXJlckZhY3RvcnkuYWRkRXhwYW5kQW5kQ29udHJhY3QuZXhwYW5kT3JDb250cmFjdCIsImF3ay5ncmlkLmdyb3VwQ2VsbFJlbmRlcmVyRmFjdG9yeS5zaG93QW5kSGlkZUV4cGFuZEFuZENvbnRyYWN0IiwiYXdrLmdyaWQuZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5LmNyZWF0ZUZyb21Jbm5lclJlbmRlcmVyIiwiYXdrLmdyaWQuZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5LmV4cGFuZEdyb3VwIiwiYXdrLmdyaWQuZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5LmNyZWF0ZUdyb3VwRXhwYW5kSWNvbiIsImF3ay5ncmlkLmdyb3VwQ2VsbFJlbmRlcmVyRmFjdG9yeS5jcmVhdGVGb290ZXJDZWxsIiwiYXdrLmdyaWQuZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5LmdldEdyb3VwTmFtZSIsImF3ay5ncmlkLmdyb3VwQ2VsbFJlbmRlcmVyRmFjdG9yeS5jcmVhdGVHcm91cENlbGwiLCJhd2suZ3JpZC5ncm91cENlbGxSZW5kZXJlckZhY3RvcnkuY3JlYXRlTGVhZkNlbGwiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlciIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuaW5pdCIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLnNldFJvd01vZGVsIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuc2V0TWFpblJvd1dpZHRocyIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmZpbmRBbGxFbGVtZW50cyIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLnJlZnJlc2hWaWV3IiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuc29mdFJlZnJlc2hWaWV3IiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuc29mdFJlZnJlc2hDZWxsIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIucm93RGF0YUNoYW5nZWQiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5yZWZyZXNoQWxsVmlydHVhbFJvd3MiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5yZWZyZXNoR3JvdXBSb3dzIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIucmVtb3ZlVmlydHVhbFJvd3MiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5yZW1vdmVWaXJ0dWFsUm93IiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuZHJhd1ZpcnR1YWxSb3dzIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuZ2V0Rmlyc3RWaXJ0dWFsUmVuZGVyZWRSb3ciLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5nZXRMYXN0VmlydHVhbFJlbmRlcmVkUm93IiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuZW5zdXJlUm93c1JlbmRlcmVkIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuaW5zZXJ0Um93IiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuZ2V0RGF0YUZvck5vZGUiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5jcmVhdGVWYWx1ZUdldHRlciIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmNyZWF0ZUNoaWxkU2NvcGVPck51bGwiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5jb21waWxlQW5kQWRkIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuY3JlYXRlQ2VsbEZyb21Db2xEZWYiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5hZGRDbGFzc2VzVG9Sb3ciLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5jcmVhdGVSb3dDb250YWluZXIiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5nZXRJbmRleE9mUmVuZGVyZWROb2RlIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuY3JlYXRlR3JvdXBFbGVtZW50IiwiYXdrLmdyaWQuUm93UmVuZGVyZXIucHV0RGF0YUludG9DZWxsIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIudXNlQ2VsbFJlbmRlcmVyIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuYWRkU3R5bGVzRnJvbUNvbGxEZWYiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5hZGRDbGFzc2VzRnJvbUNvbGxEZWYiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5hZGRDbGFzc2VzVG9DZWxsIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuYWRkQ2xhc3Nlc0Zyb21SdWxlcyIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmNyZWF0ZUNlbGwiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5hZGRDZWxsTmF2aWdhdGlvbkhhbmRsZXIiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5uYXZpZ2F0ZVRvTmV4dENlbGwiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5nZXROZXh0Q2VsbFRvRm9jdXMiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5mb2N1c0NlbGwiLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5nZXRGb2N1c2VkQ2VsbCIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLnNldEZvY3VzZWRDZWxsIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIucG9wdWxhdGVBbmRTdHlsZUdyaWRDZWxsIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIucG9wdWxhdGVHcmlkQ2VsbCIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmFkZENlbGxEb3VibGVDbGlja2VkSGFuZGxlciIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmFkZENlbGxDbGlja2VkSGFuZGxlciIsImF3ay5ncmlkLlJvd1JlbmRlcmVyLmlzQ2VsbEVkaXRhYmxlIiwiYXdrLmdyaWQuUm93UmVuZGVyZXIuc3RvcEVkaXRpbmciLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5zdGFydEVkaXRpbmciLCJhd2suZ3JpZC5Sb3dSZW5kZXJlci5zdGFydEVkaXRpbmdOZXh0Q2VsbCIsImF3ay5ncmlkLkhlYWRlclJlbmRlcmVyIiwiYXdrLmdyaWQuSGVhZGVyUmVuZGVyZXIuY29uc3RydWN0b3IiLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5pbml0IiwiYXdrLmdyaWQuSGVhZGVyUmVuZGVyZXIuZmluZEFsbEVsZW1lbnRzIiwiYXdrLmdyaWQuSGVhZGVyUmVuZGVyZXIucmVmcmVzaEhlYWRlciIsImF3ay5ncmlkLkhlYWRlclJlbmRlcmVyLmluc2VydEhlYWRlcnNXaXRoR3JvdXBpbmciLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5jcmVhdGVHcm91cGVkSGVhZGVyQ2VsbCIsImF3ay5ncmlkLkhlYWRlclJlbmRlcmVyLmFkZEdyb3VwRXhwYW5kSWNvbiIsImF3ay5ncmlkLkhlYWRlclJlbmRlcmVyLmFkZERyYWdIYW5kbGVyIiwiYXdrLmdyaWQuSGVhZGVyUmVuZGVyZXIuc2V0V2lkdGhPZkdyb3VwSGVhZGVyQ2VsbCIsImF3ay5ncmlkLkhlYWRlclJlbmRlcmVyLmluc2VydEhlYWRlcnNXaXRob3V0R3JvdXBpbmciLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5jcmVhdGVIZWFkZXJDZWxsIiwiYXdrLmdyaWQuSGVhZGVyUmVuZGVyZXIuYWRkSGVhZGVyQ2xhc3Nlc0Zyb21Db2xsRGVmIiwiYXdrLmdyaWQuSGVhZGVyUmVuZGVyZXIuZ2V0TmV4dFNvcnREaXJlY3Rpb24iLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5hZGRTb3J0SGFuZGxpbmciLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci51cGRhdGVTb3J0SWNvbnMiLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5ncm91cERyYWdDYWxsYmFja0ZhY3RvcnkiLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5hZGp1c3RDb2x1bW5XaWR0aCIsImF3ay5ncmlkLkhlYWRlclJlbmRlcmVyLmhlYWRlckRyYWdDYWxsYmFja0ZhY3RvcnkiLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci5zdG9wRHJhZ2dpbmciLCJhd2suZ3JpZC5IZWFkZXJSZW5kZXJlci51cGRhdGVGaWx0ZXJJY29ucyIsImF3ay5ncmlkLkdyb3VwQ3JlYXRvciIsImF3ay5ncmlkLkdyb3VwQ3JlYXRvci5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkdyb3VwQ3JlYXRvci5nZXRJbnN0YW5jZSIsImF3ay5ncmlkLkdyb3VwQ3JlYXRvci5ncm91cCIsImF3ay5ncmlkLkdyb3VwQ3JlYXRvci5pc0V4cGFuZGVkIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmluaXQiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuY3JlYXRlTW9kZWwiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuZ2V0TW9kZWwiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuZm9yRWFjaEluTWVtb3J5IiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmZvckVhY2hJbk1lbW9yeS5kb0NhbGxiYWNrIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLnVwZGF0ZU1vZGVsIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmRlZmF1bHRHcm91cEFnZ0Z1bmN0aW9uRmFjdG9yeSIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5kZWZhdWx0R3JvdXBBZ2dGdW5jdGlvbkZhY3RvcnkuZ3JvdXBBZ2dGdW5jdGlvbiIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5kZWZhdWx0R3JvdXBBZ2dGdW5jdGlvbkZhY3RvcnkuYWdncmVnYXRlQ29sdW1uIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmdldFZhbHVlIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmRvQWdncmVnYXRlIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmV4cGFuZE9yQ29sbGFwc2VBbGwiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIucmVjdXJzaXZlbHlDbGVhckFnZ0RhdGEiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIucmVjdXJzaXZlbHlDcmVhdGVBZ2dEYXRhIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmRvU29ydCIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5yZWN1cnNpdmVseVJlc2V0U29ydCIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5zb3J0TGlzdCIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5zb3J0TGlzdC5jb21wYXJlIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLmRvR3JvdXBpbmciLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuZG9FeHBhbmRpbmciLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuZG9GaWx0ZXIiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuZmlsdGVySXRlbXMiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIucmVjdXJzaXZlbHlSZXNldEZpbHRlciIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5zZXRBbGxSb3dzIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLnJlY3Vyc2l2ZWx5QWRkSWRUb05vZGVzIiwiYXdrLmdyaWQuSW5NZW1vcnlSb3dDb250cm9sbGVyLnJlY3Vyc2l2ZWx5Q2hlY2tVc2VyUHJvdmlkZWROb2RlcyIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5nZXRUb3RhbENoaWxkQ291bnQiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuZG9Hcm91cE1hcHBpbmciLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuYWRkVG9NYXAiLCJhd2suZ3JpZC5Jbk1lbW9yeVJvd0NvbnRyb2xsZXIuY3JlYXRlRm9vdGVyTm9kZSIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5kb2VzUm93UGFzc0ZpbHRlciIsImF3ay5ncmlkLkluTWVtb3J5Um93Q29udHJvbGxlci5hZ2dyZWdhdGVSb3dGb3JRdWlja0ZpbHRlciIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlciIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5pbml0IiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLnNldERhdGFzb3VyY2UiLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIucmVzZXQiLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIuY3JlYXRlTm9kZXNGcm9tUm93cyIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5yZW1vdmVGcm9tTG9hZGluZyIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5wYWdlTG9hZEZhaWxlZCIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5wYWdlTG9hZGVkIiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLnB1dFBhZ2VJbnRvQ2FjaGVBbmRQdXJnZSIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5jaGVja01heFJvd0FuZEluZm9ybVJvd1JlbmRlcmVyIiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmlzUGFnZUFscmVhZHlMb2FkaW5nIiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmRvTG9hZE9yUXVldWUiLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIuYWRkVG9RdWV1ZUFuZFB1cmdlUXVldWUiLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIuZmluZExlYXN0UmVjZW50bHlBY2Nlc3NlZFBhZ2UiLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIuY2hlY2tRdWV1ZUZvck5leHRMb2FkIiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmxvYWRQYWdlIiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmxvYWRQYWdlLnN1Y2Nlc3NDYWxsYmFjayIsImF3ay5ncmlkLlZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5sb2FkUGFnZS5mYWlsQ2FsbGJhY2siLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIucmVxdWVzdElzRGFlbW9uIiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmdldFZpcnR1YWxSb3ciLCJhd2suZ3JpZC5WaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIuZm9yRWFjaEluTWVtb3J5IiwiYXdrLmdyaWQuVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmdldE1vZGVsIiwiYXdrLmdyaWQuUGFnaW5hdGlvbkNvbnRyb2xsZXIiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLlBhZ2luYXRpb25Db250cm9sbGVyLmluaXQiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5zZXREYXRhc291cmNlIiwiYXdrLmdyaWQuUGFnaW5hdGlvbkNvbnRyb2xsZXIucmVzZXQiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5zZXRUb3RhbExhYmVscyIsImF3ay5ncmlkLlBhZ2luYXRpb25Db250cm9sbGVyLmNhbGN1bGF0ZVRvdGFsUGFnZXMiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5wYWdlTG9hZGVkIiwiYXdrLmdyaWQuUGFnaW5hdGlvbkNvbnRyb2xsZXIudXBkYXRlUm93TGFiZWxzIiwiYXdrLmdyaWQuUGFnaW5hdGlvbkNvbnRyb2xsZXIubG9hZFBhZ2UiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5sb2FkUGFnZS5zdWNjZXNzQ2FsbGJhY2siLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5sb2FkUGFnZS5mYWlsQ2FsbGJhY2siLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5pc0NhbGxEYWVtb24iLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5vbkJ0TmV4dCIsImF3ay5ncmlkLlBhZ2luYXRpb25Db250cm9sbGVyLm9uQnRQcmV2aW91cyIsImF3ay5ncmlkLlBhZ2luYXRpb25Db250cm9sbGVyLm9uQnRGaXJzdCIsImF3ay5ncmlkLlBhZ2luYXRpb25Db250cm9sbGVyLm9uQnRMYXN0IiwiYXdrLmdyaWQuUGFnaW5hdGlvbkNvbnRyb2xsZXIuaXNaZXJvUGFnZXNUb0Rpc3BsYXkiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5lbmFibGVPckRpc2FibGVCdXR0b25zIiwiYXdrLmdyaWQuUGFnaW5hdGlvbkNvbnRyb2xsZXIuY3JlYXRlVGVtcGxhdGUiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5nZXRHdWkiLCJhd2suZ3JpZC5QYWdpbmF0aW9uQ29udHJvbGxlci5zZXR1cENvbXBvbmVudHMiLCJhd2suZ3JpZC5UZW1wbGF0ZVNlcnZpY2UiLCJhd2suZ3JpZC5UZW1wbGF0ZVNlcnZpY2UuY29uc3RydWN0b3IiLCJhd2suZ3JpZC5UZW1wbGF0ZVNlcnZpY2UuaW5pdCIsImF3ay5ncmlkLlRlbXBsYXRlU2VydmljZS5nZXRUZW1wbGF0ZSIsImF3ay5ncmlkLlRlbXBsYXRlU2VydmljZS5oYW5kbGVIdHRwUmVzdWx0IiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0IiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0LmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0LnNldHVwUGFuZWxzIiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0LnNldHVwUGFuZWwiLCJhd2suZ3JpZC5Cb3JkZXJMYXlvdXQuZ2V0R3VpIiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0LmRvTGF5b3V0IiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0LmxheW91dENoaWxkIiwiYXdrLmdyaWQuQm9yZGVyTGF5b3V0LmxheW91dEhlaWdodCIsImF3ay5ncmlkLkJvcmRlckxheW91dC5sYXlvdXRXaWR0aCIsImF3ay5ncmlkLkJvcmRlckxheW91dC5zZXRFYXN0VmlzaWJsZSIsImF3ay5ncmlkLkJvcmRlckxheW91dC5zZXRPdmVybGF5VmlzaWJsZSIsImF3ay5ncmlkLkJvcmRlckxheW91dC5zZXRTb3V0aFZpc2libGUiLCJhd2suZ3JpZC5HcmlkUGFuZWwiLCJhd2suZ3JpZC5HcmlkUGFuZWwuY29uc3RydWN0b3IiLCJhd2suZ3JpZC5HcmlkUGFuZWwuc2V0dXBDb21wb25lbnRzIiwiYXdrLmdyaWQuR3JpZFBhbmVsLmVuc3VyZUluZGV4VmlzaWJsZSIsImF3ay5ncmlkLkdyaWRQYW5lbC5lbnN1cmVDb2xJbmRleFZpc2libGUiLCJhd2suZ3JpZC5HcmlkUGFuZWwuc2hvd0xvYWRpbmciLCJhd2suZ3JpZC5HcmlkUGFuZWwuZ2V0V2lkdGhGb3JTaXplQ29sc1RvRml0IiwiYXdrLmdyaWQuR3JpZFBhbmVsLmluaXQiLCJhd2suZ3JpZC5HcmlkUGFuZWwuc2V0Um93TW9kZWwiLCJhd2suZ3JpZC5HcmlkUGFuZWwuZ2V0Qm9keUNvbnRhaW5lciIsImF3ay5ncmlkLkdyaWRQYW5lbC5nZXRCb2R5Vmlld3BvcnQiLCJhd2suZ3JpZC5HcmlkUGFuZWwuZ2V0UGlubmVkQ29sc0NvbnRhaW5lciIsImF3ay5ncmlkLkdyaWRQYW5lbC5nZXRIZWFkZXJDb250YWluZXIiLCJhd2suZ3JpZC5HcmlkUGFuZWwuZ2V0Um9vdCIsImF3ay5ncmlkLkdyaWRQYW5lbC5nZXRQaW5uZWRIZWFkZXIiLCJhd2suZ3JpZC5HcmlkUGFuZWwuZ2V0SGVhZGVyIiwiYXdrLmdyaWQuR3JpZFBhbmVsLmdldFJvd3NQYXJlbnQiLCJhd2suZ3JpZC5HcmlkUGFuZWwuZmluZEVsZW1lbnRzIiwiYXdrLmdyaWQuR3JpZFBhbmVsLnNldEJvZHlDb250YWluZXJXaWR0aCIsImF3ay5ncmlkLkdyaWRQYW5lbC5zZXRQaW5uZWRDb2xDb250YWluZXJXaWR0aCIsImF3ay5ncmlkLkdyaWRQYW5lbC5zaG93UGlubmVkQ29sQ29udGFpbmVyc0lmTmVlZGVkIiwiYXdrLmdyaWQuR3JpZFBhbmVsLnNldEhlYWRlckhlaWdodCIsImF3ay5ncmlkLkdyaWRQYW5lbC5zZXRQaW5uZWRDb2xIZWlnaHQiLCJhd2suZ3JpZC5HcmlkUGFuZWwuYWRkU2Nyb2xsTGlzdGVuZXIiLCJhd2suZ3JpZC5HcmlkUGFuZWwuc2Nyb2xsSGVhZGVyIiwiYXdrLmdyaWQuR3JpZFBhbmVsLnNjcm9sbFBpbm5lZCIsImF3ay5ncmlkLkRyYWdBbmREcm9wU2VydmljZSIsImF3ay5ncmlkLkRyYWdBbmREcm9wU2VydmljZS5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkRyYWdBbmREcm9wU2VydmljZS5nZXRJbnN0YW5jZSIsImF3ay5ncmlkLkRyYWdBbmREcm9wU2VydmljZS5zdG9wRHJhZ2dpbmciLCJhd2suZ3JpZC5EcmFnQW5kRHJvcFNlcnZpY2Uuc2V0RHJhZ0Nzc0NsYXNzZXMiLCJhd2suZ3JpZC5EcmFnQW5kRHJvcFNlcnZpY2UuYWRkRHJhZ1NvdXJjZSIsImF3ay5ncmlkLkRyYWdBbmREcm9wU2VydmljZS5vbk1vdXNlRG93bkRyYWdTb3VyY2UiLCJhd2suZ3JpZC5EcmFnQW5kRHJvcFNlcnZpY2UuYWRkRHJvcFRhcmdldCIsImF3ay5ncmlkLkFnTGlzdCIsImF3ay5ncmlkLkFnTGlzdC5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkFnTGlzdC5zZXRFbXB0eU1lc3NhZ2UiLCJhd2suZ3JpZC5BZ0xpc3QuZ2V0VW5pcXVlSWQiLCJhd2suZ3JpZC5BZ0xpc3QuYWRkU3R5bGVzIiwiYXdrLmdyaWQuQWdMaXN0LmFkZENzc0NsYXNzIiwiYXdrLmdyaWQuQWdMaXN0LmFkZERyYWdTb3VyY2UiLCJhd2suZ3JpZC5BZ0xpc3QuYWRkTW9kZWxDaGFuZ2VkTGlzdGVuZXIiLCJhd2suZ3JpZC5BZ0xpc3QuYWRkSXRlbVNlbGVjdGVkTGlzdGVuZXIiLCJhd2suZ3JpZC5BZ0xpc3QuYWRkQmVmb3JlRHJvcExpc3RlbmVyIiwiYXdrLmdyaWQuQWdMaXN0LmZpcmVNb2RlbENoYW5nZWQiLCJhd2suZ3JpZC5BZ0xpc3QuZmlyZUl0ZW1TZWxlY3RlZCIsImF3ay5ncmlkLkFnTGlzdC5maXJlQmVmb3JlRHJvcCIsImF3ay5ncmlkLkFnTGlzdC5zZXR1cENvbXBvbmVudHMiLCJhd2suZ3JpZC5BZ0xpc3Quc2V0TW9kZWwiLCJhd2suZ3JpZC5BZ0xpc3QuZ2V0TW9kZWwiLCJhd2suZ3JpZC5BZ0xpc3Quc2V0Q2VsbFJlbmRlcmVyIiwiYXdrLmdyaWQuQWdMaXN0LnJlZnJlc2hWaWV3IiwiYXdrLmdyaWQuQWdMaXN0Lmluc2VydFJvd3MiLCJhd2suZ3JpZC5BZ0xpc3QuaW5zZXJ0QmxhbmtNZXNzYWdlIiwiYXdrLmdyaWQuQWdMaXN0LnNldHVwQXNEcm9wVGFyZ2V0IiwiYXdrLmdyaWQuQWdMaXN0LmV4dGVybmFsQWNjZXB0RHJhZyIsImF3ay5ncmlkLkFnTGlzdC5leHRlcm5hbERyb3AiLCJhd2suZ3JpZC5BZ0xpc3QuZXh0ZXJuYWxOb0Ryb3AiLCJhd2suZ3JpZC5BZ0xpc3QuYWRkSXRlbVRvTGlzdCIsImF3ay5ncmlkLkFnTGlzdC5hZGREcmFnQW5kRHJvcFRvTGlzdEl0ZW0iLCJhd2suZ3JpZC5BZ0xpc3QuaW50ZXJuYWxBY2NlcHREcmFnIiwiYXdrLmdyaWQuQWdMaXN0LmludGVybmFsRHJvcCIsImF3ay5ncmlkLkFnTGlzdC5pbnRlcm5hbE5vRHJvcCIsImF3ay5ncmlkLkFnTGlzdC5kcmFnQWZ0ZXJUaGlzSXRlbSIsImF3ay5ncmlkLkFnTGlzdC5zZXREcm9wQ3NzQ2xhc3NlcyIsImF3ay5ncmlkLkFnTGlzdC5nZXRHdWkiLCJhd2suZ3JpZC5Db2x1bW5TZWxlY3Rpb25QYW5lbCIsImF3ay5ncmlkLkNvbHVtblNlbGVjdGlvblBhbmVsLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuQ29sdW1uU2VsZWN0aW9uUGFuZWwuY29sdW1uc0NoYW5nZWQiLCJhd2suZ3JpZC5Db2x1bW5TZWxlY3Rpb25QYW5lbC5nZXREcmFnU291cmNlIiwiYXdrLmdyaWQuQ29sdW1uU2VsZWN0aW9uUGFuZWwuY29sdW1uQ2VsbFJlbmRlcmVyIiwiYXdrLmdyaWQuQ29sdW1uU2VsZWN0aW9uUGFuZWwuY29sdW1uQ2VsbFJlbmRlcmVyLnNob3dFdmVudExpc3RlbmVyIiwiYXdrLmdyaWQuQ29sdW1uU2VsZWN0aW9uUGFuZWwuc2V0dXBDb21wb25lbnRzIiwiYXdrLmdyaWQuQ29sdW1uU2VsZWN0aW9uUGFuZWwuc2V0U2VsZWN0ZWQiLCJhd2suZ3JpZC5Db2x1bW5TZWxlY3Rpb25QYW5lbC5nZXRHdWkiLCJhd2suZ3JpZC5Hcm91cFNlbGVjdGlvblBhbmVsIiwiYXdrLmdyaWQuR3JvdXBTZWxlY3Rpb25QYW5lbC5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkdyb3VwU2VsZWN0aW9uUGFuZWwuY29sdW1uc0NoYW5nZWQiLCJhd2suZ3JpZC5Hcm91cFNlbGVjdGlvblBhbmVsLmFkZERyYWdTb3VyY2UiLCJhd2suZ3JpZC5Hcm91cFNlbGVjdGlvblBhbmVsLmNvbHVtbkNlbGxSZW5kZXJlciIsImF3ay5ncmlkLkdyb3VwU2VsZWN0aW9uUGFuZWwuc2V0dXBDb21wb25lbnRzIiwiYXdrLmdyaWQuR3JvdXBTZWxlY3Rpb25QYW5lbC5vbkdyb3VwaW5nQ2hhbmdlZCIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0IiwiYXdrLmdyaWQuQWdEcm9wZG93bkxpc3QuY29uc3RydWN0b3IiLCJhd2suZ3JpZC5BZ0Ryb3Bkb3duTGlzdC5zZXRXaWR0aCIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0LmFkZEl0ZW1TZWxlY3RlZExpc3RlbmVyIiwiYXdrLmdyaWQuQWdEcm9wZG93bkxpc3QuZmlyZUl0ZW1TZWxlY3RlZCIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0LnNldHVwQ29tcG9uZW50cyIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0Lml0ZW1TZWxlY3RlZCIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0Lm9uQ2xpY2siLCJhd2suZ3JpZC5BZ0Ryb3Bkb3duTGlzdC5nZXRHdWkiLCJhd2suZ3JpZC5BZ0Ryb3Bkb3duTGlzdC5zZXRTZWxlY3RlZCIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0LnNldENlbGxSZW5kZXJlciIsImF3ay5ncmlkLkFnRHJvcGRvd25MaXN0LnJlZnJlc2hWaWV3IiwiYXdrLmdyaWQuQWdEcm9wZG93bkxpc3Quc2V0TW9kZWwiLCJhd2suZ3JpZC5WYWx1ZXNTZWxlY3Rpb25QYW5lbCIsImF3ay5ncmlkLlZhbHVlc1NlbGVjdGlvblBhbmVsLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuVmFsdWVzU2VsZWN0aW9uUGFuZWwuY29sdW1uc0NoYW5nZWQiLCJhd2suZ3JpZC5WYWx1ZXNTZWxlY3Rpb25QYW5lbC5hZGREcmFnU291cmNlIiwiYXdrLmdyaWQuVmFsdWVzU2VsZWN0aW9uUGFuZWwuY2VsbFJlbmRlcmVyIiwiYXdrLmdyaWQuVmFsdWVzU2VsZWN0aW9uUGFuZWwuc2V0dXBDb21wb25lbnRzIiwiYXdrLmdyaWQuVmFsdWVzU2VsZWN0aW9uUGFuZWwuYmVmb3JlRHJvcExpc3RlbmVyIiwiYXdrLmdyaWQuVmFsdWVzU2VsZWN0aW9uUGFuZWwub25WYWx1ZXNDaGFuZ2VkIiwiYXdrLmdyaWQuVmVydGljYWxTdGFjayIsImF3ay5ncmlkLlZlcnRpY2FsU3RhY2suY29uc3RydWN0b3IiLCJhd2suZ3JpZC5WZXJ0aWNhbFN0YWNrLmFkZFBhbmVsIiwiYXdrLmdyaWQuVmVydGljYWxTdGFjay5nZXRHdWkiLCJhd2suZ3JpZC5WZXJ0aWNhbFN0YWNrLmRvTGF5b3V0IiwiYXdrLmdyaWQuVG9vbFBhbmVsIiwiYXdrLmdyaWQuVG9vbFBhbmVsLmNvbnN0cnVjdG9yIiwiYXdrLmdyaWQuVG9vbFBhbmVsLmluaXQiLCJhd2suZ3JpZC5HcmlkQXBpIiwiYXdrLmdyaWQuR3JpZEFwaS5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkdyaWRBcGkuc2V0RGF0YXNvdXJjZSIsImF3ay5ncmlkLkdyaWRBcGkub25OZXdEYXRhc291cmNlIiwiYXdrLmdyaWQuR3JpZEFwaS5zZXRSb3dzIiwiYXdrLmdyaWQuR3JpZEFwaS5vbk5ld1Jvd3MiLCJhd2suZ3JpZC5HcmlkQXBpLm9uTmV3Q29scyIsImF3ay5ncmlkLkdyaWRBcGkudW5zZWxlY3RBbGwiLCJhd2suZ3JpZC5HcmlkQXBpLnJlZnJlc2hWaWV3IiwiYXdrLmdyaWQuR3JpZEFwaS5zb2Z0UmVmcmVzaFZpZXciLCJhd2suZ3JpZC5HcmlkQXBpLnJlZnJlc2hHcm91cFJvd3MiLCJhd2suZ3JpZC5HcmlkQXBpLnJlZnJlc2hIZWFkZXIiLCJhd2suZ3JpZC5HcmlkQXBpLmdldE1vZGVsIiwiYXdrLmdyaWQuR3JpZEFwaS5vbkdyb3VwRXhwYW5kZWRPckNvbGxhcHNlZCIsImF3ay5ncmlkLkdyaWRBcGkuZXhwYW5kQWxsIiwiYXdrLmdyaWQuR3JpZEFwaS5jb2xsYXBzZUFsbCIsImF3ay5ncmlkLkdyaWRBcGkuYWRkVmlydHVhbFJvd0xpc3RlbmVyIiwiYXdrLmdyaWQuR3JpZEFwaS5yb3dEYXRhQ2hhbmdlZCIsImF3ay5ncmlkLkdyaWRBcGkuc2V0UXVpY2tGaWx0ZXIiLCJhd2suZ3JpZC5HcmlkQXBpLnNlbGVjdEluZGV4IiwiYXdrLmdyaWQuR3JpZEFwaS5kZXNlbGVjdEluZGV4IiwiYXdrLmdyaWQuR3JpZEFwaS5zZWxlY3ROb2RlIiwiYXdrLmdyaWQuR3JpZEFwaS5kZXNlbGVjdE5vZGUiLCJhd2suZ3JpZC5HcmlkQXBpLnNlbGVjdEFsbCIsImF3ay5ncmlkLkdyaWRBcGkuZGVzZWxlY3RBbGwiLCJhd2suZ3JpZC5HcmlkQXBpLnJlY29tcHV0ZUFnZ3JlZ2F0ZXMiLCJhd2suZ3JpZC5HcmlkQXBpLnNpemVDb2x1bW5zVG9GaXQiLCJhd2suZ3JpZC5HcmlkQXBpLnNob3dMb2FkaW5nIiwiYXdrLmdyaWQuR3JpZEFwaS5pc05vZGVTZWxlY3RlZCIsImF3ay5ncmlkLkdyaWRBcGkuZ2V0U2VsZWN0ZWROb2RlcyIsImF3ay5ncmlkLkdyaWRBcGkuZ2V0QmVzdENvc3ROb2RlU2VsZWN0aW9uIiwiYXdrLmdyaWQuR3JpZEFwaS5lbnN1cmVDb2xJbmRleFZpc2libGUiLCJhd2suZ3JpZC5HcmlkQXBpLmVuc3VyZUluZGV4VmlzaWJsZSIsImF3ay5ncmlkLkdyaWRBcGkuZW5zdXJlTm9kZVZpc2libGUiLCJhd2suZ3JpZC5HcmlkQXBpLmZvckVhY2hJbk1lbW9yeSIsImF3ay5ncmlkLkdyaWRBcGkuZ2V0RmlsdGVyQXBpRm9yQ29sRGVmIiwiYXdrLmdyaWQuR3JpZEFwaS5nZXRGaWx0ZXJBcGkiLCJhd2suZ3JpZC5HcmlkQXBpLmdldENvbHVtbkRlZiIsImF3ay5ncmlkLkdyaWRBcGkub25GaWx0ZXJDaGFuZ2VkIiwiYXdrLmdyaWQuR3JpZEFwaS5zZXRTb3J0TW9kZWwiLCJhd2suZ3JpZC5HcmlkQXBpLmdldFNvcnRNb2RlbCIsImF3ay5ncmlkLkdyaWRBcGkuc2V0RmlsdGVyTW9kZWwiLCJhd2suZ3JpZC5HcmlkQXBpLmdldEZpbHRlck1vZGVsIiwiYXdrLmdyaWQuR3JpZEFwaS5nZXRGb2N1c2VkQ2VsbCIsImF3ay5ncmlkLkdyaWRBcGkuc2V0Rm9jdXNlZENlbGwiLCJhd2suZ3JpZC5HcmlkQXBpLnNob3dUb29sUGFuZWwiLCJhd2suZ3JpZC5HcmlkQXBpLmlzVG9vbFBhbmVsU2hvd2luZyIsImF3ay5ncmlkLkdyaWRBcGkuaGlkZUNvbHVtbiIsImF3ay5ncmlkLkdyaWRBcGkuaGlkZUNvbHVtbnMiLCJhd2suZ3JpZC5HcmlkQXBpLmdldENvbHVtblN0YXRlIiwiYXdrLmdyaWQuR3JpZEFwaS5zZXRDb2x1bW5TdGF0ZSIsImF3ay5ncmlkLkdyaWRBcGkuZG9MYXlvdXQiLCJhd2suZ3JpZC5HcmlkIiwiYXdrLmdyaWQuR3JpZC5jb25zdHJ1Y3RvciIsImF3ay5ncmlkLkdyaWQucGVyaW9kaWNhbGx5RG9MYXlvdXQiLCJhd2suZ3JpZC5HcmlkLnNldHVwQ29tcG9uZW50cyIsImF3ay5ncmlkLkdyaWQuc2hvd1Rvb2xQYW5lbCIsImF3ay5ncmlkLkdyaWQuaXNUb29sUGFuZWxTaG93aW5nIiwiYXdrLmdyaWQuR3JpZC5zZXREYXRhc291cmNlIiwiYXdrLmdyaWQuR3JpZC5yZWZyZXNoSGVhZGVyQW5kQm9keSIsImF3ay5ncmlkLkdyaWQuc2V0RmluaXNoZWQiLCJhd2suZ3JpZC5HcmlkLmdldFF1aWNrRmlsdGVyIiwiYXdrLmdyaWQuR3JpZC5vblF1aWNrRmlsdGVyQ2hhbmdlZCIsImF3ay5ncmlkLkdyaWQub25GaWx0ZXJDaGFuZ2VkIiwiYXdrLmdyaWQuR3JpZC5vblJvd0NsaWNrZWQiLCJhd2suZ3JpZC5HcmlkLnNob3dMb2FkaW5nUGFuZWwiLCJhd2suZ3JpZC5HcmlkLnNldHVwQ29sdW1ucyIsImF3ay5ncmlkLkdyaWQudXBkYXRlTW9kZWxBbmRSZWZyZXNoIiwiYXdrLmdyaWQuR3JpZC5zZXRSb3dzIiwiYXdrLmdyaWQuR3JpZC5lbnN1cmVOb2RlVmlzaWJsZSIsImF3ay5ncmlkLkdyaWQuZ2V0RmlsdGVyTW9kZWwiLCJhd2suZ3JpZC5HcmlkLnNldEZvY3VzZWRDZWxsIiwiYXdrLmdyaWQuR3JpZC5nZXRTb3J0TW9kZWwiLCJhd2suZ3JpZC5HcmlkLnNldFNvcnRNb2RlbCIsImF3ay5ncmlkLkdyaWQub25Tb3J0aW5nQ2hhbmdlZCIsImF3ay5ncmlkLkdyaWQuYWRkVmlydHVhbFJvd0xpc3RlbmVyIiwiYXdrLmdyaWQuR3JpZC5vblZpcnR1YWxSb3dTZWxlY3RlZCIsImF3ay5ncmlkLkdyaWQub25WaXJ0dWFsUm93UmVtb3ZlZCIsImF3ay5ncmlkLkdyaWQub25OZXdDb2xzIiwiYXdrLmdyaWQuR3JpZC51cGRhdGVCb2R5Q29udGFpbmVyV2lkdGhBZnRlckNvbFJlc2l6ZSIsImF3ay5ncmlkLkdyaWQudXBkYXRlUGlubmVkQ29sQ29udGFpbmVyV2lkdGhBZnRlckNvbFJlc2l6ZSIsImF3ay5ncmlkLkdyaWQuZG9MYXlvdXQiLCJBbmd1bGFyRGlyZWN0aXZlQ29udHJvbGxlciIsImFuZ3VsYXJHcmlkR2xvYmFsRnVuY3Rpb24iXSwibWFwcGluZ3MiOiJBQUNBLElBQU8sR0FBRyxDQThXVDtBQTlXRCxXQUFPLEdBQUc7SUFBQ0EsSUFBQUEsSUFBSUEsQ0E4V2RBO0lBOVdVQSxXQUFBQSxJQUFJQSxFQUFDQSxDQUFDQTtR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d0JBQ2xCQSxJQUFJQSxlQUFlQSxHQUFHQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTt3QkFDdkNBLEFBQ0FBLHdDQUR3Q0E7d0JBQ3hDQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxlQUFlQSxLQUFLQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTs0QkFFdENBLE1BQU1BLENBQUNBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO2dDQUNkQSxLQUFLQSxTQUFTQSxDQUFDQSxHQUFHQTtvQ0FDZEEsZUFBZUEsSUFBSUEsZUFBZUEsQ0FBQ0E7b0NBQ25DQSxLQUFLQSxDQUFDQTtnQ0FDVkEsS0FBS0EsU0FBU0EsQ0FBQ0EsR0FBR0E7b0NBQ2RBLEVBQUVBLENBQUNBLENBQUNBLGVBQWVBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO3dDQUMzQkEsZUFBZUEsR0FBR0EsZUFBZUEsQ0FBQ0E7b0NBQ3RDQSxDQUFDQTtvQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsZUFBZUEsR0FBR0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0NBQzNDQSxlQUFlQSxHQUFHQSxlQUFlQSxDQUFDQTtvQ0FDdENBLENBQUNBO29DQUNEQSxLQUFLQSxDQUFDQTtnQ0FDVkEsS0FBS0EsU0FBU0EsQ0FBQ0EsR0FBR0E7b0NBQ2RBLEVBQUVBLENBQUNBLENBQUNBLGVBQWVBLEtBQUtBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO3dDQUMzQkEsZUFBZUEsR0FBR0EsZUFBZUEsQ0FBQ0E7b0NBQ3RDQSxDQUFDQTtvQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsZUFBZUEsR0FBR0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7d0NBQzNDQSxlQUFlQSxHQUFHQSxlQUFlQSxDQUFDQTtvQ0FDdENBLENBQUNBO29DQUNEQSxLQUFLQSxDQUFDQTs0QkFDZEEsQ0FBQ0E7d0JBRUxBLENBQUNBO29CQUNMQSxDQUFDQTtvQkFDREEsTUFBTUEsQ0FBQ0Es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Q3ZCQSxDQUFDQTtRQUNEQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxXQUFXQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUMvREEsQ0FBQ0E7QUFFTCxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7QUMxRWYiLCJmaWxlIjoib3V0cHV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIEZVTkNUSU9OX1NUUklQX0NPTU1FTlRTID0gLygoXFwvXFwvLiokKXwoXFwvXFwqW1xcc1xcU10qP1xcKlxcLykpL21nO1xyXG4gICAgdmFyIEZVTkNUSU9OX0FSR1VNRU5UX05BTUVTID0gLyhbXlxccyxdKykvZztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVXRpbHMge1xyXG5cclxuICAgICAgICBzdGF0aWMgaXRlcmF0ZU9iamVjdChvYmplY3Q6IGFueSwgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGtleSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgbWFwKGFycmF5OiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdDogYW55ID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gYXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFwcGVkSXRlbSA9IGNhbGxiYWNrKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobWFwcGVkSXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBmb3JFYWNoKGFycmF5OiBhbnksIGNhbGxiYWNrOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcnJheSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpXTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlLCBpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGdldEZ1bmN0aW9uUGFyYW1ldGVycyhmdW5jOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGZuU3RyID0gZnVuYy50b1N0cmluZygpLnJlcGxhY2UoRlVOQ1RJT05fU1RSSVBfQ09NTUVOVFMsICcnKTtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGZuU3RyLnNsaWNlKGZuU3RyLmluZGV4T2YoJygnKSArIDEsIGZuU3RyLmluZGV4T2YoJyknKSkubWF0Y2goRlVOQ1RJT05fQVJHVU1FTlRfTkFNRVMpO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgZmluZChjb2xsZWN0aW9uOiBhbnksIHByZWRpY2F0ZTogYW55LCB2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChjb2xsZWN0aW9uID09PSBudWxsIHx8IGNvbGxlY3Rpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGVjdGlvbltpXVtwcmVkaWNhdGVdID09PSB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2xsZWN0aW9uW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHRvU3RyaW5ncyhhcnJheTogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1hcChhcnJheSwgZnVuY3Rpb24gKGl0ZW06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0gPT09IHVuZGVmaW5lZCB8fCBpdGVtID09PSBudWxsIHx8ICFpdGVtLnRvU3RyaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGl0ZXJhdGVBcnJheShhcnJheTogYW55LCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBhcnJheS5sZW5ndGg7IGluZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHZhbHVlLCBpbmRleCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBnZXRWYWx1ZShleHByZXNzaW9uU2VydmljZTogYW55LCBkYXRhOiBhbnksIGNvbERlZjogYW55LCBub2RlPzogYW55LCBhcGk/OiBhbnksIGNvbnRleHQ/OiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUdldHRlciA9IGNvbERlZi52YWx1ZUdldHRlcjtcclxuICAgICAgICAgICAgdmFyIGZpZWxkID0gY29sRGVmLmZpZWxkO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgdGhlcmUgaXMgYSB2YWx1ZSBnZXR0ZXIsIHRoaXMgZ2V0cyBwcmVjZWRlbmNlIG92ZXIgYSBmaWVsZFxyXG4gICAgICAgICAgICBpZiAodmFsdWVHZXR0ZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbERlZixcclxuICAgICAgICAgICAgICAgICAgICBhcGk6IGFwaSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiBjb250ZXh0XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWVHZXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZUdldHRlciBpcyBhIGZ1bmN0aW9uLCBzbyBqdXN0IGNhbGwgaXRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVHZXR0ZXIocGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlR2V0dGVyID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZhbHVlR2V0dGVyIGlzIGFuIGV4cHJlc3Npb24sIHNvIGV4ZWN1dGUgdGhlIGV4cHJlc3Npb25cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXhwcmVzc2lvblNlcnZpY2UuZXZhbHVhdGUodmFsdWVHZXR0ZXIsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpZWxkICYmIGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRhW2ZpZWxkXTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vUmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgRE9NIG5vZGVcclxuICAgICAgICAvL3Rha2VuIGZyb206IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzg0Mjg2L2phdmFzY3JpcHQtaXNkb20taG93LWRvLXlvdS1jaGVjay1pZi1hLWphdmFzY3JpcHQtb2JqZWN0LWlzLWEtZG9tLW9iamVjdFxyXG4gICAgICAgIHN0YXRpYyBpc05vZGUobzogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgTm9kZSA9PT0gXCJvYmplY3RcIiA/IG8gaW5zdGFuY2VvZiBOb2RlIDpcclxuICAgICAgICAgICAgICAgIG8gJiYgdHlwZW9mIG8gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG8ubm9kZVR5cGUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIG8ubm9kZU5hbWUgPT09IFwic3RyaW5nXCJcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vUmV0dXJucyB0cnVlIGlmIGl0IGlzIGEgRE9NIGVsZW1lbnRcclxuICAgICAgICAvL3Rha2VuIGZyb206IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzg0Mjg2L2phdmFzY3JpcHQtaXNkb20taG93LWRvLXlvdS1jaGVjay1pZi1hLWphdmFzY3JpcHQtb2JqZWN0LWlzLWEtZG9tLW9iamVjdFxyXG4gICAgICAgIHN0YXRpYyBpc0VsZW1lbnQobzogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICB0eXBlb2YgSFRNTEVsZW1lbnQgPT09IFwib2JqZWN0XCIgPyBvIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgOiAvL0RPTTJcclxuICAgICAgICAgICAgICAgIG8gJiYgdHlwZW9mIG8gPT09IFwib2JqZWN0XCIgJiYgbyAhPT0gbnVsbCAmJiBvLm5vZGVUeXBlID09PSAxICYmIHR5cGVvZiBvLm5vZGVOYW1lID09PSBcInN0cmluZ1wiXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgaXNOb2RlT3JFbGVtZW50KG86IGFueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc05vZGUobykgfHwgdGhpcy5pc0VsZW1lbnQobyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2FkZHMgYWxsIHR5cGUgb2YgY2hhbmdlIGxpc3RlbmVycyB0byBhbiBlbGVtZW50LCBpbnRlbmRlZCB0byBiZSBhIHRleHQgZmllbGRcclxuICAgICAgICBzdGF0aWMgYWRkQ2hhbmdlTGlzdGVuZXIoZWxlbWVudDogYW55LCBsaXN0ZW5lcjogYW55KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZWRcIiwgbGlzdGVuZXIpO1xyXG4gICAgICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJwYXN0ZVwiLCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vaWYgdmFsdWUgaXMgdW5kZWZpbmVkLCBudWxsIG9yIGJsYW5rLCByZXR1cm5zIG51bGwsIG90aGVyd2lzZSByZXR1cm5zIHRoZSB2YWx1ZVxyXG4gICAgICAgIHN0YXRpYyBtYWtlTnVsbCh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHJlbW92ZUFsbENoaWxkcmVuKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKG5vZGUuaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmxhc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyByZW1vdmVFbGVtZW50KHBhcmVudDogYW55LCBjc3NTZWxlY3Rvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbVBhcmVudChwYXJlbnQucXVlcnlTZWxlY3Rvcihjc3NTZWxlY3RvcikpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHJlbW92ZUZyb21QYXJlbnQobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlICYmIG5vZGUucGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgaXNWaXNpYmxlKGVsZW1lbnQ6IGFueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGVsZW1lbnQub2Zmc2V0UGFyZW50ICE9PSBudWxsKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9sb2FkcyB0aGUgdGVtcGxhdGUgYW5kIHJldHVybnMgaXQgYXMgYW4gZWxlbWVudC4gbWFrZXMgdXAgZm9yIG5vIHNpbXBsZSB3YXkgaW5cclxuICAgICAgICAvL3RoZSBkb20gYXBpIHRvIGxvYWQgaHRtbCBkaXJlY3RseSwgZWcgd2UgY2Fubm90IGRvIHRoaXM6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGVtcGxhdGUpXHJcbiAgICAgICAgc3RhdGljIGxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZTogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcclxuICAgICAgICAgICAgcmV0dXJuIHRlbXBEaXYuZmlyc3RDaGlsZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBxdWVyeVNlbGVjdG9yQWxsX2FkZENzc0NsYXNzKGVQYXJlbnQ6IGFueSwgc2VsZWN0b3I6IGFueSwgY3NzQ2xhc3M6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgZVJvd3MgPSBlUGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGVSb3dzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENzc0NsYXNzKGVSb3dzW2tdLCBjc3NDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBxdWVyeVNlbGVjdG9yQWxsX3JlbW92ZUNzc0NsYXNzKGVQYXJlbnQ6IGFueSwgc2VsZWN0b3I6IGFueSwgY3NzQ2xhc3M6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgZVJvd3MgPSBlUGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IGVSb3dzLmxlbmd0aDsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNzc0NsYXNzKGVSb3dzW2tdLCBjc3NDbGFzcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBxdWVyeVNlbGVjdG9yQWxsX3JlcGxhY2VDc3NDbGFzcyhlUGFyZW50OiBhbnksIHNlbGVjdG9yOiBhbnksIGNzc0NsYXNzVG9SZW1vdmU6IGFueSwgY3NzQ2xhc3NUb0FkZDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBlUm93cyA9IGVQYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZVJvd3MubGVuZ3RoOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQ3NzQ2xhc3MoZVJvd3Nba10sIGNzc0NsYXNzVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDc3NDbGFzcyhlUm93c1trXSwgY3NzQ2xhc3NUb0FkZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBhZGRPclJlbW92ZUNzc0NsYXNzKGVsZW1lbnQ6IGFueSwgY2xhc3NOYW1lOiBhbnksIGFkZE9yUmVtb3ZlOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGFkZE9yUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZENzc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNzc0NsYXNzKGVsZW1lbnQsIGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBhZGRDc3NDbGFzcyhlbGVtZW50OiBhbnksIGNsYXNzTmFtZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTmFtZSAmJiBlbGVtZW50LmNsYXNzTmFtZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3NzQ2xhc3NlcyA9IGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3NzQ2xhc3Nlcy5pbmRleE9mKGNsYXNzTmFtZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3Nlcy5wdXNoKGNsYXNzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDbGFzc2VzLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NOYW1lID0gY2xhc3NOYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgb2Zmc2V0SGVpZ2h0KGVsZW1lbnQ6IGFueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudCAmJiBlbGVtZW50LmNsaWVudEhlaWdodCA/IGVsZW1lbnQuY2xpZW50SGVpZ2h0IDogMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBvZmZzZXRXaWR0aChlbGVtZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgZWxlbWVudC5jbGllbnRXaWR0aCA/IGVsZW1lbnQuY2xpZW50V2lkdGggOiAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHJlbW92ZUNzc0NsYXNzKGVsZW1lbnQ6IGFueSwgY2xhc3NOYW1lOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGVsZW1lbnQuY2xhc3NOYW1lICYmIGVsZW1lbnQuY2xhc3NOYW1lLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHZhciBjc3NDbGFzc2VzID0gZWxlbWVudC5jbGFzc05hbWUuc3BsaXQoJyAnKTtcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGNzc0NsYXNzZXMuaW5kZXhPZihjbGFzc05hbWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjc3NDbGFzc2VzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5jbGFzc05hbWUgPSBjc3NDbGFzc2VzLmpvaW4oJyAnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIHJlbW92ZUZyb21BcnJheShhcnJheTogYW55LCBvYmplY3Q6IGFueSkge1xyXG4gICAgICAgICAgICBhcnJheS5zcGxpY2UoYXJyYXkuaW5kZXhPZihvYmplY3QpLCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBkZWZhdWx0Q29tcGFyYXRvcih2YWx1ZUE6IGFueSwgdmFsdWVCOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHZhbHVlQU1pc3NpbmcgPSB2YWx1ZUEgPT09IG51bGwgfHwgdmFsdWVBID09PSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUJNaXNzaW5nID0gdmFsdWVCID09PSBudWxsIHx8IHZhbHVlQiA9PT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAodmFsdWVBTWlzc2luZyAmJiB2YWx1ZUJNaXNzaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodmFsdWVBTWlzc2luZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZUJNaXNzaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHZhbHVlQSA8IHZhbHVlQikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZhbHVlQSA+IHZhbHVlQikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGZvcm1hdFdpZHRoKHdpZHRoOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB0cmllcyB0byB1c2UgdGhlIHByb3ZpZGVkIHJlbmRlcmVyLiBpZiBhIHJlbmRlcmVyIGZvdW5kLCByZXR1cm5zIHRydWUuXHJcbiAgICAgICAgLy8gaWYgbm8gcmVuZGVyZXIsIHJldHVybnMgZmFsc2UuXHJcbiAgICAgICAgc3RhdGljIHVzZVJlbmRlcmVyKGVQYXJlbnQ6IGFueSwgZVJlbmRlcmVyOiBhbnksIHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHRGcm9tUmVuZGVyZXIgPSBlUmVuZGVyZXIocGFyYW1zKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNOb2RlKHJlc3VsdEZyb21SZW5kZXJlcikgfHwgdGhpcy5pc0VsZW1lbnQocmVzdWx0RnJvbVJlbmRlcmVyKSkge1xyXG4gICAgICAgICAgICAgICAgLy9hIGRvbSBub2RlIG9yIGVsZW1lbnQgd2FzIHJldHVybmVkLCBzbyBhZGQgY2hpbGRcclxuICAgICAgICAgICAgICAgIGVQYXJlbnQuYXBwZW5kQ2hpbGQocmVzdWx0RnJvbVJlbmRlcmVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vb3RoZXJ3aXNlIGFzc3VtZSBpdCB3YXMgaHRtbCwgc28ganVzdCBpbnNlcnRcclxuICAgICAgICAgICAgICAgIHZhciBlVGV4dFNwYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgICAgICBlVGV4dFNwYW4uaW5uZXJIVE1MID0gcmVzdWx0RnJvbVJlbmRlcmVyO1xyXG4gICAgICAgICAgICAgICAgZVBhcmVudC5hcHBlbmRDaGlsZChlVGV4dFNwYW4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBpZiBpY29uIHByb3ZpZGVkLCB1c2UgdGhpcyAoZWl0aGVyIGEgc3RyaW5nLCBvciBhIGZ1bmN0aW9uIGNhbGxiYWNrKS5cclxuICAgICAgICAvLyBpZiBub3QsIHRoZW4gdXNlIHRoZSBzZWNvbmQgcGFyYW1ldGVyLCB3aGljaCBpcyB0aGUgc3ZnRmFjdG9yeSBmdW5jdGlvblxyXG4gICAgICAgIHN0YXRpYyBjcmVhdGVJY29uKGljb25OYW1lOiBhbnksIGdyaWRPcHRpb25zV3JhcHBlcjogYW55LCBjb2xEZWZXcmFwcGVyOiBhbnksIHN2Z0ZhY3RvcnlGdW5jOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGVSZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgIHZhciB1c2VyUHJvdmlkZWRJY29uOiBhbnk7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGNvbCBmb3IgaWNvbiBmaXJzdFxyXG4gICAgICAgICAgICBpZiAoY29sRGVmV3JhcHBlciAmJiBjb2xEZWZXcmFwcGVyLmNvbERlZi5pY29ucykge1xyXG4gICAgICAgICAgICAgICAgdXNlclByb3ZpZGVkSWNvbiA9IGNvbERlZldyYXBwZXIuY29sRGVmLmljb25zW2ljb25OYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpdCBub3QgaW4gY29sLCB0cnkgZ3JpZCBvcHRpb25zXHJcbiAgICAgICAgICAgIGlmICghdXNlclByb3ZpZGVkSWNvbiAmJiBncmlkT3B0aW9uc1dyYXBwZXIuZ2V0SWNvbnMoKSkge1xyXG4gICAgICAgICAgICAgICAgdXNlclByb3ZpZGVkSWNvbiA9IGdyaWRPcHRpb25zV3JhcHBlci5nZXRJY29ucygpW2ljb25OYW1lXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBub3cgaWYgdXNlciBwcm92aWRlZCwgdXNlIGl0XHJcbiAgICAgICAgICAgIGlmICh1c2VyUHJvdmlkZWRJY29uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXJSZXN1bHQ6IGFueTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdXNlclByb3ZpZGVkSWNvbiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyUmVzdWx0ID0gdXNlclByb3ZpZGVkSWNvbigpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdXNlclByb3ZpZGVkSWNvbiA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZW5kZXJlclJlc3VsdCA9IHVzZXJQcm92aWRlZEljb247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdpY29uIGZyb20gZ3JpZCBvcHRpb25zIG5lZWRzIHRvIGJlIGEgc3RyaW5nIG9yIGEgZnVuY3Rpb24nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZW5kZXJlclJlc3VsdCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICBlUmVzdWx0LmlubmVySFRNTCA9IHJlbmRlcmVyUmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzTm9kZU9yRWxlbWVudChyZW5kZXJlclJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlUmVzdWx0LmFwcGVuZENoaWxkKHJlbmRlcmVyUmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ2ljb25SZW5kZXJlciBzaG91bGQgcmV0dXJuIGJhY2sgYSBzdHJpbmcgb3IgYSBkb20gb2JqZWN0JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSB1c2UgdGhlIGJ1aWx0IGluIGljb25cclxuICAgICAgICAgICAgICAgIGVSZXN1bHQuYXBwZW5kQ2hpbGQoc3ZnRmFjdG9yeUZ1bmMoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0aWMgYWRkU3R5bGVzVG9FbGVtZW50KGVFbGVtZW50OiBhbnksIHN0eWxlczogYW55KSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBlRWxlbWVudC5zdHlsZVtrZXldID0gc3R5bGVzW2tleV07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGdldFNjcm9sbGJhcldpZHRoKCkge1xyXG4gICAgICAgICAgICB2YXIgb3V0ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBvdXRlci5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcclxuICAgICAgICAgICAgb3V0ZXIuc3R5bGUud2lkdGggPSBcIjEwMHB4XCI7XHJcbiAgICAgICAgICAgIG91dGVyLnN0eWxlLm1zT3ZlcmZsb3dTdHlsZSA9IFwic2Nyb2xsYmFyXCI7IC8vIG5lZWRlZCBmb3IgV2luSlMgYXBwc1xyXG5cclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChvdXRlcik7XHJcblxyXG4gICAgICAgICAgICB2YXIgd2lkdGhOb1Njcm9sbCA9IG91dGVyLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAvLyBmb3JjZSBzY3JvbGxiYXJzXHJcbiAgICAgICAgICAgIG91dGVyLnN0eWxlLm92ZXJmbG93ID0gXCJzY3JvbGxcIjtcclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCBpbm5lcmRpdlxyXG4gICAgICAgICAgICB2YXIgaW5uZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBpbm5lci5zdHlsZS53aWR0aCA9IFwiMTAwJVwiO1xyXG4gICAgICAgICAgICBvdXRlci5hcHBlbmRDaGlsZChpbm5lcik7XHJcblxyXG4gICAgICAgICAgICB2YXIgd2lkdGhXaXRoU2Nyb2xsID0gaW5uZXIub2Zmc2V0V2lkdGg7XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmUgZGl2c1xyXG4gICAgICAgICAgICBvdXRlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG91dGVyKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB3aWR0aE5vU2Nyb2xsIC0gd2lkdGhXaXRoU2Nyb2xsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGljIGlzS2V5UHJlc3NlZChldmVudDogYW55LCBrZXlUb0NoZWNrOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHByZXNzZWRLZXkgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xyXG4gICAgICAgICAgICByZXR1cm4gcHJlc3NlZEtleSA9PT0ga2V5VG9DaGVjaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXRpYyBzZXRWaXNpYmxlKGVsZW1lbnQ6IGFueSwgdmlzaWJsZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh2aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIENvbnN0YW50cyB7XHJcbiAgICAgICAgc3RhdGljIFNURVBfRVZFUllUSElORyA9IDA7XHJcbiAgICAgICAgc3RhdGljIFNURVBfRklMVEVSID0gMTtcclxuICAgICAgICBzdGF0aWMgU1RFUF9TT1JUID0gMjtcclxuICAgICAgICBzdGF0aWMgU1RFUF9NQVAgPSAzO1xyXG4gICAgICAgIHN0YXRpYyBBU0MgPSBcImFzY1wiO1xyXG4gICAgICAgIHN0YXRpYyBERVNDID0gXCJkZXNjXCI7XHJcbiAgICAgICAgc3RhdGljIFJPV19CVUZGRVJfU0laRSA9IDIwO1xyXG4gICAgICAgIHN0YXRpYyBNSU5fQ09MX1dJRFRIID0gMTA7XHJcblxyXG4gICAgICAgIHN0YXRpYyBTVU0gPSAnc3VtJztcclxuICAgICAgICBzdGF0aWMgTUlOID0gJ21pbic7XHJcbiAgICAgICAgc3RhdGljIE1BWCA9ICdtYXgnO1xyXG5cclxuICAgICAgICBzdGF0aWMgS0VZX1RBQiA9IDk7XHJcbiAgICAgICAgc3RhdGljIEtFWV9FTlRFUiA9IDEzO1xyXG4gICAgICAgIHN0YXRpYyBLRVlfU1BBQ0UgPSAzMjtcclxuICAgICAgICBzdGF0aWMgS0VZX0RPV04gPSA0MDtcclxuICAgICAgICBzdGF0aWMgS0VZX1VQID0gMzg7XHJcbiAgICAgICAgc3RhdGljIEtFWV9MRUZUID0gMzc7XHJcbiAgICAgICAgc3RhdGljIEtFWV9SSUdIVCA9IDM5O1xyXG4gICAgfVxyXG5cclxuLypcclxuLy8gdGFrZW4gZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzk4NDc1ODAvaG93LXRvLWRldGVjdC1zYWZhcmktY2hyb21lLWllLWZpcmVmb3gtYW5kLW9wZXJhLWJyb3dzZXJcclxuICAgIHZhciBpc09wZXJhID0gISF3aW5kb3cub3BlcmEgfHwgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCcgT1BSLycpID49IDA7XHJcbi8vIE9wZXJhIDguMCsgKFVBIGRldGVjdGlvbiB0byBkZXRlY3QgQmxpbmsvdjgtcG93ZXJlZCBPcGVyYSlcclxuICAgIHZhciBpc0ZpcmVmb3ggPSB0eXBlb2YgSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnOyAgIC8vIEZpcmVmb3ggMS4wK1xyXG4gICAgdmFyIGlzU2FmYXJpID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHdpbmRvdy5IVE1MRWxlbWVudCkuaW5kZXhPZignQ29uc3RydWN0b3InKSA+IDA7XHJcbi8vIEF0IGxlYXN0IFNhZmFyaSAzKzogXCJbb2JqZWN0IEhUTUxFbGVtZW50Q29uc3RydWN0b3JdXCJcclxuICAgIHZhciBpc0Nocm9tZSA9ICEhd2luZG93LmNocm9tZSAmJiAhdGhpcy5pc09wZXJhOyAvLyBDaHJvbWUgMStcclxuICAgIHZhciBpc0lFID0gLyEqQGNjX29uIUAqIS9mYWxzZSB8fCAhIWRvY3VtZW50LmRvY3VtZW50TW9kZTsgLy8gQXQgbGVhc3QgSUU2XHJcblxyXG4gICAgaWYgKGlzT3BlcmEpIHtcclxuICAgICAgICBjb25zdGFudHMuQlJPV1NFUiA9ICdvcGVyYSc7XHJcbiAgICB9IGVsc2UgaWYgKGlzRmlyZWZveCkge1xyXG4gICAgICAgIGNvbnN0YW50cy5CUk9XU0VSID0gJ2ZpcmVmb3gnO1xyXG4gICAgfSBlbHNlIGlmIChpc1NhZmFyaSkge1xyXG4gICAgICAgIGNvbnN0YW50cy5CUk9XU0VSID0gJ3NhZmFyaSc7XHJcbiAgICB9IGVsc2UgaWYgKGlzQ2hyb21lKSB7XHJcbiAgICAgICAgY29uc3RhbnRzLkJST1dTRVIgPSAnY2hyb21lJztcclxuICAgIH0gZWxzZSBpZiAoaXNJRSkge1xyXG4gICAgICAgIGNvbnN0YW50cy5CUk9XU0VSID0gJ2llJztcclxuICAgIH1cclxuXHJcbiAgICB2YXIgaXNNYWMgPSBuYXZpZ2F0b3IucGxhdGZvcm0udG9VcHBlckNhc2UoKS5pbmRleE9mKCdNQUMnKT49MDtcclxuICAgIHZhciBpc1dpbmRvd3MgPSBuYXZpZ2F0b3IucGxhdGZvcm0udG9VcHBlckNhc2UoKS5pbmRleE9mKCdXSU4nKT49MDtcclxuICAgIGlmIChpc01hYykge1xyXG4gICAgICAgIGNvbnN0YW50cy5QTEFURk9STSA9ICdtYWMnO1xyXG4gICAgfSBlbHNlIGlmIChpc1dpbmRvd3MpIHtcclxuICAgICAgICBjb25zdGFudHMuUExBVEZPUk0gPSAnd2luJztcclxuICAgIH1cclxuKi9cclxuXHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInV0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImNvbnN0YW50cy50c1wiIC8+XHJcblxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciBfID0gVXRpbHM7XHJcbiAgICB2YXIgY29uc3RhbnRzID0gQ29uc3RhbnRzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBDb2x1bW5Db250cm9sbGVyIHtcclxuXHJcbiAgICAgICAgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgYW5ndWxhckdyaWQ6IGFueTtcclxuICAgICAgICBzZWxlY3Rpb25SZW5kZXJlckZhY3Rvcnk6IGFueTtcclxuICAgICAgICBleHByZXNzaW9uU2VydmljZTogYW55O1xyXG4gICAgICAgIGxpc3RlbmVyczogYW55O1xyXG4gICAgICAgIG1vZGVsOiBhbnk7XHJcbiAgICAgICAgYWxsQ29sdW1uczogYW55O1xyXG4gICAgICAgIGRpc3BsYXllZENvbHVtbnM6IGFueTtcclxuICAgICAgICBwaXZvdENvbHVtbnM6IGFueTtcclxuICAgICAgICB2YWx1ZUNvbHVtbnM6IGFueTtcclxuICAgICAgICB2aXNpYmxlQ29sdW1uczogYW55O1xyXG4gICAgICAgIGhlYWRlckdyb3VwczogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVNb2RlbCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5pdChhbmd1bGFyR3JpZDogYW55LCBzZWxlY3Rpb25SZW5kZXJlckZhY3Rvcnk6IGFueSwgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnksIGV4cHJlc3Npb25TZXJ2aWNlOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQgPSBhbmd1bGFyR3JpZDtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkgPSBzZWxlY3Rpb25SZW5kZXJlckZhY3Rvcnk7XHJcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblNlcnZpY2UgPSBleHByZXNzaW9uU2VydmljZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZU1vZGVsKCkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSB7XHJcbiAgICAgICAgICAgICAgICAvLyB1c2VkIGJ5OlxyXG4gICAgICAgICAgICAgICAgLy8gKyBpbk1lbW9yeVJvd0NvbnRyb2xsZXIgLT4gc29ydGluZywgYnVpbGRpbmcgcXVpY2sgZmlsdGVyIHRleHRcclxuICAgICAgICAgICAgICAgIC8vICsgaGVhZGVyUmVuZGVyZXIgLT4gc29ydGluZyAoY2xlYXJpbmcgaWNvbilcclxuICAgICAgICAgICAgICAgIGdldEFsbENvbHVtbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5hbGxDb2x1bW5zO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIC8vICsgcm93Q29udHJvbGxlciAtPiB3aGlsZSBpbnNlcnRpbmcgcm93cywgYW5kIHdoZW4gdGFiYmluZyB0aHJvdWdoIGNlbGxzIChuZWVkIHRvIGNoYW5nZSB0aGlzKVxyXG4gICAgICAgICAgICAgICAgLy8gbmVlZCBhIG5ld01ldGhvZCAtIGdldCBuZXh0IGNvbCBpbmRleFxyXG4gICAgICAgICAgICAgICAgZ2V0RGlzcGxheWVkQ29sdW1uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmRpc3BsYXllZENvbHVtbnM7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gKyB0b29sUGFuZWxcclxuICAgICAgICAgICAgICAgIGdldEdyb3VwZWRDb2x1bW5zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQucGl2b3RDb2x1bW5zO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIC8vICsgcm93Q29udHJvbGxlclxyXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWVDb2x1bW5zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQudmFsdWVDb2x1bW5zO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIC8vIHVzZWQgYnk6XHJcbiAgICAgICAgICAgICAgICAvLyArIGFuZ3VsYXJHcmlkIC0+IGZvciBzZXR0aW5nIGJvZHkgd2lkdGhcclxuICAgICAgICAgICAgICAgIC8vICsgcm93Q29udHJvbGxlciAtPiBzZXR0aW5nIG1haW4gcm93IHdpZHRocyAod2hlbiBpbnNlcnRpbmcgYW5kIHJlc2l6aW5nKVxyXG4gICAgICAgICAgICAgICAgZ2V0Qm9keUNvbnRhaW5lcldpZHRoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuZ2V0VG90YWxDb2xXaWR0aChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBieTpcclxuICAgICAgICAgICAgICAgIC8vICsgYW5ndWxhckdyaWQgLT4gc2V0dGluZyBwaW5uZWQgYm9keSB3aWR0aFxyXG4gICAgICAgICAgICAgICAgZ2V0UGlubmVkQ29udGFpbmVyV2lkdGg6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5nZXRUb3RhbENvbFdpZHRoKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIC8vIHVzZWQgYnk6XHJcbiAgICAgICAgICAgICAgICAvLyArIGhlYWRlclJlbmRlcmVyIC0+IHNldHRpbmcgcGlubmVkIGJvZHkgd2lkdGhcclxuICAgICAgICAgICAgICAgIGdldEhlYWRlckdyb3VwczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmhlYWRlckdyb3VwcztcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAvLyB1c2VkIGJ5OlxyXG4gICAgICAgICAgICAgICAgLy8gKyBhcGkuZ2V0RmlsdGVyTW9kZWwoKSAtPiB0byBtYXAgY29sRGVmIHRvIGNvbHVtbiwga2V5IGNhbiBiZSBjb2xEZWYgb3IgZmllbGRcclxuICAgICAgICAgICAgICAgIGdldENvbHVtbjogZnVuY3Rpb24gKGtleTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuZ2V0Q29sdW1uKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBieTpcclxuICAgICAgICAgICAgICAgIC8vICsgcm93UmVuZGVyZXIgLT4gZm9yIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGdldFZpc2libGVDb2xCZWZvcmU6IGZ1bmN0aW9uIChjb2w6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvbGRJbmRleCA9IHRoYXQudmlzaWJsZUNvbHVtbnMuaW5kZXhPZihjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvbGRJbmRleCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQudmlzaWJsZUNvbHVtbnNbb2xkSW5kZXggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgLy8gdXNlZCBieTpcclxuICAgICAgICAgICAgICAgIC8vICsgcm93UmVuZGVyZXIgLT4gZm9yIG5hdmlnYXRpb25cclxuICAgICAgICAgICAgICAgIGdldFZpc2libGVDb2xBZnRlcjogZnVuY3Rpb24gKGNvbDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9sZEluZGV4ID0gdGhhdC52aXNpYmxlQ29sdW1ucy5pbmRleE9mKGNvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9sZEluZGV4IDwgKHRoYXQudmlzaWJsZUNvbHVtbnMubGVuZ3RoIC0gMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQudmlzaWJsZUNvbHVtbnNbb2xkSW5kZXggKyAxXTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RGlzcGxheU5hbWVGb3JDb2w6IGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmdldERpc3BsYXlOYW1lRm9yQ29sKGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRTdGF0ZSgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFsbENvbHVtbnMgfHwgdGhpcy5hbGxDb2x1bW5zLmxlbmd0aCA8IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gPGFueT5bXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFsbENvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmFsbENvbHVtbnNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcGl2b3RJbmRleCA9IHRoaXMucGl2b3RDb2x1bW5zLmluZGV4T2YoY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRJdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbElkOiBjb2x1bW4uY29sSWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZTogIWNvbHVtbi52aXNpYmxlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFnZ0Z1bmM6IGNvbHVtbi5hZ2dGdW5jID8gY29sdW1uLmFnZ0Z1bmMgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBjb2x1bW4uYWN0dWFsV2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgcGl2b3RJbmRleDogcGl2b3RJbmRleCA+PSAwID8gcGl2b3RJbmRleCA6IG51bGxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyZXN1bHRJdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0U3RhdGUoY29sdW1uU3RhdGU6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkQ29sdW1uTGlzdCA9IHRoaXMuYWxsQ29sdW1ucztcclxuICAgICAgICAgICAgdGhpcy5hbGxDb2x1bW5zID0gW107XHJcbiAgICAgICAgICAgIHRoaXMucGl2b3RDb2x1bW5zID0gW107XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVDb2x1bW5zID0gW107XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIF8uZm9yRWFjaChjb2x1bW5TdGF0ZSwgZnVuY3Rpb24gKHN0YXRlSXRlbTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb2xkQ29sdW1uID0gXy5maW5kKG9sZENvbHVtbkxpc3QsICdjb2xJZCcsIHN0YXRlSXRlbS5jb2xJZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW9sZENvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYWctZ3JpZDogY29sdW1uICcgKyBzdGF0ZUl0ZW0uY29sSWQgKyAnIG5vdCBmb3VuZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGZvbGxvd2luZyBlbnN1cmVzIHdlIGFyZSBsZWZ0IHdpdGggYm9vbGVhbiB0cnVlIG9yIGZhbHNlLCBlZyBjb252ZXJ0cyAobnVsbCwgdW5kZWZpbmVkLCAwKSBhbGwgdG8gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgb2xkQ29sdW1uLnZpc2libGUgPSBzdGF0ZUl0ZW0uaGlkZSA/IGZhbHNlIDogdHJ1ZTtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHdpZHRoIHByb3ZpZGVkIGFuZCB2YWxpZCwgdXNlIGl0LCBvdGhlcndpc2Ugc3RpY2sgd2l0aCB0aGUgb2xkIHdpZHRoXHJcbiAgICAgICAgICAgICAgICBvbGRDb2x1bW4uYWN0dWFsV2lkdGggPSBzdGF0ZUl0ZW0ud2lkdGggPj0gY29uc3RhbnRzLk1JTl9DT0xfV0lEVEggPyBzdGF0ZUl0ZW0ud2lkdGggOiBvbGRDb2x1bW4uYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAvLyBhY2NlcHQgYWdnIGZ1bmMgb25seSBpZiB2YWxpZFxyXG4gICAgICAgICAgICAgICAgdmFyIGFnZ0Z1bmNWYWxpZCA9IFtjb25zdGFudHMuTUlOLCBjb25zdGFudHMuTUFYLCBjb25zdGFudHMuU1VNXS5pbmRleE9mKHN0YXRlSXRlbS5hZ2dGdW5jKSA+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFnZ0Z1bmNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZENvbHVtbi5hZ2dGdW5jID0gc3RhdGVJdGVtLmFnZ0Z1bmM7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC52YWx1ZUNvbHVtbnMucHVzaChvbGRDb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb2x1bW4uYWdnRnVuYyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBwaXZvdFxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZUl0ZW0ucGl2b3RJbmRleCA9PT0gJ251bWJlcicgJiYgc3RhdGVJdGVtLnBpdm90SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucGl2b3RDb2x1bW5zLnB1c2gob2xkQ29sdW1uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoYXQuYWxsQ29sdW1ucy5wdXNoKG9sZENvbHVtbik7XHJcbiAgICAgICAgICAgICAgICBvbGRDb2x1bW5MaXN0LnNwbGljZShvbGRDb2x1bW5MaXN0LmluZGV4T2Yob2xkQ29sdW1uKSwgMSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gYW55dGhpbmcgbGVmdCBvdmVyLCB3ZSBnb3Qgbm8gZGF0YSBmb3IsIHNvIGFkZCBpbiB0aGUgY29sdW1uIGFzIG5vbi12YWx1ZSwgbm9uLXBpdm90IGFuZCBoaWRkZW5cclxuICAgICAgICAgICAgXy5mb3JFYWNoKG9sZENvbHVtbkxpc3QsIGZ1bmN0aW9uIChvbGRDb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgb2xkQ29sdW1uLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIG9sZENvbHVtbi5hZ2dGdW5jID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoYXQuYWxsQ29sdW1ucy5wdXNoKG9sZENvbHVtbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5waXZvdENvbHVtbnMuc29ydChmdW5jdGlvbiAoY29sQTogYW55LCBjb2xCOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xBLnBpdm90SW5kZXggPCBjb2xCLnBpdm90SW5kZXg7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmZpcmVDb2x1bW5zQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Q29sdW1uKGtleTogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hbGxDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sRGVmTWF0Y2hlcyA9IHRoaXMuYWxsQ29sdW1uc1tpXS5jb2xEZWYgPT09IGtleTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWVsZE1hdGNoZXMgPSB0aGlzLmFsbENvbHVtbnNbaV0uY29sRGVmLmZpZWxkID09PSBrZXk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sRGVmTWF0Y2hlcyB8fCBmaWVsZE1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hbGxDb2x1bW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXREaXNwbGF5TmFtZUZvckNvbChjb2x1bW46IGFueSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGNvbERlZiA9IGNvbHVtbi5jb2xEZWY7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJWYWx1ZUdldHRlciA9IGNvbERlZi5oZWFkZXJWYWx1ZUdldHRlcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJWYWx1ZUdldHRlcikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbERlZixcclxuICAgICAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbnRleHQoKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGhlYWRlclZhbHVlR2V0dGVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFsdWVHZXR0ZXIgaXMgYSBmdW5jdGlvbiwgc28ganVzdCBjYWxsIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhlYWRlclZhbHVlR2V0dGVyKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBoZWFkZXJWYWx1ZUdldHRlciA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB2YWx1ZUdldHRlciBpcyBhbiBleHByZXNzaW9uLCBzbyBleGVjdXRlIHRoZSBleHByZXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvblNlcnZpY2UuZXZhbHVhdGUoaGVhZGVyVmFsdWVHZXR0ZXIsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF8uZ2V0VmFsdWUodGhpcy5leHByZXNzaW9uU2VydmljZSwgdW5kZWZpbmVkLCBjb2xEZWYpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbERlZi5kaXNwbGF5TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiYWctZ3JpZDogRm91bmQgZGlzcGxheU5hbWUgXCIgKyBjb2xEZWYuZGlzcGxheU5hbWUgKyBcIiwgcGxlYXNlIHVzZSBoZWFkZXJOYW1lIGluc3RlYWQsIGRpc3BsYXlOYW1lIGlzIGRlcHJlY2F0ZWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbERlZi5kaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xEZWYuaGVhZGVyTmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkTGlzdGVuZXIobGlzdGVuZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpcmVDb2x1bW5zQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbaV0uY29sdW1uc0NoYW5nZWQodGhpcy5hbGxDb2x1bW5zLCB0aGlzLnBpdm90Q29sdW1ucywgdGhpcy52YWx1ZUNvbHVtbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRNb2RlbCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjYWxsZWQgYnkgYW5ndWxhckdyaWRcclxuICAgICAgICBzZXRDb2x1bW5zKGNvbHVtbkRlZnM6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrRm9yRGVwcmVjYXRlZEl0ZW1zKGNvbHVtbkRlZnMpO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUNvbHVtbnMoY29sdW1uRGVmcyk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUGl2b3RDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlVmFsdWVDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWwoKTtcclxuICAgICAgICAgICAgdGhpcy5maXJlQ29sdW1uc0NoYW5nZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNoZWNrRm9yRGVwcmVjYXRlZEl0ZW1zKGNvbHVtbkRlZnM6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uRGVmcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2x1bW5EZWZzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbERlZiA9IGNvbHVtbkRlZnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbERlZi5ncm91cCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYWctZ3JpZDogJyArIGNvbERlZi5maWVsZCArICcgY29sRGVmLmdyb3VwIGlzIGRlcHJlY2F0ZWQsIHBsZWFzZSB1c2UgY29sRGVmLmhlYWRlckdyb3VwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbERlZi5oZWFkZXJHcm91cCA9IGNvbERlZi5ncm91cDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbERlZi5ncm91cFNob3cgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FnLWdyaWQ6ICcgKyBjb2xEZWYuZmllbGQgKyAnIGNvbERlZi5ncm91cFNob3cgaXMgZGVwcmVjYXRlZCwgcGxlYXNlIHVzZSBjb2xEZWYuaGVhZGVyR3JvdXBTaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbERlZi5oZWFkZXJHcm91cFNob3cgPSBjb2xEZWYuZ3JvdXBTaG93O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2FsbGVkIGJ5IGhlYWRlclJlbmRlcmVyIC0gd2hlbiBhIGhlYWRlciBpcyBvcGVuZWQgb3IgY2xvc2VkXHJcbiAgICAgICAgaGVhZGVyR3JvdXBPcGVuZWQoZ3JvdXA6IGFueSkge1xyXG4gICAgICAgICAgICBncm91cC5leHBhbmRlZCA9ICFncm91cC5leHBhbmRlZDtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVHcm91cHMoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVEaXNwbGF5ZWRDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQucmVmcmVzaEhlYWRlckFuZEJvZHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGNhbGxlZCBieSB0b29sUGFuZWwgLSB3aGVuIGNoYW5nZSBpbiBjb2x1bW5zIGhhcHBlbnNcclxuICAgICAgICBvbkNvbHVtblN0YXRlQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ3VsYXJHcmlkLnJlZnJlc2hIZWFkZXJBbmRCb2R5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjYWxsZWQgZnJvbSBBUElcclxuICAgICAgICBoaWRlQ29sdW1ucyhjb2xJZHM6IGFueSwgaGlkZTogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hbGxDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaWRUaGlzQ29sID0gdGhpcy5hbGxDb2x1bW5zW2ldLmNvbElkO1xyXG4gICAgICAgICAgICAgICAgdmFyIGhpZGVUaGlzQ29sID0gY29sSWRzLmluZGV4T2YoaWRUaGlzQ29sKSA+PSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhpZGVUaGlzQ29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbGxDb2x1bW5zW2ldLnZpc2libGUgPSAhaGlkZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm9uQ29sdW1uU3RhdGVDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZUNvbHVtbnNDaGFuZ2VkKCk7IC8vIHRvIHRlbGwgdG9vbGJhclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXBkYXRlTW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmlzaWJsZUNvbHVtbnMoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQaW5uZWRDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGRHcm91cHMoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVHcm91cHMoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVEaXNwbGF5ZWRDb2x1bW5zKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZURpc3BsYXllZENvbHVtbnMoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBIZWFkZXJzKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIG5vdCBncm91cGluZyBieSBoZWFkZXJzLCB0aGVuIHB1bGwgdmlzaWJsZSBjb2xzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZENvbHVtbnMgPSB0aGlzLnZpc2libGVDb2x1bW5zO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgZ3JvdXBpbmcsIHRoZW4gb25seSBzaG93IGNvbCBhcyBwZXIgZ3JvdXAgcnVsZXNcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhlYWRlckdyb3Vwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cCA9IHRoaXMuaGVhZGVyR3JvdXBzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwLmFkZFRvVmlzaWJsZUNvbHVtbnModGhpcy5kaXNwbGF5ZWRDb2x1bW5zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHB1YmxpYyAtIGNhbGxlZCBmcm9tIGFwaVxyXG4gICAgICAgIHNpemVDb2x1bW5zVG9GaXQoZ3JpZFdpZHRoOiBhbnkpIHtcclxuICAgICAgICAgICAgLy8gYXZvaWQgZGl2aWRlIGJ5IHplcm9cclxuICAgICAgICAgICAgaWYgKGdyaWRXaWR0aCA8PSAwIHx8IHRoaXMuZGlzcGxheWVkQ29sdW1ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNvbHVtblN0YXJ0V2lkdGggPSAwOyAvLyB3aWxsIGNvbnRhaW4gdGhlIHN0YXJ0aW5nIHRvdGFsIHdpZHRoIG9mIHRoZSBjb2xzIGJlZW4gc3ByZWFkXHJcbiAgICAgICAgICAgIHZhciBjb2xzVG9TcHJlYWQgPSA8YW55PltdOyAvLyBhbGwgdmlzaWJsZSBjb2xzLCBleGNlcHQgdGhvc2Ugd2l0aCBhdm9pZFNpemVUb0ZpdFxyXG4gICAgICAgICAgICB2YXIgd2lkdGhGb3JTcHJlYWRpbmcgPSBncmlkV2lkdGg7IC8vIGdyaWQgd2lkdGggbWludXMgdGhlIGNvbHVtbnMgd2UgYXJlIG5vdCByZXNpemluZ1xyXG5cclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBsaXN0IG9mIGNvbHMgdG8gd29yayB3aXRoXHJcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpcy5kaXNwbGF5ZWRDb2x1bW5zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXNwbGF5ZWRDb2x1bW5zW2pdLmNvbERlZi5zdXBwcmVzc1NpemVUb0ZpdCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGluY2x1ZGUgY29sLCBhbmQgcmVtb3ZlIHRoZSB3aWR0aCBmcm9tIHRlaCBhdmFpbGFibGUgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aEZvclNwcmVhZGluZyAtPSB0aGlzLmRpc3BsYXllZENvbHVtbnNbal0uYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGluY2x1ZGUgdGhlIGNvbFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHNUb1NwcmVhZC5wdXNoKHRoaXMuZGlzcGxheWVkQ29sdW1uc1tqXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uU3RhcnRXaWR0aCArPSB0aGlzLmRpc3BsYXllZENvbHVtbnNbal0uYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIG5vIHdpZHRoIGxlZnQgb3ZlciB0byBzcHJlYWQgd2l0aCwgZG8gbm90aGluZ1xyXG4gICAgICAgICAgICBpZiAod2lkdGhGb3JTcHJlYWRpbmcgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2NhbGUgPSB3aWR0aEZvclNwcmVhZGluZyAvIGNvbHVtblN0YXJ0V2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBwaXhlbHNGb3JMYXN0Q29sID0gd2lkdGhGb3JTcHJlYWRpbmc7XHJcblxyXG4gICAgICAgICAgICAvLyBzaXplIGFsbCBjb2xzIGV4Y2VwdCB0aGUgbGFzdCBieSB0aGUgc2NhbGVcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAoY29sc1RvU3ByZWFkLmxlbmd0aCAtIDEpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSBjb2xzVG9TcHJlYWRbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3V2lkdGggPSBNYXRoLnJvdW5kKGNvbHVtbi5hY3R1YWxXaWR0aCAqIHNjYWxlKTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5hY3R1YWxXaWR0aCA9IG5ld1dpZHRoO1xyXG4gICAgICAgICAgICAgICAgcGl4ZWxzRm9yTGFzdENvbCAtPSBuZXdXaWR0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2l6ZSB0aGUgbGFzdCBieSB3aGF0cyByZW1haW5pbmcgKHRoaXMgYXZvaWRzIHJvdW5kaW5nIGVycm9ycyB0aGF0IGNvdWxkXHJcbiAgICAgICAgICAgIC8vIG9jY3VyIHdpdGggc2NhbGluZyBldmVyeXRoaW5nLCB3aGVyZSBpdCByZXN1bHQgaW4gc29tZSBwaXhlbHMgb2ZmKVxyXG4gICAgICAgICAgICB2YXIgbGFzdENvbHVtbiA9IGNvbHNUb1NwcmVhZFtjb2xzVG9TcHJlYWQubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGxhc3RDb2x1bW4uYWN0dWFsV2lkdGggPSBwaXhlbHNGb3JMYXN0Q29sO1xyXG5cclxuICAgICAgICAgICAgLy8gd2lkdGhzIHNldCwgcmVmcmVzaCB0aGUgZ3VpXHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQucmVmcmVzaEhlYWRlckFuZEJvZHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgYnVpbGRHcm91cHMoKSB7XHJcbiAgICAgICAgICAgIC8vIGlmIG5vdCBncm91cGluZyBieSBoZWFkZXJzLCBkbyBub3RoaW5nXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cEhlYWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJHcm91cHMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBzcGxpdCB0aGUgY29sdW1ucyBpbnRvIGdyb3Vwc1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudEdyb3VwID0gPGFueT4gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJHcm91cHMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxhc3RDb2xXYXNQaW5uZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy52aXNpYmxlQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgLy8gZG8gd2UgbmVlZCBhIG5ldyBncm91cCwgYmVjYXVzZSB3ZSBtb3ZlIGZyb20gcGlubmVkIHRvIG5vbi1waW5uZWQgY29sdW1ucz9cclxuICAgICAgICAgICAgICAgIHZhciBlbmRPZlBpbm5lZEhlYWRlciA9IGxhc3RDb2xXYXNQaW5uZWQgJiYgIWNvbHVtbi5waW5uZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbHVtbi5waW5uZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0Q29sV2FzUGlubmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBkbyB3ZSBuZWVkIGEgbmV3IGdyb3VwLCBiZWNhdXNlIHRoZSBncm91cCBuYW1lcyBkb2Vzbid0IG1hdGNoIGZyb20gcHJldmlvdXMgY29sP1xyXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwS2V5TWlzbWF0Y2ggPSBjdXJyZW50R3JvdXAgJiYgY29sdW1uLmNvbERlZi5oZWFkZXJHcm91cCAhPT0gY3VycmVudEdyb3VwLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCBncm91cCBjb2x1bW5zIHdoZXJlIG5vIGdyb3VwIGlzIHNwZWNpZmllZFxyXG4gICAgICAgICAgICAgICAgdmFyIGNvbE5vdEluR3JvdXAgPSBjdXJyZW50R3JvdXAgJiYgIWN1cnJlbnRHcm91cC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgLy8gZG8gd2UgbmVlZCBhIG5ldyBncm91cCwgYmVjYXVzZSB3ZSBhcmUganVzdCBzdGFydGluZ1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NpbmdGaXJzdENvbCA9IGN1cnJlbnRHcm91cCA9PT0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdHcm91cE5lZWRlZCA9IHByb2Nlc3NpbmdGaXJzdENvbCB8fCBlbmRPZlBpbm5lZEhlYWRlciB8fCBncm91cEtleU1pc21hdGNoIHx8IGNvbE5vdEluR3JvdXA7XHJcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGUgbmV3IGdyb3VwLCBpZiBpdCdzIG5lZWRlZFxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0dyb3VwTmVlZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBpbm5lZCA9IGNvbHVtbi5waW5uZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwID0gbmV3IEhlYWRlckdyb3VwKHBpbm5lZCwgY29sdW1uLmNvbERlZi5oZWFkZXJHcm91cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXJHcm91cHMucHVzaChjdXJyZW50R3JvdXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLmFkZENvbHVtbihjb2x1bW4pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlR3JvdXBzKCkge1xyXG4gICAgICAgICAgICAvLyBpZiBub3QgZ3JvdXBpbmcgYnkgaGVhZGVycywgZG8gbm90aGluZ1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBIZWFkZXJzKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmhlYWRlckdyb3Vwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwID0gdGhpcy5oZWFkZXJHcm91cHNbaV07XHJcbiAgICAgICAgICAgICAgICBncm91cC5jYWxjdWxhdGVFeHBhbmRhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICBncm91cC5jYWxjdWxhdGVEaXNwbGF5ZWRDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgdXBkYXRlVmlzaWJsZUNvbHVtbnMoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZUNvbHVtbnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNlZSBpZiB3ZSBuZWVkIHRvIGluc2VydCB0aGUgZGVmYXVsdCBncm91cGluZyBjb2x1bW5cclxuICAgICAgICAgICAgdmFyIG5lZWRBR3JvdXBDb2x1bW4gPSB0aGlzLnBpdm90Q29sdW1ucy5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgICAgICAmJiAhdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cFN1cHByZXNzQXV0b0NvbHVtbigpXHJcbiAgICAgICAgICAgICAgICAmJiAhdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cFVzZUVudGlyZVJvdygpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxvY2FsZVRleHRGdW5jID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0TG9jYWxlVGV4dEZ1bmMoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZWVkQUdyb3VwQ29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBvbmUgcHJvdmlkZWQgYnkgdXNlciwgdXNlIGl0LCBvdGhlcndpc2UgY3JlYXRlIG9uZVxyXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwQ29sRGVmID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0R3JvdXBDb2x1bW5EZWYoKTtcclxuICAgICAgICAgICAgICAgIGlmICghZ3JvdXBDb2xEZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICBncm91cENvbERlZiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTmFtZTogbG9jYWxlVGV4dEZ1bmMoJ2dyb3VwJywgJ0dyb3VwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxSZW5kZXJlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXI6IFwiZ3JvdXBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIG5vIGdyb3VwIGNvbHVtbiBwcm92aWRlZCwgbmVlZCB0byBjcmVhdGUgb25lIGhlcmVcclxuICAgICAgICAgICAgICAgIHZhciBncm91cENvbHVtbiA9IG5ldyBDb2x1bW4oZ3JvdXBDb2xEZWYsIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbFdpZHRoKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlQ29sdW1ucy5wdXNoKGdyb3VwQ29sdW1uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmFsbENvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSB0aGlzLmFsbENvbHVtbnNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgaGlkZUJlY2F1c2VPZlBpdm90ID0gdGhpcy5waXZvdENvbHVtbnMuaW5kZXhPZihjb2x1bW4pID49IDBcclxuICAgICAgICAgICAgICAgICAgICAmJiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0dyb3VwSGlkZVBpdm90Q29sdW1ucygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi52aXNpYmxlICYmICFoaWRlQmVjYXVzZU9mUGl2b3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uaW5kZXggPSB0aGlzLnZpc2libGVDb2x1bW5zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVDb2x1bW5zLnB1c2godGhpcy5hbGxDb2x1bW5zW2ldKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSB1cGRhdGVQaW5uZWRDb2x1bW5zKCkge1xyXG4gICAgICAgICAgICB2YXIgcGlubmVkQ29sdW1uQ291bnQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRQaW5uZWRDb2xDb3VudCgpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMudmlzaWJsZUNvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBwaW5uZWQgPSBpIDwgcGlubmVkQ29sdW1uQ291bnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVDb2x1bW5zW2ldLnBpbm5lZCA9IHBpbm5lZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVDb2x1bW5zKGNvbHVtbkRlZnM6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbENvbHVtbnMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uRGVmcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb2x1bW5EZWZzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbERlZiA9IGNvbHVtbkRlZnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBpcyBtZXNzeSAtIHdlIHN3YXAgaW4gYW5vdGhlciBjb2wgZGVmIGlmIGl0J3MgY2hlY2tib3ggc2VsZWN0aW9uIC0gbm90IGhhcHB5IDooXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbERlZiA9PT0gJ2NoZWNrYm94U2VsZWN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xEZWYgPSB0aGF0LnNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeS5jcmVhdGVDaGVja2JveENvbERlZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2lkdGggPSB0aGF0LmNhbGN1bGF0ZUNvbEluaXRpYWxXaWR0aChjb2xEZWYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSBuZXcgQ29sdW1uKGNvbERlZiwgd2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYWxsQ29sdW1ucy5wdXNoKGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgY3JlYXRlUGl2b3RDb2x1bW5zKCkge1xyXG4gICAgICAgICAgICB0aGlzLnBpdm90Q29sdW1ucyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgZ3JvdXBLZXlzID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0R3JvdXBLZXlzKCk7XHJcbiAgICAgICAgICAgIGlmICghZ3JvdXBLZXlzIHx8IGdyb3VwS2V5cy5sZW5ndGggPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ3JvdXBLZXkgPSBncm91cEtleXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5nZXRDb2x1bW4oZ3JvdXBLZXkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4gPSB0aGlzLmNyZWF0ZUR1bW15Q29sdW1uKGdyb3VwS2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucGl2b3RDb2x1bW5zLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVWYWx1ZUNvbHVtbnMoKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVDb2x1bW5zID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBvdmVycmlkZSB3aXRoIGNvbHVtbnMgdGhhdCBoYXZlIHRoZSBhZ2dGdW5jIHNwZWNpZmllZCBleHBsaWNpdGx5XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5hbGxDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5hbGxDb2x1bW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5jb2xEZWYuYWdnRnVuYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5hZ2dGdW5jID0gY29sdW1uLmNvbERlZi5hZ2dGdW5jO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWVDb2x1bW5zLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVEdW1teUNvbHVtbihmaWVsZDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2xEZWYgPSB7XHJcbiAgICAgICAgICAgICAgICBmaWVsZDogZmllbGQsXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJOYW1lOiBmaWVsZCxcclxuICAgICAgICAgICAgICAgIGhpZGU6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbFdpZHRoKCk7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSBuZXcgQ29sdW1uKGNvbERlZiwgd2lkdGgpO1xyXG4gICAgICAgICAgICByZXR1cm4gY29sdW1uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjYWxjdWxhdGVDb2xJbml0aWFsV2lkdGgoY29sRGVmOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCFjb2xEZWYud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIG5vIHdpZHRoIGRlZmluZWQgaW4gY29sRGVmLCB1c2UgZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbFdpZHRoKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sRGVmLndpZHRoIDwgY29uc3RhbnRzLk1JTl9DT0xfV0lEVEgpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHdpZHRoIGluIGNvbCBkZWYgdG8gc21hbGwsIHNldCB0byBtaW4gd2lkdGhcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHMuTUlOX0NPTF9XSURUSDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSB1c2UgdGhlIHByb3ZpZGVkIHdpZHRoXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY29sRGVmLndpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgLy8gY2FsbCB3aXRoIHRydWUgKHBpbm5lZCksIGZhbHNlIChub3QtcGlubmVkKSBvciB1bmRlZmluZWQgKGFsbCBjb2x1bW5zKVxyXG4gICAgICAgIGdldFRvdGFsQ29sV2lkdGgoaW5jbHVkZVBpbm5lZDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciB3aWR0aFNvRmFyID0gMDtcclxuICAgICAgICAgICAgdmFyIHBpbmVkTm90SW1wb3J0YW50ID0gdHlwZW9mIGluY2x1ZGVQaW5uZWQgIT09ICdib29sZWFuJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVUaGlzQ29sID0gcGluZWROb3RJbXBvcnRhbnQgfHwgY29sdW1uLnBpbm5lZCA9PT0gaW5jbHVkZVBpbm5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChpbmNsdWRlVGhpc0NvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoU29GYXIgKz0gY29sdW1uLmFjdHVhbFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB3aWR0aFNvRmFyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgY2xhc3MgSGVhZGVyR3JvdXAge1xyXG5cclxuICAgICAgICBwaW5uZWQ6YW55O1xyXG4gICAgICAgIG5hbWU6YW55O1xyXG4gICAgICAgIGFsbENvbHVtbnMgPSA8YW55PltdO1xyXG4gICAgICAgIGRpc3BsYXllZENvbHVtbnMgPSA8YW55PltdO1xyXG4gICAgICAgIGV4cGFuZGFibGUgPSBmYWxzZTtcclxuICAgICAgICBleHBhbmRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihwaW5uZWQ6IGFueSwgbmFtZTogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMucGlubmVkID0gcGlubmVkO1xyXG4gICAgICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkQ29sdW1uKGNvbHVtbjogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsQ29sdW1ucy5wdXNoKGNvbHVtbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBuZWVkIHRvIGNoZWNrIHRoYXQgdGhpcyBncm91cCBoYXMgYXQgbGVhc3Qgb25lIGNvbCBzaG93aW5nIHdoZW4gYm90aCBleHBhbmRlZCBhbmQgY29udHJhY3RlZC5cclxuICAgICAgICAvLyBpZiBub3QsIHRoZW4gd2UgZG9uJ3QgYWxsb3cgZXhwYW5kaW5nIGFuZCBjb250cmFjdGluZyBvbiB0aGlzIGdyb3VwXHJcbiAgICAgICAgY2FsY3VsYXRlRXhwYW5kYWJsZSgpIHtcclxuICAgICAgICAgICAgLy8gd2FudCB0byBtYWtlIHN1cmUgdGhlIGdyb3VwIGRvZXNuJ3QgZGlzYXBwZWFyIHdoZW4gaXQncyBvcGVuXHJcbiAgICAgICAgICAgIHZhciBhdExlYXN0T25lU2hvd2luZ1doZW5PcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIC8vIHdhbnQgdG8gbWFrZSBzdXJlIHRoZSBncm91cCBkb2Vzbid0IGRpc2FwcGVhciB3aGVuIGl0J3MgY2xvc2VkXHJcbiAgICAgICAgICAgIHZhciBhdExlYXN0T25lU2hvd2luZ1doZW5DbG9zZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgLy8gd2FudCB0byBtYWtlIHN1cmUgdGhlIGdyb3VwIGhhcyBzb21ldGhpbmcgdG8gc2hvdyAvIGhpZGVcclxuICAgICAgICAgICAgdmFyIGF0TGVhc3RPbmVDaGFuZ2VhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5hbGxDb2x1bW5zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuYWxsQ29sdW1uc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uY29sRGVmLmhlYWRlckdyb3VwU2hvdyA9PT0gJ29wZW4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZVNob3dpbmdXaGVuT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZUNoYW5nZWFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChjb2x1bW4uY29sRGVmLmhlYWRlckdyb3VwU2hvdyA9PT0gJ2Nsb3NlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdExlYXN0T25lU2hvd2luZ1doZW5DbG9zZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF0TGVhc3RPbmVDaGFuZ2VhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZVNob3dpbmdXaGVuT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZVNob3dpbmdXaGVuQ2xvc2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5leHBhbmRhYmxlID0gYXRMZWFzdE9uZVNob3dpbmdXaGVuT3BlbiAmJiBhdExlYXN0T25lU2hvd2luZ1doZW5DbG9zZWQgJiYgYXRMZWFzdE9uZUNoYW5nZWFibGU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjYWxjdWxhdGVEaXNwbGF5ZWRDb2x1bW5zKCkge1xyXG4gICAgICAgICAgICAvLyBjbGVhciBvdXQgbGFzdCB0aW1lIHdlIGNhbGN1bGF0ZWRcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRDb2x1bW5zID0gW107XHJcbiAgICAgICAgICAgIC8vIGl0IG5vdCBleHBhbmRhYmxlLCBldmVyeXRoaW5nIGlzIHZpc2libGVcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmV4cGFuZGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucyA9IHRoaXMuYWxsQ29sdW1ucztcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbmQgY2FsY3VsYXRlIGFnYWluXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBqID0gdGhpcy5hbGxDb2x1bW5zLmxlbmd0aDsgaSA8IGo7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuYWxsQ29sdW1uc1tpXTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAoY29sdW1uLmNvbERlZi5oZWFkZXJHcm91cFNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlICdvcGVuJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiBzZXQgdG8gb3Blbiwgb25seSBzaG93IGNvbCBpZiBncm91cCBpcyBvcGVuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZENvbHVtbnMucHVzaChjb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ2Nsb3NlZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdoZW4gc2V0IHRvIG9wZW4sIG9ubHkgc2hvdyBjb2wgaWYgZ3JvdXAgaXMgb3BlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucy5wdXNoKGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZGVmYXVsdCBpcyBhbHdheXMgc2hvdyB0aGUgY29sdW1uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucy5wdXNoKGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzaG91bGQgcmVwbGFjZSB3aXRoIHV0aWxzIG1ldGhvZCAnYWRkIGFsbCdcclxuICAgICAgICBhZGRUb1Zpc2libGVDb2x1bW5zKGNvbHNUb0FkZDogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5kaXNwbGF5ZWRDb2x1bW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5kaXNwbGF5ZWRDb2x1bW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgY29sc1RvQWRkLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBDb2x1bW4ge1xyXG5cclxuICAgICAgICBzdGF0aWMgY29sSWRTZXF1ZW5jZSA9IDA7XHJcblxyXG4gICAgICAgIGNvbERlZjogYW55O1xyXG4gICAgICAgIGFjdHVhbFdpZHRoOiBhbnk7XHJcbiAgICAgICAgdmlzaWJsZTogYW55O1xyXG4gICAgICAgIGNvbElkIDogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihjb2xEZWY6IGFueSwgYWN0dWFsV2lkdGg6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbERlZiA9IGNvbERlZjtcclxuICAgICAgICAgICAgdGhpcy5hY3R1YWxXaWR0aCA9IGFjdHVhbFdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSAhY29sRGVmLmhpZGU7XHJcbiAgICAgICAgICAgIC8vIGluIHRoZSBmdXR1cmUsIHRoZSBjb2xLZXkgbWlnaHQgYmUgc29tZXRoaW5nIG90aGVyIHRoYW4gdGhlIGluZGV4XHJcbiAgICAgICAgICAgIGlmIChjb2xEZWYuY29sSWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sSWQgPSBjb2xEZWYuY29sSWQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoY29sRGVmLmZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbElkID0gY29sRGVmLmZpZWxkO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xJZCA9ICcnICsgQ29sdW1uLmNvbElkU2VxdWVuY2UrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJcclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgRXhwYW5kQ3JlYXRvciB7XHJcblxyXG4gICAgICAgIHN0YXRpYyB0aGVJbnN0YW5jZTogRXhwYW5kQ3JlYXRvcjtcclxuXHJcbiAgICAgICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGhlSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGhlSW5zdGFuY2UgPSBuZXcgRXhwYW5kQ3JlYXRvcigpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRoZUluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ3JvdXAocm93Tm9kZXM6IGFueSwgZGVmYXVsdEV4YXBhbmRlZD86IGFueSwgZXhwYW5kQnlEZWZhdWx0PzogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlOiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBjYWxsID0gKG46IGFueSkgPT4geyByZXR1cm4gbi5yb3dzIHx8IGRlZmF1bHRFeGFwYW5kZWQ7IH07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGVmYXVsdEV4YXBhbmRlZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgIGNhbGwgPSBkZWZhdWx0RXhhcGFuZGVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcm93Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSByb3dOb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIG5vZGUuZ3JvdXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbiA9IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBub2RlXHJcbiAgICAgICAgICAgICAgICB9XTtcclxuICAgICAgICAgICAgICAgIG5vZGUucm93cyA9IGNhbGwobm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5yb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDE7IHkgPCBub2RlLnJvd3M7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3Q6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJvd05vZGVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXNFeHBhbmRlZChleHBhbmRCeURlZmF1bHQ6IGFueSwgbGV2ZWw6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGV4cGFuZEJ5RGVmYXVsdCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsZXZlbCA8IGV4cGFuZEJ5RGVmYXVsdDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBleHBhbmRCeURlZmF1bHQgPT09IHRydWUgfHwgZXhwYW5kQnlEZWZhdWx0ID09PSAndHJ1ZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwibW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgRXhwcmVzc2lvblNlcnZpY2Uge1xyXG5cclxuICAgICAgICBleHByZXNzaW9uVG9GdW5jdGlvbkNhY2hlID0gPGFueT57fTtcclxuXHJcbiAgICAgICAgZXZhbHVhdGUoZXhwcmVzc2lvbjogYW55LCBwYXJhbXM6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHZhciBqYXZhU2NyaXB0RnVuY3Rpb24gPSB0aGlzLmNyZWF0ZUV4cHJlc3Npb25GdW5jdGlvbihleHByZXNzaW9uKTtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBqYXZhU2NyaXB0RnVuY3Rpb24ocGFyYW1zLnZhbHVlLCBwYXJhbXMuY29udGV4dCwgcGFyYW1zLm5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmRhdGEsIHBhcmFtcy5jb2xEZWYsIHBhcmFtcy5yb3dJbmRleCwgcGFyYW1zLmFwaSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGUgZXhwcmVzc2lvbiBmYWlsZWQsIHdoaWNoIGNhbiBoYXBwZW4sIGFzIGl0J3MgdGhlIGNsaWVudCB0aGF0XHJcbiAgICAgICAgICAgICAgICAvLyBwcm92aWRlcyB0aGUgZXhwcmVzc2lvbi4gc28gcHJpbnQgYSBuaWNlIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1Byb2Nlc3Npbmcgb2YgdGhlIGV4cHJlc3Npb24gZmFpbGVkJyk7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFeHByZXNzaW9uID0gJyArIGV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXhjZXB0aW9uID0gJyArIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUV4cHJlc3Npb25GdW5jdGlvbihleHByZXNzaW9uOiBhbnkpIHtcclxuICAgICAgICAgICAgLy8gY2hlY2sgY2FjaGUgZmlyc3RcclxuICAgICAgICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvblRvRnVuY3Rpb25DYWNoZVtleHByZXNzaW9uXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXhwcmVzc2lvblRvRnVuY3Rpb25DYWNoZVtleHByZXNzaW9uXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZiBub3QgZm91bmQgaW4gY2FjaGUsIHJldHVybiB0aGUgZnVuY3Rpb25cclxuICAgICAgICAgICAgdmFyIGZ1bmN0aW9uQm9keSA9IHRoaXMuY3JlYXRlRnVuY3Rpb25Cb2R5KGV4cHJlc3Npb24pO1xyXG4gICAgICAgICAgICB2YXIgdGhlRnVuY3Rpb24gPSBuZXcgRnVuY3Rpb24oJ3gsIGN0eCwgbm9kZSwgZGF0YSwgY29sRGVmLCByb3dJbmRleCwgYXBpJywgZnVuY3Rpb25Cb2R5KTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0b3JlIGluIGNhY2hlXHJcbiAgICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblRvRnVuY3Rpb25DYWNoZVtleHByZXNzaW9uXSA9IHRoZUZ1bmN0aW9uO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoZUZ1bmN0aW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlRnVuY3Rpb25Cb2R5KGV4cHJlc3Npb246IGFueSkge1xyXG4gICAgICAgICAgICAvLyBpZiB0aGUgZXhwcmVzc2lvbiBoYXMgdGhlICdyZXR1cm4nIHdvcmQgaW4gaXQsIHRoZW4gdXNlIGFzIGlzLFxyXG4gICAgICAgICAgICAvLyBpZiBub3QsIHRoZW4gd3JhcCBpdCB3aXRoIHJldHVybiBhbmQgJzsnIHRvIG1ha2UgYSBmdW5jdGlvblxyXG4gICAgICAgICAgICBpZiAoZXhwcmVzc2lvbi5pbmRleE9mKCdyZXR1cm4nKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwcmVzc2lvbjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAncmV0dXJuICcgKyBleHByZXNzaW9uICsgJzsnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJjb25zdGFudHMudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgREVGQVVMVF9ST1dfSEVJR0hUID0gMzA7XHJcbiAgICB2YXIgY29uc3RhbnRzID0gQ29uc3RhbnRzO1xyXG5cclxuICAgIGZ1bmN0aW9uIGlzVHJ1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSB0cnVlIHx8IHZhbHVlID09PSAndHJ1ZSc7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEdyaWRPcHRpb25zV3JhcHBlciB7XHJcblxyXG4gICAgICAgIGdyaWRPcHRpb25zOiBHcmlkT3B0aW9ucztcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMgPSBncmlkT3B0aW9ucztcclxuICAgICAgICAgICAgdGhpcy5zZXR1cERlZmF1bHRzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc1Jvd1NlbGVjdGlvbigpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMucm93U2VsZWN0aW9uID09PSBcInNpbmdsZVwiIHx8IHRoaXMuZ3JpZE9wdGlvbnMucm93U2VsZWN0aW9uID09PSBcIm11bHRpcGxlXCI7IH1cclxuICAgICAgICBpc1Jvd0Rlc2VsZWN0aW9uKCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMucm93RGVzZWxlY3Rpb24pOyB9XHJcbiAgICAgICAgaXNSb3dTZWxlY3Rpb25NdWx0aSgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMucm93U2VsZWN0aW9uID09PSAnbXVsdGlwbGUnOyB9XHJcbiAgICAgICAgZ2V0Q29udGV4dCgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuY29udGV4dDsgfVxyXG4gICAgICAgIGlzVmlydHVhbFBhZ2luZygpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLnZpcnR1YWxQYWdpbmcpOyB9XHJcbiAgICAgICAgaXNTaG93VG9vbFBhbmVsKCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuc2hvd1Rvb2xQYW5lbCk7IH1cclxuICAgICAgICBpc1Rvb2xQYW5lbFN1cHByZXNzUGl2b3QoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy50b29sUGFuZWxTdXBwcmVzc1Bpdm90KTsgfVxyXG4gICAgICAgIGlzVG9vbFBhbmVsU3VwcHJlc3NWYWx1ZXMoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy50b29sUGFuZWxTdXBwcmVzc1ZhbHVlcyk7IH1cclxuICAgICAgICBpc1Jvd3NBbHJlYWR5R3JvdXBlZCgpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLnJvd3NBbHJlYWR5R3JvdXBlZCk7IH1cclxuICAgICAgICBpc1Jvd3NBbHJlYWR5RXhwYW5kZWQoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5yb3dzQWxyZWFkeUV4cGFuZGVkKTsgfVxyXG4gICAgICAgIGlzR3JvdXBTZWxlY3RzQ2hpbGRyZW4oKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5ncm91cFNlbGVjdHNDaGlsZHJlbik7IH1cclxuICAgICAgICBpc0dyb3VwSGlkZVBpdm90Q29sdW1ucygpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLmdyb3VwSGlkZVBpdm90Q29sdW1ucyk7IH1cclxuICAgICAgICBpc0dyb3VwSW5jbHVkZUZvb3RlcigpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLmdyb3VwSW5jbHVkZUZvb3Rlcik7IH1cclxuICAgICAgICBpc1N1cHByZXNzUm93Q2xpY2tTZWxlY3Rpb24oKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5zdXBwcmVzc1Jvd0NsaWNrU2VsZWN0aW9uKTsgfVxyXG4gICAgICAgIGlzU3VwcHJlc3NDZWxsU2VsZWN0aW9uKCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuc3VwcHJlc3NDZWxsU2VsZWN0aW9uKTsgfVxyXG4gICAgICAgIGlzU3VwcHJlc3NVblNvcnQoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5zdXBwcmVzc1VuU29ydCk7IH1cclxuICAgICAgICBpc1N1cHByZXNzTXVsdGlTb3J0KCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuc3VwcHJlc3NNdWx0aVNvcnQpOyB9XHJcbiAgICAgICAgaXNHcm91cFN1cHByZXNzQXV0b0NvbHVtbigpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLmdyb3VwU3VwcHJlc3NBdXRvQ29sdW1uKTsgfVxyXG4gICAgICAgIGlzR3JvdXBIZWFkZXJzKCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuZ3JvdXBIZWFkZXJzKTsgfVxyXG4gICAgICAgIGlzRG9udFVzZVNjcm9sbHMoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5kb250VXNlU2Nyb2xscyk7IH1cclxuICAgICAgICBpc1N1cHByZXNzRGVzY1NvcnQoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5zdXBwcmVzc0Rlc2NTb3J0KTsgfVxyXG4gICAgICAgIGlzVW5Tb3J0SWNvbigpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLnVuU29ydEljb24pOyB9XHJcbiAgICAgICAgZ2V0Um93U3R5bGUoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLnJvd1N0eWxlOyB9XHJcbiAgICAgICAgZ2V0Um93Q2xhc3MoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLnJvd0NsYXNzOyB9XHJcbiAgICAgICAgZ2V0SGVhZGVyQ2VsbFJlbmRlcmVyKCkgeyByZXR1cm4gdGhpcy5ncmlkT3B0aW9ucy5oZWFkZXJDZWxsUmVuZGVyZXI7IH1cclxuICAgICAgICBnZXRBcGkoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmFwaTsgfVxyXG4gICAgICAgIGlzRW5hYmxlQ29sUmVzaXplKCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuZW5hYmxlQ29sUmVzaXplKTsgfVxyXG4gICAgICAgIGdldEdyb3VwRGVmYXVsdEV4cGFuZGVkKCkgeyByZXR1cm4gdGhpcy5ncmlkT3B0aW9ucy5ncm91cERlZmF1bHRFeHBhbmRlZDsgfVxyXG4gICAgICAgIGdldEdyb3VwS2V5cygpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuZ3JvdXBLZXlzOyB9XHJcbiAgICAgICAgZ2V0R3JvdXBBZ2dGdW5jdGlvbigpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuZ3JvdXBBZ2dGdW5jdGlvbjsgfVxyXG4gICAgICAgIGdldEdyb3VwQWdnRmllbGRzKCkgeyByZXR1cm4gdGhpcy5ncmlkT3B0aW9ucy5ncm91cEFnZ0ZpZWxkczsgfVxyXG4gICAgICAgIGdldEFsbFJvd3MoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLnJvd0RhdGE7IH1cclxuICAgICAgICBpc0dyb3VwVXNlRW50aXJlUm93KCkgeyByZXR1cm4gaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuZ3JvdXBVc2VFbnRpcmVSb3cpOyB9XHJcbiAgICAgICAgZ2V0R3JvdXBDb2x1bW5EZWYoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmdyb3VwQ29sdW1uRGVmOyB9XHJcbiAgICAgICAgaXNBbmd1bGFyQ29tcGlsZVJvd3MoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5hbmd1bGFyQ29tcGlsZVJvd3MpOyB9XHJcbiAgICAgICAgaXNBbmd1bGFyQ29tcGlsZUZpbHRlcnMoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5hbmd1bGFyQ29tcGlsZUZpbHRlcnMpOyB9XHJcbiAgICAgICAgaXNBbmd1bGFyQ29tcGlsZUhlYWRlcnMoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5hbmd1bGFyQ29tcGlsZUhlYWRlcnMpOyB9XHJcbiAgICAgICAgZ2V0Q29sdW1uRGVmcygpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuY29sdW1uRGVmczsgfVxyXG4gICAgICAgIGdldFJvd0hlaWdodCgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMucm93SGVpZ2h0OyB9XHJcbiAgICAgICAgZ2V0TW9kZWxVcGRhdGVkKCkgeyByZXR1cm4gdGhpcy5ncmlkT3B0aW9ucy5tb2RlbFVwZGF0ZWQ7IH1cclxuICAgICAgICBnZXRDZWxsQ2xpY2tlZCgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuY2VsbENsaWNrZWQ7IH1cclxuICAgICAgICBnZXRDZWxsRG91YmxlQ2xpY2tlZCgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuY2VsbERvdWJsZUNsaWNrZWQ7IH1cclxuICAgICAgICBnZXRDZWxsVmFsdWVDaGFuZ2VkKCkgeyByZXR1cm4gdGhpcy5ncmlkT3B0aW9ucy5jZWxsVmFsdWVDaGFuZ2VkOyB9XHJcbiAgICAgICAgZ2V0Q2VsbEZvY3VzZWQoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmNlbGxGb2N1c2VkOyB9XHJcbiAgICAgICAgZ2V0Um93U2VsZWN0ZWQoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLnJvd1NlbGVjdGVkOyB9XHJcbiAgICAgICAgZ2V0U2VsZWN0aW9uQ2hhbmdlZCgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuc2VsZWN0aW9uQ2hhbmdlZDsgfVxyXG4gICAgICAgIGdldFZpcnR1YWxSb3dSZW1vdmVkKCkgeyByZXR1cm4gdGhpcy5ncmlkT3B0aW9ucy52aXJ0dWFsUm93UmVtb3ZlZDsgfVxyXG4gICAgICAgIGdldERhdGFzb3VyY2UoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmRhdGFzb3VyY2U7IH1cclxuICAgICAgICBnZXRSZWFkeSgpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMucmVhZHk7IH1cclxuICAgICAgICBnZXRSb3dCdWZmZXIoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLnJvd0J1ZmZlcjsgfVxyXG4gICAgICAgIGdldEV4cGFuZGVkUm93c0RlZmF1bHQoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmV4cGFuZGVkUm93c0RlZmF1bHQgfHwgMDsgfVxyXG4gICAgICAgIGlzRW5hYmxlU29ydGluZygpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLmVuYWJsZVNvcnRpbmcpIHx8IGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLmVuYWJsZVNlcnZlclNpZGVTb3J0aW5nKTsgfVxyXG4gICAgICAgIGlzRW5hYmxlU2VydmVyU2lkZVNvcnRpbmcoKSB7IHJldHVybiBpc1RydWUodGhpcy5ncmlkT3B0aW9ucy5lbmFibGVTZXJ2ZXJTaWRlU29ydGluZyk7IH1cclxuICAgICAgICBpc0VuYWJsZUZpbHRlcigpIHsgcmV0dXJuIGlzVHJ1ZSh0aGlzLmdyaWRPcHRpb25zLmVuYWJsZUZpbHRlcikgfHwgaXNUcnVlKHRoaXMuZ3JpZE9wdGlvbnMuZW5hYmxlU2VydmVyU2lkZUZpbHRlcik7IH1cclxuICAgICAgICBpc0VuYWJsZVNlcnZlclNpZGVGaWx0ZXIoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmVuYWJsZVNlcnZlclNpZGVGaWx0ZXI7IH1cclxuICAgICAgICBzZXRTZWxlY3RlZFJvd3MobmV3U2VsZWN0ZWRSb3dzOiBhbnkpIHsgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuc2VsZWN0ZWRSb3dzID0gbmV3U2VsZWN0ZWRSb3dzOyB9XHJcbiAgICAgICAgc2V0U2VsZWN0ZWROb2Rlc0J5SWQobmV3U2VsZWN0ZWROb2RlczogYW55KSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLnNlbGVjdGVkTm9kZXNCeUlkID0gbmV3U2VsZWN0ZWROb2RlczsgfVxyXG4gICAgICAgIGlzRG9JbnRlcm5hbEV4cGFuZGluZygpIHsgcmV0dXJuICF0aGlzLmlzUm93c0FscmVhZHlFeHBhbmRlZCgpICYmIHRoaXMuZ3JpZE9wdGlvbnMuZXhwYW5kUm93OyB9XHJcbiAgICAgICAgZ2V0SWNvbnMoKSB7IHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmljb25zOyB9XHJcblxyXG4gICAgICAgIGdldEdyb3VwUm93SW5uZXJSZW5kZXJlcigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnMuZ3JvdXBJbm5lclJlbmRlcmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FnLWdyaWQ6IGFzIG9mIHYxLjEwLjAgKDIxc3QgSnVuIDIwMTUpIGdyb3VwSW5uZXJSZW5kZXJlciBpcyBub3cgY2FsbGVkIGdyb3VwUm93SW5uZXJSZW5kZXJlci4gUGxlYXNlIGNoYW5nZSB5b3UgY29kZSBhcyBncm91cElubmVyUmVuZGVyZXIgaXMgZGVwcmVjYXRlZC4nKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmdyb3VwSW5uZXJSZW5kZXJlcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmdyb3VwUm93SW5uZXJSZW5kZXJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Q29sV2lkdGgoKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ncmlkT3B0aW9ucy5jb2xXaWR0aCAhPT0gJ251bWJlcicgfHwgdGhpcy5ncmlkT3B0aW9ucy5jb2xXaWR0aCA8IGNvbnN0YW50cy5NSU5fQ09MX1dJRFRIKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMjAwO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZE9wdGlvbnMuY29sV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEhlYWRlckhlaWdodCgpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdyaWRPcHRpb25zLmhlYWRlckhlaWdodCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIGhlYWRlciBoZWlnaHQgcHJvdmlkZWQsIHVzZWQgaXRcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWRPcHRpb25zLmhlYWRlckhlaWdodDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSByZXR1cm4gMjUgaWYgbm8gZ3JvdXBpbmcsIDUwIGlmIGdyb3VwaW5nXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0dyb3VwSGVhZGVycygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDUwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMjU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldHVwRGVmYXVsdHMoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmlkT3B0aW9ucy5yb3dIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMucm93SGVpZ2h0ID0gREVGQVVMVF9ST1dfSEVJR0hUO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRQaW5uZWRDb2xDb3VudCgpIHtcclxuICAgICAgICAgICAgLy8gaWYgbm90IHVzaW5nIHNjcm9sbHMsIHRoZW4gcGlubmVkIGNvbHVtbnMgZG9lc24ndCBtYWtlXHJcbiAgICAgICAgICAgIC8vIHNlbnNlLCBzbyBhbHdheXMgcmV0dXJuIDBcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNEb250VXNlU2Nyb2xscygpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9ucy5waW5uZWRDb2x1bW5Db3VudCkge1xyXG4gICAgICAgICAgICAgICAgLy9pbiBjYXNlIHVzZXIgcHV0cyBpbiBhIHN0cmluZywgY2FzdCB0byBudW1iZXJcclxuICAgICAgICAgICAgICAgIHJldHVybiBOdW1iZXIodGhpcy5ncmlkT3B0aW9ucy5waW5uZWRDb2x1bW5Db3VudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0TG9jYWxlVGV4dEZ1bmMoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChrZXk6IGFueSwgZGVmYXVsdFZhbHVlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb2NhbGVUZXh0ID0gdGhhdC5ncmlkT3B0aW9ucy5sb2NhbGVUZXh0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZVRleHQgJiYgbG9jYWxlVGV4dFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvY2FsZVRleHRba2V5XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIHV0aWxzID0gVXRpbHM7XHJcblxyXG4gICAgdmFyIHRlbXBsYXRlID1cclxuICAgICAgICAgICAgJzxkaXY+JytcclxuICAgICAgICAgICAgICAgICc8ZGl2PicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzZWxlY3QgY2xhc3M9XCJhZy1maWx0ZXItc2VsZWN0XCIgaWQ9XCJmaWx0ZXJUeXBlXCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIxXCI+W0NPTlRBSU5TXTwvb3B0aW9uPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiMlwiPltFUVVBTFNdPC9vcHRpb24+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIzXCI+W1NUQVJUUyBXSVRIXTwvb3B0aW9uPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiNFwiPltFTkRTIFdJVEhdPC9vcHRpb24+JytcclxuICAgICAgICAgICAgICAgICAgICAnPC9zZWxlY3Q+JytcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgJzxkaXY+JytcclxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwiYWctZmlsdGVyLWZpbHRlclwiIGlkPVwiZmlsdGVyVGV4dFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJbRklMVEVSLi4uXVwiLz4nK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWZpbHRlci1hcHBseS1wYW5lbFwiIGlkPVwiYXBwbHlQYW5lbFwiPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiYXBwbHlCdXR0b25cIj5BcHBseSBGaWx0ZXI8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICB2YXIgQ09OVEFJTlMgPSAxO1xyXG4gICAgdmFyIEVRVUFMUyA9IDI7XHJcbiAgICB2YXIgU1RBUlRTX1dJVEggPSAzO1xyXG4gICAgdmFyIEVORFNfV0lUSCA9IDQ7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFRleHRGaWx0ZXIgaW1wbGVtZW50cyBGaWx0ZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIGZpbHRlclBhcmFtczogYW55O1xyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyQ2hhbmdlZENhbGxiYWNrOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBsb2NhbGVUZXh0RnVuYzogYW55O1xyXG4gICAgICAgIHByaXZhdGUgdmFsdWVHZXR0ZXI6IGFueTtcclxuICAgICAgICBwcml2YXRlIGZpbHRlclRleHQ6IGFueTtcclxuICAgICAgICBwcml2YXRlIGZpbHRlclR5cGU6IGFueTtcclxuICAgICAgICBwcml2YXRlIGFwaTogYW55O1xyXG5cclxuICAgICAgICBwcml2YXRlIGVHdWk6IGFueTtcclxuICAgICAgICBwcml2YXRlIGVGaWx0ZXJUZXh0RmllbGQ6IGFueTtcclxuICAgICAgICBwcml2YXRlIGVUeXBlU2VsZWN0OiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBhcHBseUFjdGl2ZTogYW55O1xyXG4gICAgICAgIHByaXZhdGUgZUFwcGx5QnV0dG9uOiBhbnk7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFyYW1zID0gcGFyYW1zLmZpbHRlclBhcmFtcztcclxuICAgICAgICAgICAgdGhpcy5hcHBseUFjdGl2ZSA9IHRoaXMuZmlsdGVyUGFyYW1zICYmIHRoaXMuZmlsdGVyUGFyYW1zLmFwcGx5ID09IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZENhbGxiYWNrID0gcGFyYW1zLmZpbHRlckNoYW5nZWRDYWxsYmFjaztcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGVUZXh0RnVuYyA9IHBhcmFtcy5sb2NhbGVUZXh0RnVuYztcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUdldHRlciA9IHBhcmFtcy52YWx1ZUdldHRlcjtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVHdWkoKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJUZXh0ID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJUeXBlID0gQ09OVEFJTlM7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQXBpKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb25OZXdSb3dzTG9hZGVkKCkge1xyXG4gICAgICAgICAgICB2YXIga2VlcFNlbGVjdGlvbiA9IHRoaXMuZmlsdGVyUGFyYW1zICYmIHRoaXMuZmlsdGVyUGFyYW1zLm5ld1Jvd3NBY3Rpb24gPT09ICdrZWVwJztcclxuICAgICAgICAgICAgaWYgKCFrZWVwU2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFwaS5zZXRUeXBlKENPTlRBSU5TKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBpLnNldEZpbHRlcihudWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGFmdGVyR3VpQXR0YWNoZWQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZUZpbHRlclRleHRGaWVsZC5mb2N1cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGRvZXNGaWx0ZXJQYXNzKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZmlsdGVyVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZUdldHRlcihub2RlKTtcclxuICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUxvd2VyQ2FzZSA9IHZhbHVlLnRvU3RyaW5nKCkudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZpbHRlclR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQ09OVEFJTlM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlTG93ZXJDYXNlLmluZGV4T2YodGhpcy5maWx0ZXJUZXh0KSA+PSAwO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBFUVVBTFM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlTG93ZXJDYXNlID09PSB0aGlzLmZpbHRlclRleHQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFNUQVJUU19XSVRIOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUxvd2VyQ2FzZS5pbmRleE9mKHRoaXMuZmlsdGVyVGV4dCkgPT09IDA7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEVORFNfV0lUSDpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB2YWx1ZUxvd2VyQ2FzZS5pbmRleE9mKHRoaXMuZmlsdGVyVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4ID49IDAgJiYgaW5kZXggPT09ICh2YWx1ZUxvd2VyQ2FzZS5sZW5ndGggLSB0aGlzLmZpbHRlclRleHQubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2hvdWxkIG5ldmVyIGhhcHBlblxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignaW52YWxpZCBmaWx0ZXIgdHlwZSAnICsgdGhpcy5maWx0ZXJUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRHdWkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVHdWk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgaXNGaWx0ZXJBY3RpdmUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpbHRlclRleHQgIT09IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGNyZWF0ZVRlbXBsYXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbRklMVEVSLi4uXScsIHRoaXMubG9jYWxlVGV4dEZ1bmMoJ2ZpbHRlck9vbycsICdGaWx0ZXIuLi4nKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbRVFVQUxTXScsIHRoaXMubG9jYWxlVGV4dEZ1bmMoJ2VxdWFscycsICdFcXVhbHMnKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbQ09OVEFJTlNdJywgdGhpcy5sb2NhbGVUZXh0RnVuYygnY29udGFpbnMnLCAnQ29udGFpbnMnKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbU1RBUlRTIFdJVEhdJywgdGhpcy5sb2NhbGVUZXh0RnVuYygnc3RhcnRzV2l0aCcsICdTdGFydHMgd2l0aCcpKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1tFTkRTIFdJVEhdJywgdGhpcy5sb2NhbGVUZXh0RnVuYygnZW5kc1dpdGgnLCAnRW5kcyB3aXRoJykpXHJcbiAgICAgICAgICAgICAgICA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGNyZWF0ZUd1aSgpIHtcclxuICAgICAgICAgICAgdGhpcy5lR3VpID0gdXRpbHMubG9hZFRlbXBsYXRlKHRoaXMuY3JlYXRlVGVtcGxhdGUoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZUZpbHRlclRleHRGaWVsZCA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKFwiI2ZpbHRlclRleHRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZVR5cGVTZWxlY3QgPSB0aGlzLmVHdWkucXVlcnlTZWxlY3RvcihcIiNmaWx0ZXJUeXBlXCIpO1xyXG5cclxuICAgICAgICAgICAgdXRpbHMuYWRkQ2hhbmdlTGlzdGVuZXIodGhpcy5lRmlsdGVyVGV4dEZpZWxkLCB0aGlzLm9uRmlsdGVyQ2hhbmdlZC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5lVHlwZVNlbGVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2hhbmdlXCIsIHRoaXMub25UeXBlQ2hhbmdlZC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cEFwcGx5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHNldHVwQXBwbHkoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFwcGx5QWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVBcHBseUJ1dHRvbiA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjYXBwbHlCdXR0b24nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUFwcGx5QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHV0aWxzLnJlbW92ZUVsZW1lbnQodGhpcy5lR3VpLCAnI2FwcGx5UGFuZWwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBvblR5cGVDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclR5cGUgPSBwYXJzZUludCh0aGlzLmVUeXBlU2VsZWN0LnZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIG9uRmlsdGVyQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgdmFyIGZpbHRlclRleHQgPSB1dGlscy5tYWtlTnVsbCh0aGlzLmVGaWx0ZXJUZXh0RmllbGQudmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyVGV4dCAmJiBmaWx0ZXJUZXh0LnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlclRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclRleHQgPSBmaWx0ZXJUZXh0LnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlclRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBmaWx0ZXJDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYXBwbHlBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgY3JlYXRlQXBpKCkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuYXBpID0ge1xyXG4gICAgICAgICAgICAgICAgRVFVQUxTOiBFUVVBTFMsXHJcbiAgICAgICAgICAgICAgICBDT05UQUlOUzogQ09OVEFJTlMsXHJcbiAgICAgICAgICAgICAgICBTVEFSVFNfV0lUSDogU1RBUlRTX1dJVEgsXHJcbiAgICAgICAgICAgICAgICBFTkRTX1dJVEg6IEVORFNfV0lUSCxcclxuICAgICAgICAgICAgICAgIHNldFR5cGU6IGZ1bmN0aW9uICh0eXBlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmZpbHRlclR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZVR5cGVTZWxlY3QudmFsdWUgPSB0eXBlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldEZpbHRlcjogZnVuY3Rpb24gKGZpbHRlcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gdXRpbHMubWFrZU51bGwoZmlsdGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmZpbHRlclRleHQgPSBmaWx0ZXIudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5lRmlsdGVyVGV4dEZpZWxkLnZhbHVlID0gZmlsdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZmlsdGVyVGV4dCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZUZpbHRlclRleHRGaWVsZC52YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldFR5cGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5maWx0ZXJUeXBlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldEZpbHRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmZpbHRlclRleHQ7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0TW9kZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5pc0ZpbHRlckFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGF0LmZpbHRlclR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHRoYXQuZmlsdGVyVGV4dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXRNb2RlbDogZnVuY3Rpb24gKGRhdGFNb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFNb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFR5cGUoZGF0YU1vZGVsLnR5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZpbHRlcihkYXRhTW9kZWwuZmlsdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEZpbHRlcihudWxsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGdldEFwaSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIHV0aWxzID0gVXRpbHM7XHJcblxyXG4gICAgdmFyIHRlbXBsYXRlID1cclxuICAgICAgICAgICAgJzxkaXY+JytcclxuICAgICAgICAgICAgICAgICc8ZGl2PicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxzZWxlY3QgY2xhc3M9XCJhZy1maWx0ZXItc2VsZWN0XCIgaWQ9XCJmaWx0ZXJUeXBlXCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxvcHRpb24gdmFsdWU9XCIxXCI+W0VRVUFMU108L29wdGlvbj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPG9wdGlvbiB2YWx1ZT1cIjJcIj5bTEVTUyBUSEFOXTwvb3B0aW9uPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8b3B0aW9uIHZhbHVlPVwiM1wiPltHUkVBVEVSIFRIQU5dPC9vcHRpb24+JytcclxuICAgICAgICAgICAgICAgICAgICAnPC9zZWxlY3Q+JytcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgJzxkaXY+JytcclxuICAgICAgICAgICAgICAgICAgICAnPGlucHV0IGNsYXNzPVwiYWctZmlsdGVyLWZpbHRlclwiIGlkPVwiZmlsdGVyVGV4dFwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJbRklMVEVSLi4uXVwiLz4nK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWZpbHRlci1hcHBseS1wYW5lbFwiIGlkPVwiYXBwbHlQYW5lbFwiPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiYXBwbHlCdXR0b25cIj5BcHBseSBGaWx0ZXI8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICB2YXIgRVFVQUxTID0gMTtcclxuICAgIHZhciBMRVNTX1RIQU4gPSAyO1xyXG4gICAgdmFyIEdSRUFURVJfVEhBTiA9IDM7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIE51bWJlckZpbHRlciBpbXBsZW1lbnRzIEZpbHRlciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyUGFyYW1zOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBmaWx0ZXJDaGFuZ2VkQ2FsbGJhY2s6IGFueTtcclxuICAgICAgICBwcml2YXRlIGxvY2FsZVRleHRGdW5jOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSB2YWx1ZUdldHRlcjogYW55O1xyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyTnVtYmVyOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBmaWx0ZXJUeXBlOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBhcGk6IGFueTtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBlR3VpOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBlRmlsdGVyVGV4dEZpZWxkOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBlVHlwZVNlbGVjdDogYW55O1xyXG4gICAgICAgIHByaXZhdGUgYXBwbHlBY3RpdmU6IGFueTtcclxuICAgICAgICBwcml2YXRlIGVBcHBseUJ1dHRvbjogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbXM6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlclBhcmFtcyA9IHBhcmFtcy5maWx0ZXJQYXJhbXM7XHJcbiAgICAgICAgICAgIHRoaXMuYXBwbHlBY3RpdmUgPSB0aGlzLmZpbHRlclBhcmFtcyAmJiB0aGlzLmZpbHRlclBhcmFtcy5hcHBseSA9PSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZWRDYWxsYmFjayA9IHBhcmFtcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2s7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxlVGV4dEZ1bmMgPSBwYXJhbXMubG9jYWxlVGV4dEZ1bmM7XHJcbiAgICAgICAgICAgIHRoaXMudmFsdWVHZXR0ZXIgPSBwYXJhbXMudmFsdWVHZXR0ZXI7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlR3VpKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyTnVtYmVyID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJUeXBlID0gRVFVQUxTO1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUFwaSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIG9uTmV3Um93c0xvYWRlZCgpIHtcclxuICAgICAgICAgICAgdmFyIGtlZXBTZWxlY3Rpb24gPSB0aGlzLmZpbHRlclBhcmFtcyAmJiB0aGlzLmZpbHRlclBhcmFtcy5uZXdSb3dzQWN0aW9uID09PSAna2VlcCc7XHJcbiAgICAgICAgICAgIGlmICgha2VlcFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcGkuc2V0VHlwZShFUVVBTFMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcGkuc2V0RmlsdGVyKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgYWZ0ZXJHdWlBdHRhY2hlZCgpIHtcclxuICAgICAgICAgICAgdGhpcy5lRmlsdGVyVGV4dEZpZWxkLmZvY3VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZG9lc0ZpbHRlclBhc3Mobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmZpbHRlck51bWJlciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy52YWx1ZUdldHRlcihub2RlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdmFsdWUgJiYgdmFsdWUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHZhbHVlQXNOdW1iZXI6IGFueTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlQXNOdW1iZXIgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlQXNOdW1iZXIgPSBwYXJzZUZsb2F0KHZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLmZpbHRlclR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgRVFVQUxTOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyID09PSB0aGlzLmZpbHRlck51bWJlcjtcclxuICAgICAgICAgICAgICAgIGNhc2UgTEVTU19USEFOOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZUFzTnVtYmVyIDw9IHRoaXMuZmlsdGVyTnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBHUkVBVEVSX1RIQU46XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlQXNOdW1iZXIgPj0gdGhpcy5maWx0ZXJOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHNob3VsZCBuZXZlciBoYXBwZW5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2ludmFsaWQgZmlsdGVyIHR5cGUgJyArIHRoaXMuZmlsdGVyVHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgZ2V0R3VpKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lR3VpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGlzRmlsdGVyQWN0aXZlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJOdW1iZXIgIT09IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGNyZWF0ZVRlbXBsYXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbRklMVEVSLi4uXScsIHRoaXMubG9jYWxlVGV4dEZ1bmMoJ2ZpbHRlck9vbycsICdGaWx0ZXIuLi4nKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbRVFVQUxTXScsIHRoaXMubG9jYWxlVGV4dEZ1bmMoJ2VxdWFscycsICdFcXVhbHMnKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbTEVTUyBUSEFOXScsIHRoaXMubG9jYWxlVGV4dEZ1bmMoJ2xlc3NUaGFuJywgJ0xlc3MgdGhhbicpKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1tHUkVBVEVSIFRIQU5dJywgdGhpcy5sb2NhbGVUZXh0RnVuYygnZ3JlYXRlclRoYW4nLCAnR3JlYXRlciB0aGFuJykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVHdWkoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZUd1aSA9IHV0aWxzLmxvYWRUZW1wbGF0ZSh0aGlzLmNyZWF0ZVRlbXBsYXRlKCkpO1xyXG4gICAgICAgICAgICB0aGlzLmVGaWx0ZXJUZXh0RmllbGQgPSB0aGlzLmVHdWkucXVlcnlTZWxlY3RvcihcIiNmaWx0ZXJUZXh0XCIpO1xyXG4gICAgICAgICAgICB0aGlzLmVUeXBlU2VsZWN0ID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoXCIjZmlsdGVyVHlwZVwiKTtcclxuXHJcbiAgICAgICAgICAgIHV0aWxzLmFkZENoYW5nZUxpc3RlbmVyKHRoaXMuZUZpbHRlclRleHRGaWVsZCwgdGhpcy5vbkZpbHRlckNoYW5nZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZVR5cGVTZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCB0aGlzLm9uVHlwZUNoYW5nZWQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldHVwQXBwbHkoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc2V0dXBBcHBseSgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYXBwbHlBY3RpdmUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUFwcGx5QnV0dG9uID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNhcHBseUJ1dHRvbicpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lQXBwbHlCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRWxlbWVudCh0aGlzLmVHdWksICcjYXBwbHlQYW5lbCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIG9uVHlwZUNoYW5nZWQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyVHlwZSA9IHBhcnNlSW50KHRoaXMuZVR5cGVTZWxlY3QudmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmFwcGx5QWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZWRDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIG9uRmlsdGVyQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgdmFyIGZpbHRlclRleHQgPSB1dGlscy5tYWtlTnVsbCh0aGlzLmVGaWx0ZXJUZXh0RmllbGQudmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyVGV4dCAmJiBmaWx0ZXJUZXh0LnRyaW0oKSA9PT0gJycpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlclRleHQgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlck51bWJlciA9IHBhcnNlRmxvYXQoZmlsdGVyVGV4dCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlck51bWJlciA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGNyZWF0ZUFwaSgpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmFwaSA9IHtcclxuICAgICAgICAgICAgICAgIEVRVUFMUzogRVFVQUxTLFxyXG4gICAgICAgICAgICAgICAgTEVTU19USEFOOiBMRVNTX1RIQU4sXHJcbiAgICAgICAgICAgICAgICBHUkVBVEVSX1RIQU46IEdSRUFURVJfVEhBTixcclxuICAgICAgICAgICAgICAgIHNldFR5cGU6IGZ1bmN0aW9uICh0eXBlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmZpbHRlclR5cGUgPSB0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZVR5cGVTZWxlY3QudmFsdWUgPSB0eXBlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldEZpbHRlcjogZnVuY3Rpb24gKGZpbHRlcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyID0gdXRpbHMubWFrZU51bGwoZmlsdGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlciAhPT0gbnVsbCAmJiAhKHR5cGVvZiBmaWx0ZXIgPT09ICdudW1iZXInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXIgPSBwYXJzZUZsb2F0KGZpbHRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZmlsdGVyTnVtYmVyID0gZmlsdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZUZpbHRlclRleHRGaWVsZC52YWx1ZSA9IGZpbHRlcjtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRUeXBlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuZmlsdGVyVHlwZTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRGaWx0ZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5maWx0ZXJOdW1iZXI7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0TW9kZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5pc0ZpbHRlckFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGF0LmZpbHRlclR5cGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXI6IHRoYXQuZmlsdGVyTnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldE1vZGVsOiBmdW5jdGlvbiAoZGF0YU1vZGVsOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YU1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VHlwZShkYXRhTW9kZWwudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmlsdGVyKGRhdGFNb2RlbC5maWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0RmlsdGVyKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0QXBpKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcGk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2V0RmlsdGVyTW9kZWwge1xyXG5cclxuICAgICAgICBzZWxlY3RlZFZhbHVlc01hcDogYW55O1xyXG4gICAgICAgIGNvbERlZjogYW55O1xyXG4gICAgICAgIHJvd01vZGVsOiBhbnk7XHJcbiAgICAgICAgdmFsdWVHZXR0ZXI6IGFueTtcclxuICAgICAgICBkaXNwbGF5ZWRWYWx1ZXM6IGFueTtcclxuICAgICAgICB1bmlxdWVWYWx1ZXM6IGFueTtcclxuICAgICAgICBtaW5pRmlsdGVyOiBhbnk7XHJcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZXNDb3VudDogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihjb2xEZWY6IGFueSwgcm93TW9kZWw6IGFueSwgdmFsdWVHZXR0ZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbERlZiA9IGNvbERlZjtcclxuICAgICAgICAgICAgdGhpcy5yb3dNb2RlbCA9IHJvd01vZGVsO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlR2V0dGVyID0gdmFsdWVHZXR0ZXI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVVuaXF1ZVZhbHVlcygpO1xyXG5cclxuICAgICAgICAgICAgLy8gYnkgZGVmYXVsdCwgbm8gZmlsdGVyLCBzbyB3ZSBkaXNwbGF5IGV2ZXJ5dGhpbmdcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRWYWx1ZXMgPSB0aGlzLnVuaXF1ZVZhbHVlcztcclxuICAgICAgICAgICAgdGhpcy5taW5pRmlsdGVyID0gbnVsbDtcclxuICAgICAgICAgICAgLy93ZSB1c2UgYSBtYXAgcmF0aGVyIHRoYW4gYW4gYXJyYXkgZm9yIHRoZSBzZWxlY3RlZCB2YWx1ZXMgYXMgdGhlIGxvb2t1cFxyXG4gICAgICAgICAgICAvL2ZvciBhIG1hcCBpcyBtdWNoIGZhc3RlciB0aGFuIHRoZSBsb29rdXAgZm9yIGFuIGFycmF5LCBlc3BlY2lhbGx5IHdoZW5cclxuICAgICAgICAgICAgLy90aGUgbGVuZ3RoIG9mIHRoZSBhcnJheSBpcyB0aG91c2FuZHMgb2YgcmVjb3JkcyBsb25nXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXNNYXAgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RFdmVyeXRoaW5nKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoVW5pcXVlVmFsdWVzKGtlZXBTZWxlY3Rpb246IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVVuaXF1ZVZhbHVlcygpO1xyXG5cclxuICAgICAgICAgICAgdmFyIG9sZE1vZGVsID0gT2JqZWN0LmtleXModGhpcy5zZWxlY3RlZFZhbHVlc01hcCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzTWFwID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGlzcGxheWVkVmFsdWVzKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoa2VlcFNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRNb2RlbChvbGRNb2RlbCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdEV2ZXJ5dGhpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlVW5pcXVlVmFsdWVzKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2xEZWYuZmlsdGVyUGFyYW1zICYmIHRoaXMuY29sRGVmLmZpbHRlclBhcmFtcy52YWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlVmFsdWVzID0gdXRpbHMudG9TdHJpbmdzKHRoaXMuY29sRGVmLmZpbHRlclBhcmFtcy52YWx1ZXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmlxdWVWYWx1ZXMgPSB1dGlscy50b1N0cmluZ3ModGhpcy5pdGVyYXRlVGhyb3VnaE5vZGVzRm9yVmFsdWVzKCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2xEZWYuY29tcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmlxdWVWYWx1ZXMuc29ydCh0aGlzLmNvbERlZi5jb21wYXJhdG9yKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5pcXVlVmFsdWVzLnNvcnQodXRpbHMuZGVmYXVsdENvbXBhcmF0b3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpdGVyYXRlVGhyb3VnaE5vZGVzRm9yVmFsdWVzKCkge1xyXG4gICAgICAgICAgICB2YXIgdW5pcXVlQ2hlY2sgPSA8YW55Pnt9O1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gPGFueT5bXTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5UHJvY2Vzcyhub2RlczogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCAmJiAhbm9kZS5mb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ3JvdXAgbm9kZSwgc28gZGlnIGRlZXBlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmVseVByb2Nlc3Mobm9kZS5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhhdC52YWx1ZUdldHRlcihub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBcIlwiIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXVuaXF1ZUNoZWNrLmhhc093blByb3BlcnR5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5pcXVlQ2hlY2tbdmFsdWVdID0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHRvcExldmVsTm9kZXMgPSB0aGlzLnJvd01vZGVsLmdldFRvcExldmVsTm9kZXMoKTtcclxuICAgICAgICAgICAgcmVjdXJzaXZlbHlQcm9jZXNzKHRvcExldmVsTm9kZXMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4vL3NldHMgbWluaSBmaWx0ZXIuIHJldHVybnMgdHJ1ZSBpZiBpdCBjaGFuZ2VkIGZyb20gbGFzdCB2YWx1ZSwgb3RoZXJ3aXNlIGZhbHNlXHJcbiAgICAgICAgc2V0TWluaUZpbHRlcihuZXdNaW5pRmlsdGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgbmV3TWluaUZpbHRlciA9IHV0aWxzLm1ha2VOdWxsKG5ld01pbmlGaWx0ZXIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5taW5pRmlsdGVyID09PSBuZXdNaW5pRmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvL2RvIG5vdGhpbmcgaWYgZmlsdGVyIGhhcyBub3QgY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubWluaUZpbHRlciA9IG5ld01pbmlGaWx0ZXI7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyRGlzcGxheWVkVmFsdWVzKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0TWluaUZpbHRlcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWluaUZpbHRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbHRlckRpc3BsYXllZFZhbHVlcygpIHtcclxuICAgICAgICAgICAgLy8gaWYgbm8gZmlsdGVyLCBqdXN0IHVzZSB0aGUgdW5pcXVlIHZhbHVlc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5taW5pRmlsdGVyID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZFZhbHVlcyA9IHRoaXMudW5pcXVlVmFsdWVzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBmaWx0ZXIgcHJlc2VudCwgd2UgZmlsdGVyIGRvd24gdGhlIGxpc3RcclxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5ZWRWYWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgdmFyIG1pbmlGaWx0ZXJVcHBlckNhc2UgPSB0aGlzLm1pbmlGaWx0ZXIudG9VcHBlckNhc2UoKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLnVuaXF1ZVZhbHVlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB1bmlxdWVWYWx1ZSA9IHRoaXMudW5pcXVlVmFsdWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHVuaXF1ZVZhbHVlICE9PSBudWxsICYmIHVuaXF1ZVZhbHVlLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKS5pbmRleE9mKG1pbmlGaWx0ZXJVcHBlckNhc2UpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZFZhbHVlcy5wdXNoKHVuaXF1ZVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0RGlzcGxheWVkVmFsdWVDb3VudCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheWVkVmFsdWVzLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldERpc3BsYXllZFZhbHVlKGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGlzcGxheWVkVmFsdWVzW2luZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGVjdEV2ZXJ5dGhpbmcoKSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IHRoaXMudW5pcXVlVmFsdWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnVuaXF1ZVZhbHVlc1tpXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXNNYXBbdmFsdWVdID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzQ291bnQgPSBjb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzRmlsdGVyQWN0aXZlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmlxdWVWYWx1ZXMubGVuZ3RoICE9PSB0aGlzLnNlbGVjdGVkVmFsdWVzQ291bnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3ROb3RoaW5nKCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzTWFwID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXNDb3VudCA9IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRVbmlxdWVWYWx1ZUNvdW50KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmlxdWVWYWx1ZXMubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0VW5pcXVlVmFsdWUoaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmlxdWVWYWx1ZXNbaW5kZXhdO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdW5zZWxlY3RWYWx1ZSh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVmFsdWVzTWFwW3ZhbHVlXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zZWxlY3RlZFZhbHVlc01hcFt2YWx1ZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzQ291bnQtLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZWN0VmFsdWUodmFsdWU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFZhbHVlc01hcFt2YWx1ZV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlc01hcFt2YWx1ZV0gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlc0NvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzVmFsdWVTZWxlY3RlZCh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkVmFsdWVzTWFwW3ZhbHVlXSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXNFdmVyeXRoaW5nU2VsZWN0ZWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuaXF1ZVZhbHVlcy5sZW5ndGggPT09IHRoaXMuc2VsZWN0ZWRWYWx1ZXNDb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzTm90aGluZ1NlbGVjdGVkKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51bmlxdWVWYWx1ZXMubGVuZ3RoID09PSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0TW9kZWwoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0ZpbHRlckFjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSA8YW55PltdO1xyXG4gICAgICAgICAgICB1dGlscy5pdGVyYXRlT2JqZWN0KHRoaXMuc2VsZWN0ZWRWYWx1ZXNNYXAsIGZ1bmN0aW9uIChrZXk6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZXMucHVzaChrZXkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkVmFsdWVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0TW9kZWwobW9kZWw6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAobW9kZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Tm90aGluZygpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtb2RlbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IG1vZGVsW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnVuaXF1ZVZhbHVlcy5pbmRleE9mKG5ld1ZhbHVlKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWUobW9kZWxbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignVmFsdWUgJyArIG5ld1ZhbHVlICsgJyBpcyBub3QgYSB2YWxpZCB2YWx1ZSBmb3IgZmlsdGVyJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RFdmVyeXRoaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNldEZpbHRlck1vZGVsLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIF8gPSBVdGlscztcclxuXHJcbiAgICB2YXIgdGVtcGxhdGUgPVxyXG4gICAgICAgICc8ZGl2PicrXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYWctZmlsdGVyLWhlYWRlci1jb250YWluZXJcIj4nK1xyXG4gICAgICAgICAgICAgICAgJzxpbnB1dCBjbGFzcz1cImFnLWZpbHRlci1maWx0ZXJcIiB0eXBlPVwidGV4dFwiIHBsYWNlaG9sZGVyPVwiW1NFQVJDSC4uLl1cIi8+JytcclxuICAgICAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYWctZmlsdGVyLWhlYWRlci1jb250YWluZXJcIj4nK1xyXG4gICAgICAgICAgICAgICAgJzxsYWJlbD4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8aW5wdXQgaWQ9XCJzZWxlY3RBbGxcIiB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImFnLWZpbHRlci1jaGVja2JveFwiLz4nK1xyXG4gICAgICAgICAgICAgICAgICAgICcoW1NFTEVDVCBBTExdKScrXHJcbiAgICAgICAgICAgICAgICAnPC9sYWJlbD4nK1xyXG4gICAgICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1maWx0ZXItbGlzdC12aWV3cG9ydFwiPicrXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWZpbHRlci1saXN0LWNvbnRhaW5lclwiPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJpdGVtRm9yUmVwZWF0XCIgY2xhc3M9XCJhZy1maWx0ZXItaXRlbVwiPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8bGFiZWw+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJhZy1maWx0ZXItY2hlY2tib3hcIiBmaWx0ZXItY2hlY2tib3g9XCJ0cnVlXCIvPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9XCJhZy1maWx0ZXItdmFsdWVcIj48L3NwYW4+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvbGFiZWw+JytcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1maWx0ZXItYXBwbHktcGFuZWxcIiBpZD1cImFwcGx5UGFuZWxcIj4nK1xyXG4gICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGlkPVwiYXBwbHlCdXR0b25cIj5BcHBseSBGaWx0ZXI8L2J1dHRvbj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgdmFyIERFRkFVTFRfUk9XX0hFSUdIVCA9IDIwO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTZXRGaWx0ZXIgaW1wbGVtZW50cyBGaWx0ZXIge1xyXG5cclxuICAgICAgICBwcml2YXRlIGVHdWk6IGFueTtcclxuICAgICAgICBwcml2YXRlIGZpbHRlclBhcmFtczogYW55O1xyXG4gICAgICAgIHByaXZhdGUgcm93SGVpZ2h0OiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBtb2RlbDogYW55O1xyXG4gICAgICAgIHByaXZhdGUgZmlsdGVyQ2hhbmdlZENhbGxiYWNrOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSB2YWx1ZUdldHRlcjogYW55O1xyXG4gICAgICAgIHByaXZhdGUgcm93c0luQm9keUNvbnRhaW5lcjogYW55O1xyXG4gICAgICAgIHByaXZhdGUgY29sRGVmOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBsb2NhbGVUZXh0RnVuYzogYW55O1xyXG4gICAgICAgIHByaXZhdGUgY2VsbFJlbmRlcmVyOiBhbnk7XHJcblxyXG4gICAgICAgIHByaXZhdGUgZUxpc3RDb250YWluZXI6IGFueTtcclxuICAgICAgICBwcml2YXRlIGVGaWx0ZXJWYWx1ZVRlbXBsYXRlOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBlU2VsZWN0QWxsOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBlTGlzdFZpZXdwb3J0OiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBlTWluaUZpbHRlcjogYW55O1xyXG4gICAgICAgIHByaXZhdGUgYXBpOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBhcHBseUFjdGl2ZTogYW55O1xyXG4gICAgICAgIHByaXZhdGUgZUFwcGx5QnV0dG9uOiBhbnk7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyUGFyYW1zID0gcGFyYW1zLmZpbHRlclBhcmFtcztcclxuICAgICAgICAgICAgdGhpcy5yb3dIZWlnaHQgPSAodGhpcy5maWx0ZXJQYXJhbXMgJiYgdGhpcy5maWx0ZXJQYXJhbXMuY2VsbEhlaWdodCkgPyB0aGlzLmZpbHRlclBhcmFtcy5jZWxsSGVpZ2h0IDogREVGQVVMVF9ST1dfSEVJR0hUO1xyXG4gICAgICAgICAgICB0aGlzLmFwcGx5QWN0aXZlID0gdGhpcy5maWx0ZXJQYXJhbXMgJiYgdGhpcy5maWx0ZXJQYXJhbXMuYXBwbHkgPT0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbCA9IG5ldyBTZXRGaWx0ZXJNb2RlbChwYXJhbXMuY29sRGVmLCBwYXJhbXMucm93TW9kZWwsIHBhcmFtcy52YWx1ZUdldHRlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlZENhbGxiYWNrID0gcGFyYW1zLmZpbHRlckNoYW5nZWRDYWxsYmFjaztcclxuICAgICAgICAgICAgdGhpcy52YWx1ZUdldHRlciA9IHBhcmFtcy52YWx1ZUdldHRlcjtcclxuICAgICAgICAgICAgdGhpcy5yb3dzSW5Cb2R5Q29udGFpbmVyID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuY29sRGVmID0gcGFyYW1zLmNvbERlZjtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGVUZXh0RnVuYyA9IHBhcmFtcy5sb2NhbGVUZXh0RnVuYztcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmlsdGVyUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNlbGxSZW5kZXJlciA9IHRoaXMuZmlsdGVyUGFyYW1zLmNlbGxSZW5kZXJlcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZUd1aSgpO1xyXG4gICAgICAgICAgICB0aGlzLmFkZFNjcm9sbExpc3RlbmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlQXBpKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGhhdmUgdGhlIGd1aSBhdHRhY2hlZCBiZWZvcmUgd2UgY2FuIGRyYXcgdGhlIHZpcnR1YWwgcm93cywgYXMgdGhlXHJcbiAgICAgICAgLy8gdmlydHVhbCByb3cgbG9naWMgbmVlZHMgaW5mbyBhYm91dCB0aGUgZ3VpIHN0YXRlXHJcbiAgICAgICAgcHVibGljIGFmdGVyR3VpQXR0YWNoZWQoKTogdm9pZCAge1xyXG4gICAgICAgICAgICB0aGlzLmRyYXdWaXJ0dWFsUm93cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGlzRmlsdGVyQWN0aXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5pc0ZpbHRlckFjdGl2ZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGRvZXNGaWx0ZXJQYXNzKG5vZGU6IGFueSk6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm8gZmlsdGVyLCBhbHdheXMgcGFzc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5pc0V2ZXJ5dGhpbmdTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBpZiBub3RoaW5nIHNlbGVjdGVkIGluIGZpbHRlciwgYWx3YXlzIGZhaWxcclxuICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwuaXNOb3RoaW5nU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlR2V0dGVyKG5vZGUpO1xyXG4gICAgICAgICAgICB2YWx1ZSA9IF8ubWFrZU51bGwodmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZpbHRlclBhc3NlZCA9IHRoaXMubW9kZWwuaXNWYWx1ZVNlbGVjdGVkKHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlclBhc3NlZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRHdWkoKTogYW55IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZUd1aTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBvbk5ld1Jvd3NMb2FkZWQoKTogdm9pZCB7XHJcbiAgICAgICAgICAgIHZhciBrZWVwU2VsZWN0aW9uID0gdGhpcy5maWx0ZXJQYXJhbXMgJiYgdGhpcy5maWx0ZXJQYXJhbXMubmV3Um93c0FjdGlvbiA9PT0gJ2tlZXAnO1xyXG4gICAgICAgICAgICAvLyBkZWZhdWx0IGlzIHJlc2V0XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwucmVmcmVzaFVuaXF1ZVZhbHVlcyhrZWVwU2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRDb250YWluZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlydHVhbFJvd3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgY3JlYXRlVGVtcGxhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZW1wbGF0ZVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1tTRUxFQ1QgQUxMXScsIHRoaXMubG9jYWxlVGV4dEZ1bmMoJ3NlbGVjdEFsbCcsICdTZWxlY3QgQWxsJykpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnW1NFQVJDSC4uLl0nLCB0aGlzLmxvY2FsZVRleHRGdW5jKCdzZWFyY2hPb28nLCAnU2VhcmNoLi4uJykpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVHdWkoKSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVHdWkgPSBfLmxvYWRUZW1wbGF0ZSh0aGlzLmNyZWF0ZVRlbXBsYXRlKCkpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lTGlzdENvbnRhaW5lciA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKFwiLmFnLWZpbHRlci1saXN0LWNvbnRhaW5lclwiKTtcclxuICAgICAgICAgICAgdGhpcy5lRmlsdGVyVmFsdWVUZW1wbGF0ZSA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKFwiI2l0ZW1Gb3JSZXBlYXRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZVNlbGVjdEFsbCA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKFwiI3NlbGVjdEFsbFwiKTtcclxuICAgICAgICAgICAgdGhpcy5lTGlzdFZpZXdwb3J0ID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoXCIuYWctZmlsdGVyLWxpc3Qtdmlld3BvcnRcIik7XHJcbiAgICAgICAgICAgIHRoaXMuZU1pbmlGaWx0ZXIgPSB0aGlzLmVHdWkucXVlcnlTZWxlY3RvcihcIi5hZy1maWx0ZXItZmlsdGVyXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmVMaXN0Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9ICh0aGlzLm1vZGVsLmdldFVuaXF1ZVZhbHVlQ291bnQoKSAqIHRoaXMucm93SGVpZ2h0KSArIFwicHhcIjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q29udGFpbmVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZU1pbmlGaWx0ZXIudmFsdWUgPSB0aGlzLm1vZGVsLmdldE1pbmlGaWx0ZXIoKTtcclxuICAgICAgICAgICAgXy5hZGRDaGFuZ2VMaXN0ZW5lcih0aGlzLmVNaW5pRmlsdGVyLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBfdGhpcy5vbk1pbmlGaWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBfLnJlbW92ZUFsbENoaWxkcmVuKHRoaXMuZUxpc3RDb250YWluZXIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lU2VsZWN0QWxsLm9uY2xpY2sgPSB0aGlzLm9uU2VsZWN0QWxsLmJpbmQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5pc0V2ZXJ5dGhpbmdTZWxlY3RlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVTZWxlY3RBbGwuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lU2VsZWN0QWxsLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZWwuaXNOb3RoaW5nU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lU2VsZWN0QWxsLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZVNlbGVjdEFsbC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVTZWxlY3RBbGwuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBBcHBseSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzZXR1cEFwcGx5KCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hcHBseUFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lQXBwbHlCdXR0b24gPSB0aGlzLmVHdWkucXVlcnlTZWxlY3RvcignI2FwcGx5QnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVBcHBseUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZWRDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfLnJlbW92ZUVsZW1lbnQodGhpcy5lR3VpLCAnI2FwcGx5UGFuZWwnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzZXRDb250YWluZXJIZWlnaHQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZUxpc3RDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gKHRoaXMubW9kZWwuZ2V0RGlzcGxheWVkVmFsdWVDb3VudCgpICogdGhpcy5yb3dIZWlnaHQpICsgXCJweFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBkcmF3VmlydHVhbFJvd3MoKSB7XHJcbiAgICAgICAgICAgIHZhciB0b3BQaXhlbCA9IHRoaXMuZUxpc3RWaWV3cG9ydC5zY3JvbGxUb3A7XHJcbiAgICAgICAgICAgIHZhciBib3R0b21QaXhlbCA9IHRvcFBpeGVsICsgdGhpcy5lTGlzdFZpZXdwb3J0Lm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHZhciBmaXJzdFJvdyA9IE1hdGguZmxvb3IodG9wUGl4ZWwgLyB0aGlzLnJvd0hlaWdodCk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0Um93ID0gTWF0aC5mbG9vcihib3R0b21QaXhlbCAvIHRoaXMucm93SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW5zdXJlUm93c1JlbmRlcmVkKGZpcnN0Um93LCBsYXN0Um93KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZW5zdXJlUm93c1JlbmRlcmVkKHN0YXJ0OiBhbnksIGZpbmlzaDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICAvL2F0IHRoZSBlbmQsIHRoaXMgYXJyYXkgd2lsbCBjb250YWluIHRoZSBpdGVtcyB3ZSBuZWVkIHRvIHJlbW92ZVxyXG4gICAgICAgICAgICB2YXIgcm93c1RvUmVtb3ZlID0gT2JqZWN0LmtleXModGhpcy5yb3dzSW5Cb2R5Q29udGFpbmVyKTtcclxuXHJcbiAgICAgICAgICAgIC8vYWRkIGluIG5ldyByb3dzXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvd0luZGV4ID0gc3RhcnQ7IHJvd0luZGV4IDw9IGZpbmlzaDsgcm93SW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgLy9zZWUgaWYgaXRlbSBhbHJlYWR5IHRoZXJlLCBhbmQgaWYgeWVzLCB0YWtlIGl0IG91dCBvZiB0aGUgJ3RvIHJlbW92ZScgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChyb3dzVG9SZW1vdmUuaW5kZXhPZihyb3dJbmRleC50b1N0cmluZygpKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93c1RvUmVtb3ZlLnNwbGljZShyb3dzVG9SZW1vdmUuaW5kZXhPZihyb3dJbmRleC50b1N0cmluZygpKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHRoaXMgcm93IGFjdHVhbGx5IGV4aXN0cyAoaW4gY2FzZSBvdmVyZmxvdyBidWZmZXIgd2luZG93IGV4Y2VlZHMgcmVhbCBkYXRhKVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwuZ2V0RGlzcGxheWVkVmFsdWVDb3VudCgpID4gcm93SW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLm1vZGVsLmdldERpc3BsYXllZFZhbHVlKHJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5pbnNlcnRSb3codmFsdWUsIHJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9hdCB0aGlzIHBvaW50LCBldmVyeXRoaW5nIGluIG91ciAncm93c1RvUmVtb3ZlJyAuIC4gLlxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZVZpcnR1YWxSb3dzKHJvd3NUb1JlbW92ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL3Rha2VzIGFycmF5IG9mIHJvdyBpZCdzXHJcbiAgICAgICAgcHJpdmF0ZSByZW1vdmVWaXJ0dWFsUm93cyhyb3dzVG9SZW1vdmU6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICByb3dzVG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXhUb1JlbW92ZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZVJvd1RvUmVtb3ZlID0gX3RoaXMucm93c0luQm9keUNvbnRhaW5lcltpbmRleFRvUmVtb3ZlXTtcclxuICAgICAgICAgICAgICAgIF90aGlzLmVMaXN0Q29udGFpbmVyLnJlbW92ZUNoaWxkKGVSb3dUb1JlbW92ZSk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMucm93c0luQm9keUNvbnRhaW5lcltpbmRleFRvUmVtb3ZlXTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGluc2VydFJvdyh2YWx1ZTogYW55LCByb3dJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB2YXIgZUZpbHRlclZhbHVlID0gdGhpcy5lRmlsdGVyVmFsdWVUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdmFsdWVFbGVtZW50ID0gZUZpbHRlclZhbHVlLnF1ZXJ5U2VsZWN0b3IoXCIuYWctZmlsdGVyLXZhbHVlXCIpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jZWxsUmVuZGVyZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vcmVuZGVyZXIgcHJvdmlkZWQsIHNvIHVzZSBpdFxyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdEZyb21SZW5kZXJlciA9IHRoaXMuY2VsbFJlbmRlcmVyKHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfLmlzTm9kZShyZXN1bHRGcm9tUmVuZGVyZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hIGRvbSBub2RlIG9yIGVsZW1lbnQgd2FzIHJldHVybmVkLCBzbyBhZGQgY2hpbGRcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUVsZW1lbnQuYXBwZW5kQ2hpbGQocmVzdWx0RnJvbVJlbmRlcmVyKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vdGhlcndpc2UgYXNzdW1lIGl0IHdhcyBodG1sLCBzbyBqdXN0IGluc2VydFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlRWxlbWVudC5pbm5lckhUTUwgPSByZXN1bHRGcm9tUmVuZGVyZXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9vdGhlcndpc2UgZGlzcGxheSBhcyBhIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgdmFyIGJsYW5rc1RleHQgPSAnKCcgKyB0aGlzLmxvY2FsZVRleHRGdW5jKCdibGFua3MnLCAnQmxhbmtzJykgKyAnKSc7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGlzcGxheU5hbWVPZlZhbHVlID0gdmFsdWUgPT09IG51bGwgPyBibGFua3NUZXh0IDogdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZUVsZW1lbnQuaW5uZXJIVE1MID0gZGlzcGxheU5hbWVPZlZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlQ2hlY2tib3ggPSBlRmlsdGVyVmFsdWUucXVlcnlTZWxlY3RvcihcImlucHV0XCIpO1xyXG4gICAgICAgICAgICBlQ2hlY2tib3guY2hlY2tlZCA9IHRoaXMubW9kZWwuaXNWYWx1ZVNlbGVjdGVkKHZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIGVDaGVja2JveC5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMub25DaGVja2JveENsaWNrZWQoZUNoZWNrYm94LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBlRmlsdGVyVmFsdWUuc3R5bGUudG9wID0gKHRoaXMucm93SGVpZ2h0ICogcm93SW5kZXgpICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lTGlzdENvbnRhaW5lci5hcHBlbmRDaGlsZChlRmlsdGVyVmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLnJvd3NJbkJvZHlDb250YWluZXJbcm93SW5kZXhdID0gZUZpbHRlclZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25DaGVja2JveENsaWNrZWQoZUNoZWNrYm94OiBhbnksIHZhbHVlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNoZWNrZWQgPSBlQ2hlY2tib3guY2hlY2tlZDtcclxuICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2VsZWN0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwuaXNFdmVyeXRoaW5nU2VsZWN0ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZVNlbGVjdEFsbC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lU2VsZWN0QWxsLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVTZWxlY3RBbGwuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnVuc2VsZWN0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgLy9pZiBzZXQgaXMgZW1wdHksIG5vdGhpbmcgaXMgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmlzTm90aGluZ1NlbGVjdGVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVTZWxlY3RBbGwuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZVNlbGVjdEFsbC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZVNlbGVjdEFsbC5pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGZpbHRlckNoYW5nZWQoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5hcHBseUFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkQ2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBvbk1pbmlGaWx0ZXJDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICB2YXIgbWluaUZpbHRlckNoYW5nZWQgPSB0aGlzLm1vZGVsLnNldE1pbmlGaWx0ZXIodGhpcy5lTWluaUZpbHRlci52YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChtaW5pRmlsdGVyQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRDb250YWluZXJIZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgcmVmcmVzaFZpcnR1YWxSb3dzKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyVmlydHVhbFJvd3MoKTtcclxuICAgICAgICAgICAgdGhpcy5kcmF3VmlydHVhbFJvd3MoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgY2xlYXJWaXJ0dWFsUm93cygpIHtcclxuICAgICAgICAgICAgdmFyIHJvd3NUb1JlbW92ZSA9IE9iamVjdC5rZXlzKHRoaXMucm93c0luQm9keUNvbnRhaW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVmlydHVhbFJvd3Mocm93c1RvUmVtb3ZlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgb25TZWxlY3RBbGwoKSB7XHJcbiAgICAgICAgICAgIHZhciBjaGVja2VkID0gdGhpcy5lU2VsZWN0QWxsLmNoZWNrZWQ7XHJcbiAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLnNlbGVjdEV2ZXJ5dGhpbmcoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuc2VsZWN0Tm90aGluZygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQWxsQ2hlY2tib3hlcyhjaGVja2VkKTtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHVwZGF0ZUFsbENoZWNrYm94ZXMoY2hlY2tlZDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50bHlEaXNwbGF5ZWRDaGVja2JveGVzOiBhbnkgPSB0aGlzLmVMaXN0Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZmlsdGVyLWNoZWNrYm94PXRydWVdXCIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGN1cnJlbnRseURpc3BsYXllZENoZWNrYm94ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50bHlEaXNwbGF5ZWRDaGVja2JveGVzW2ldLmNoZWNrZWQgPSBjaGVja2VkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGFkZFNjcm9sbExpc3RlbmVyKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lTGlzdFZpZXdwb3J0LmFkZEV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgX3RoaXMuZHJhd1ZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIGdldEFwaSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBjcmVhdGVBcGkoKSB7XHJcbiAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoaXMubW9kZWw7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5hcGkgPSB7XHJcbiAgICAgICAgICAgICAgICBzZXRNaW5pRmlsdGVyOiBmdW5jdGlvbiAobmV3TWluaUZpbHRlcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2V0TWluaUZpbHRlcihuZXdNaW5pRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRNaW5pRmlsdGVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLmdldE1pbmlGaWx0ZXIoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RFdmVyeXRoaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2VsZWN0RXZlcnl0aGluZygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGlzRmlsdGVyQWN0aXZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLmlzRmlsdGVyQWN0aXZlKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0Tm90aGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnNlbGVjdE5vdGhpbmcoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB1bnNlbGVjdFZhbHVlOiBmdW5jdGlvbiAodmFsdWU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnVuc2VsZWN0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVmcmVzaFZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWwuc2VsZWN0VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVmcmVzaFZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaXNWYWx1ZVNlbGVjdGVkOiBmdW5jdGlvbiAodmFsdWU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtb2RlbC5pc1ZhbHVlU2VsZWN0ZWQodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGlzRXZlcnl0aGluZ1NlbGVjdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLmlzRXZlcnl0aGluZ1NlbGVjdGVkKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaXNOb3RoaW5nU2VsZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWwuaXNOb3RoaW5nU2VsZWN0ZWQoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRVbmlxdWVWYWx1ZUNvdW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLmdldFVuaXF1ZVZhbHVlQ291bnQoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRVbmlxdWVWYWx1ZTogZnVuY3Rpb24gKGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZWwuZ2V0VW5pcXVlVmFsdWUoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldE1vZGVsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZGVsLmdldE1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0TW9kZWw6IGZ1bmN0aW9uIChkYXRhTW9kZWw6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsLnNldE1vZGVsKGRhdGFNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yZWZyZXNoVmlydHVhbFJvd3MoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi91dGlscy50c1wiIC8+XHJcblxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciBfID0gVXRpbHM7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFBvcHVwU2VydmljZSB7XHJcblxyXG4gICAgICAgIHN0YXRpYyB0aGVJbnN0YW5jZTogUG9wdXBTZXJ2aWNlO1xyXG5cclxuICAgICAgICBzdGF0aWMgZ2V0SW5zdGFuY2UoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy50aGVJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50aGVJbnN0YW5jZSA9IG5ldyBQb3B1cFNlcnZpY2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy50aGVJbnN0YW5jZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVQb3B1cFBhcmVudDogYW55O1xyXG5cclxuICAgICAgICBpbml0KGVQb3B1cFBhcmVudDogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZVBvcHVwUGFyZW50ID0gZVBvcHVwUGFyZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcG9zaXRpb25Qb3B1cChldmVudFNvdXJjZTogYW55LCBlUG9wdXA6IGFueSwgbWluV2lkdGg6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgc291cmNlUmVjdCA9IGV2ZW50U291cmNlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50UmVjdCA9IHRoaXMuZVBvcHVwUGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHggPSBzb3VyY2VSZWN0LmxlZnQgLSBwYXJlbnRSZWN0LmxlZnQ7XHJcbiAgICAgICAgICAgIHZhciB5ID0gc291cmNlUmVjdC50b3AgLSBwYXJlbnRSZWN0LnRvcCArIHNvdXJjZVJlY3QuaGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgcG9wdXAgaXMgb3ZlcmZsb3dpbmcgdG8gdGhlIHJpZ2h0LCBtb3ZlIGl0IGxlZnRcclxuICAgICAgICAgICAgaWYgKG1pbldpZHRoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRoT2ZQYXJlbnQgPSBwYXJlbnRSZWN0LnJpZ2h0IC0gcGFyZW50UmVjdC5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgdmFyIG1heFggPSB3aWR0aE9mUGFyZW50IC0gbWluV2lkdGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoeCA+IG1heFgpIHsgLy8gbW92ZSBwb3NpdGlvbiBsZWZ0LCBiYWNrIGludG8gdmlld1xyXG4gICAgICAgICAgICAgICAgICAgIHggPSBtYXhYO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHggPCAwKSB7IC8vIGluIGNhc2UgdGhlIHBvcHVwIGhhcyBhIG5lZ2F0aXZlIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgeCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVQb3B1cC5zdHlsZS5sZWZ0ID0geCArIFwicHhcIjtcclxuICAgICAgICAgICAgZVBvcHVwLnN0eWxlLnRvcCA9IHkgKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvL2FkZHMgYW4gZWxlbWVudCB0byBhIGRpdiwgYnV0IGFsc28gbGlzdGVucyB0byBiYWNrZ3JvdW5kIGNoZWNraW5nIGZvciBjbGlja3MsXHJcbiAgICAgICAgLy9zbyB0aGF0IHdoZW4gdGhlIGJhY2tncm91bmQgaXMgY2xpY2tlZCwgdGhlIGNoaWxkIGlzIHJlbW92ZWQgYWdhaW4sIGdpdmluZ1xyXG4gICAgICAgIC8vYSBtb2RlbCBsb29rIHRvIHBvcHVwcy5cclxuICAgICAgICBhZGRBc01vZGFsUG9wdXAoZUNoaWxkOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGVCb2R5ID0gZG9jdW1lbnQuYm9keTtcclxuICAgICAgICAgICAgaWYgKCFlQm9keSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhZy1ncmlkOiBjb3VsZCBub3QgZmluZCB0aGUgYm9keSBvZiB0aGUgZG9jdW1lbnQsIGRvY3VtZW50LmJvZHkgaXMgZW1wdHknKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBvcHVwQWxyZWFkeVNob3duID0gXy5pc1Zpc2libGUoZUNoaWxkKTtcclxuICAgICAgICAgICAgaWYgKHBvcHVwQWxyZWFkeVNob3duKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZVBvcHVwUGFyZW50LmFwcGVuZENoaWxkKGVDaGlsZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB3ZSBhZGQgdGhlc2UgbGlzdGVuZXJzIG5vdywgdGhlbiB0aGUgY3VycmVudCBtb3VzZVxyXG4gICAgICAgICAgICAvLyBjbGljayB3aWxsIGJlIGluY2x1ZGVkLCB3aGljaCB3ZSBkb24ndCB3YW50XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBlQm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGhpZGVQb3B1cCk7XHJcbiAgICAgICAgICAgICAgICBlQ2hpbGQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjb25zdW1lQ2xpY2spO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBldmVudEZyb21DaGlsZDogYW55ID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGhpZGVQb3B1cChldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQgJiYgZXZlbnQgPT09IGV2ZW50RnJvbUNoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhhdC5lUG9wdXBQYXJlbnQucmVtb3ZlQ2hpbGQoZUNoaWxkKTtcclxuICAgICAgICAgICAgICAgIGVCb2R5LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgaGlkZVBvcHVwKTtcclxuICAgICAgICAgICAgICAgIGVDaGlsZC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIGNvbnN1bWVDbGljayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbnN1bWVDbGljayhldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBldmVudEZyb21DaGlsZCA9IGV2ZW50O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gaGlkZVBvcHVwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInRleHRGaWx0ZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwibnVtYmVyRmlsdGVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNldEZpbHRlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi93aWRnZXRzL2FnUG9wdXBTZXJ2aWNlLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIGFnUG9wdXBTZXJ2aWNlID0gUG9wdXBTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgRmlsdGVyTWFuYWdlciB7XHJcblxyXG4gICAgICAgIHByaXZhdGUgJGNvbXBpbGU6IGFueTtcclxuICAgICAgICBwcml2YXRlICRzY29wZTogYW55O1xyXG4gICAgICAgIHByaXZhdGUgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBncmlkOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBhbGxGaWx0ZXJzOiBhbnk7XHJcbiAgICAgICAgcHJpdmF0ZSBleHByZXNzaW9uU2VydmljZTogYW55O1xyXG4gICAgICAgIHByaXZhdGUgY29sdW1uTW9kZWw6IGFueTtcclxuICAgICAgICBwcml2YXRlIHJvd01vZGVsOiBhbnk7XHJcblxyXG4gICAgICAgIHB1YmxpYyBpbml0KGdyaWQ6IGFueSwgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnksICRjb21waWxlOiBhbnksICRzY29wZTogYW55LCBleHByZXNzaW9uU2VydmljZTogYW55LCBjb2x1bW5Nb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuJGNvbXBpbGUgPSAkY29tcGlsZTtcclxuICAgICAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyID0gZ3JpZE9wdGlvbnNXcmFwcGVyO1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQgPSBncmlkO1xyXG4gICAgICAgICAgICB0aGlzLmFsbEZpbHRlcnMgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uU2VydmljZSA9IGV4cHJlc3Npb25TZXJ2aWNlO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsID0gY29sdW1uTW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc2V0RmlsdGVyTW9kZWwobW9kZWw6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmIChtb2RlbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gbWFyayB0aGUgZmlsdGVycyBhcyB3ZSBzZXQgdGhlbSwgc28gYW55IGFjdGl2ZSBmaWx0ZXJzIGxlZnQgb3ZlciB3ZSBzdG9wXHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc2VkRmllbGRzID0gT2JqZWN0LmtleXMobW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgdXRpbHMuaXRlcmF0ZU9iamVjdCh0aGlzLmFsbEZpbHRlcnMsIGZ1bmN0aW9uIChrZXk6IGFueSwgZmlsdGVyV3JhcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gZmlsdGVyV3JhcHBlci5jb2x1bW4uY29sRGVmLmZpZWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnJlbW92ZUZyb21BcnJheShwcm9jZXNzZWRGaWVsZHMsIGZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld01vZGVsID0gbW9kZWxbZmllbGRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LnNldE1vZGVsT25GaWx0ZXJXcmFwcGVyKGZpbHRlcldyYXBwZXIuZmlsdGVyLCBuZXdNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nIGFnLWdyaWQgLSBubyBmaWVsZCBmb3VuZCBmb3IgY29sdW1uIHdoaWxlIGRvaW5nIHNldEZpbHRlck1vZGVsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCBwcm9jZXNzZWRGaWVsZHMgY29udGFpbnMgZGF0YSBmb3Igd2hpY2ggd2UgZG9uJ3QgaGF2ZSBhIGZpbHRlciB3b3JraW5nIHlldFxyXG4gICAgICAgICAgICAgICAgdXRpbHMuaXRlcmF0ZUFycmF5KHByb2Nlc3NlZEZpZWxkcywgZnVuY3Rpb24gKGZpZWxkOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gdGhhdC5jb2x1bW5Nb2RlbC5nZXRDb2x1bW4oZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV2FybmluZyBhZy1ncmlkIC0gbm8gY29sdW1uIGZvdW5kIGZvciBmaWVsZCAnICsgZmllbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJXcmFwcGVyID0gdGhhdC5nZXRPckNyZWF0ZUZpbHRlcldyYXBwZXIoY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNldE1vZGVsT25GaWx0ZXJXcmFwcGVyKGZpbHRlcldyYXBwZXIuZmlsdGVyLCBtb2RlbFtmaWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB1dGlscy5pdGVyYXRlT2JqZWN0KHRoaXMuYWxsRmlsdGVycywgZnVuY3Rpb24gKGtleTogYW55LCBmaWx0ZXJXcmFwcGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNldE1vZGVsT25GaWx0ZXJXcmFwcGVyKGZpbHRlcldyYXBwZXIuZmlsdGVyLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIHNldE1vZGVsT25GaWx0ZXJXcmFwcGVyKGZpbHRlcjogYW55LCBuZXdNb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGJlY2F1c2UgdXNlciBjYW4gcHJvdmlkZSBmaWx0ZXJzLCB3ZSBwcm92aWRlIHVzZWZ1bCBlcnJvciBjaGVja2luZyBhbmQgbWVzc2FnZXNcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXIuZ2V0QXBpICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmcgYWctZ3JpZCAtIGZpbHRlciBtaXNzaW5nIGdldEFwaSBtZXRob2QsIHdoaWNoIGlzIG5lZWRlZCBmb3IgZ2V0RmlsdGVyTW9kZWwnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyQXBpID0gZmlsdGVyLmdldEFwaSgpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGZpbHRlckFwaS5zZXRNb2RlbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nIGFnLWdyaWQgLSBmaWx0ZXIgQVBJIG1pc3Npbmcgc2V0TW9kZWwgbWV0aG9kLCB3aGljaCBpcyBuZWVkZWQgZm9yIHNldEZpbHRlck1vZGVsJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmlsdGVyQXBpLnNldE1vZGVsKG5ld01vZGVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRGaWx0ZXJNb2RlbCgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IDxhbnk+e307XHJcbiAgICAgICAgICAgIHV0aWxzLml0ZXJhdGVPYmplY3QodGhpcy5hbGxGaWx0ZXJzLCBmdW5jdGlvbiAoa2V5OiBhbnksIGZpbHRlcldyYXBwZXI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgLy8gYmVjYXVzZSB1c2VyIGNhbiBwcm92aWRlIGZpbHRlcnMsIHdlIHByb3ZpZGUgdXNlZnVsIGVycm9yIGNoZWNraW5nIGFuZCBtZXNzYWdlc1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJXcmFwcGVyLmZpbHRlci5nZXRBcGkgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmcgYWctZ3JpZCAtIGZpbHRlciBtaXNzaW5nIGdldEFwaSBtZXRob2QsIHdoaWNoIGlzIG5lZWRlZCBmb3IgZ2V0RmlsdGVyTW9kZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyQXBpID0gZmlsdGVyV3JhcHBlci5maWx0ZXIuZ2V0QXBpKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpbHRlckFwaS5nZXRNb2RlbCAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV2FybmluZyBhZy1ncmlkIC0gZmlsdGVyIEFQSSBtaXNzaW5nIGdldE1vZGVsIG1ldGhvZCwgd2hpY2ggaXMgbmVlZGVkIGZvciBnZXRGaWx0ZXJNb2RlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IGZpbHRlckFwaS5nZXRNb2RlbCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpZWxkID0gZmlsdGVyV3JhcHBlci5jb2x1bW4uY29sRGVmLmZpZWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZmllbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdXYXJuaW5nIGFnLWdyaWQgLSBjYW5ub3QgZ2V0IGZpbHRlciBtb2RlbCB3aGVuIG5vIGZpZWxkIHZhbHVlIHByZXNlbnQgZm9yIGNvbHVtbicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFtmaWVsZF0gPSBtb2RlbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHVibGljIHNldFJvd01vZGVsKHJvd01vZGVsOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dNb2RlbCA9IHJvd01vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGF0IGxlYXN0IG9uZSBmaWx0ZXIgaXMgYWN0aXZlXHJcbiAgICAgICAgcHJpdmF0ZSBpc0ZpbHRlclByZXNlbnQoKSB7XHJcbiAgICAgICAgICAgIHZhciBhdExlYXN0T25lQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5hbGxGaWx0ZXJzKTtcclxuICAgICAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJXcmFwcGVyID0gdGhhdC5hbGxGaWx0ZXJzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZpbHRlcldyYXBwZXIuZmlsdGVyLmlzRmlsdGVyQWN0aXZlKSB7IC8vIGJlY2F1c2UgdXNlcnMgY2FuIGRvIGN1c3RvbSBmaWx0ZXJzLCBnaXZlIG5pY2UgZXJyb3IgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZpbHRlciBpcyBtaXNzaW5nIG1ldGhvZCBpc0ZpbHRlckFjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcldyYXBwZXIuZmlsdGVyLmlzRmlsdGVyQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBhdExlYXN0T25lQWN0aXZlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhdExlYXN0T25lQWN0aXZlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGdpdmVuIGNvbCBoYXMgYSBmaWx0ZXIgYWN0aXZlXHJcbiAgICAgICAgcHJpdmF0ZSBpc0ZpbHRlclByZXNlbnRGb3JDb2woY29sSWQ6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgZmlsdGVyV3JhcHBlciA9IHRoaXMuYWxsRmlsdGVyc1tjb2xJZF07XHJcbiAgICAgICAgICAgIGlmICghZmlsdGVyV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZmlsdGVyV3JhcHBlci5maWx0ZXIuaXNGaWx0ZXJBY3RpdmUpIHsgLy8gYmVjYXVzZSB1c2VycyBjYW4gZG8gY3VzdG9tIGZpbHRlcnMsIGdpdmUgbmljZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGaWx0ZXIgaXMgbWlzc2luZyBtZXRob2QgaXNGaWx0ZXJBY3RpdmUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyUHJlc2VudCA9IGZpbHRlcldyYXBwZXIuZmlsdGVyLmlzRmlsdGVyQWN0aXZlKCk7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWx0ZXJQcmVzZW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcHJpdmF0ZSBkb2VzRmlsdGVyUGFzcyhub2RlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSBub2RlLmRhdGE7XHJcbiAgICAgICAgICAgIHZhciBjb2xLZXlzID0gT2JqZWN0LmtleXModGhpcy5hbGxGaWx0ZXJzKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjb2xLZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyAvLyBjcml0aWNhbCBjb2RlLCBkb24ndCB1c2UgZnVuY3Rpb25hbCBwcm9ncmFtbWluZ1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjb2xJZCA9IGNvbEtleXNbaV07XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyV3JhcHBlciA9IHRoaXMuYWxsRmlsdGVyc1tjb2xJZF07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaWYgbm8gZmlsdGVyLCBhbHdheXMgcGFzc1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpbHRlcldyYXBwZXIgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghZmlsdGVyV3JhcHBlci5maWx0ZXIuZG9lc0ZpbHRlclBhc3MpIHsgLy8gYmVjYXVzZSB1c2VycyBjYW4gZG8gY3VzdG9tIGZpbHRlcnMsIGdpdmUgbmljZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmlsdGVyIGlzIG1pc3NpbmcgbWV0aG9kIGRvZXNGaWx0ZXJQYXNzJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogZGF0YVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmICghZmlsdGVyV3JhcHBlci5maWx0ZXIuZG9lc0ZpbHRlclBhc3MocGFyYW1zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBhbGwgZmlsdGVycyBwYXNzZWRcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgb25OZXdSb3dzTG9hZGVkKCkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYWxsRmlsdGVycykuZm9yRWFjaChmdW5jdGlvbiAoZmllbGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXIgPSB0aGF0LmFsbEZpbHRlcnNbZmllbGRdLmZpbHRlcjtcclxuICAgICAgICAgICAgICAgIGlmIChmaWx0ZXIub25OZXdSb3dzTG9hZGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmlsdGVyLm9uTmV3Um93c0xvYWRlZCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgY3JlYXRlVmFsdWVHZXR0ZXIoY29sRGVmOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gdmFsdWVHZXR0ZXIobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBpID0gdGhhdC5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0QXBpKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY29udGV4dCA9IHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbnRleHQoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1dGlscy5nZXRWYWx1ZSh0aGF0LmV4cHJlc3Npb25TZXJ2aWNlLCBub2RlLmRhdGEsIGNvbERlZiwgbm9kZSwgYXBpLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHB1YmxpYyBnZXRGaWx0ZXJBcGkoY29sdW1uOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGZpbHRlcldyYXBwZXIgPSB0aGlzLmdldE9yQ3JlYXRlRmlsdGVyV3JhcHBlcihjb2x1bW4pO1xyXG4gICAgICAgICAgICBpZiAoZmlsdGVyV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWx0ZXJXcmFwcGVyLmZpbHRlci5nZXRBcGkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsdGVyV3JhcHBlci5maWx0ZXIuZ2V0QXBpKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgZ2V0T3JDcmVhdGVGaWx0ZXJXcmFwcGVyKGNvbHVtbjogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJXcmFwcGVyID0gdGhpcy5hbGxGaWx0ZXJzW2NvbHVtbi5jb2xJZF07XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZpbHRlcldyYXBwZXIpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcldyYXBwZXIgPSB0aGlzLmNyZWF0ZUZpbHRlcldyYXBwZXIoY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxsRmlsdGVyc1tjb2x1bW4uY29sSWRdID0gZmlsdGVyV3JhcHBlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlcldyYXBwZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcml2YXRlIGNyZWF0ZUZpbHRlcldyYXBwZXIoY29sdW1uOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNvbERlZiA9IGNvbHVtbi5jb2xEZWY7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlsdGVyV3JhcHBlciA9IHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyOiA8YW55PiBudWxsLFxyXG4gICAgICAgICAgICAgICAgc2NvcGU6IDxhbnk+IG51bGwsXHJcbiAgICAgICAgICAgICAgICBndWk6IDxhbnk+IG51bGxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIGZpbHRlckNoYW5nZWRDYWxsYmFjayA9IHRoaXMuZ3JpZC5vbkZpbHRlckNoYW5nZWQuYmluZCh0aGlzLmdyaWQpO1xyXG4gICAgICAgICAgICB2YXIgZmlsdGVyUGFyYW1zID0gY29sRGVmLmZpbHRlclBhcmFtcztcclxuICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgIGNvbERlZjogY29sRGVmLFxyXG4gICAgICAgICAgICAgICAgcm93TW9kZWw6IHRoaXMucm93TW9kZWwsXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJDaGFuZ2VkQ2FsbGJhY2s6IGZpbHRlckNoYW5nZWRDYWxsYmFjayxcclxuICAgICAgICAgICAgICAgIGZpbHRlclBhcmFtczogZmlsdGVyUGFyYW1zLFxyXG4gICAgICAgICAgICAgICAgbG9jYWxlVGV4dEZ1bmM6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldExvY2FsZVRleHRGdW5jKCksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZUdldHRlcjogdGhpcy5jcmVhdGVWYWx1ZUdldHRlcihjb2xEZWYpLFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlOiA8YW55PiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sRGVmLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdXNlciBwcm92aWRlZCBhIGZpbHRlciwganVzdCB1c2UgaXRcclxuICAgICAgICAgICAgICAgIC8vIGZpcnN0IHVwLCBjcmVhdGUgY2hpbGQgc2NvcGUgaWYgbmVlZGVkXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNBbmd1bGFyQ29tcGlsZUZpbHRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzY29wZSA9IHRoaXMuJHNjb3BlLiRuZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJXcmFwcGVyLnNjb3BlID0gc2NvcGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLiRzY29wZSA9IHNjb3BlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gbm93IGNyZWF0ZSBmaWx0ZXJcclxuICAgICAgICAgICAgICAgIGZpbHRlcldyYXBwZXIuZmlsdGVyID0gbmV3IGNvbERlZi5maWx0ZXIocGFyYW1zKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xEZWYuZmlsdGVyID09PSAndGV4dCcpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcldyYXBwZXIuZmlsdGVyID0gbmV3IFRleHRGaWx0ZXIocGFyYW1zKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChjb2xEZWYuZmlsdGVyID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyV3JhcHBlci5maWx0ZXIgPSBuZXcgTnVtYmVyRmlsdGVyKHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJXcmFwcGVyLmZpbHRlciA9IG5ldyBTZXRGaWx0ZXIocGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCFmaWx0ZXJXcmFwcGVyLmZpbHRlci5nZXRHdWkpIHsgLy8gYmVjYXVzZSB1c2VycyBjYW4gZG8gY3VzdG9tIGZpbHRlcnMsIGdpdmUgbmljZSBlcnJvciBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnRmlsdGVyIGlzIG1pc3NpbmcgbWV0aG9kIGdldEd1aSc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBlRmlsdGVyR3VpID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGVGaWx0ZXJHdWkuY2xhc3NOYW1lID0gJ2FnLWZpbHRlcic7XHJcbiAgICAgICAgICAgIHZhciBndWlGcm9tRmlsdGVyID0gZmlsdGVyV3JhcHBlci5maWx0ZXIuZ2V0R3VpKCk7XHJcbiAgICAgICAgICAgIGlmICh1dGlscy5pc05vZGVPckVsZW1lbnQoZ3VpRnJvbUZpbHRlcikpIHtcclxuICAgICAgICAgICAgICAgIC8vYSBkb20gbm9kZSBvciBlbGVtZW50IHdhcyByZXR1cm5lZCwgc28gYWRkIGNoaWxkXHJcbiAgICAgICAgICAgICAgICBlRmlsdGVyR3VpLmFwcGVuZENoaWxkKGd1aUZyb21GaWx0ZXIpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9vdGhlcndpc2UgYXNzdW1lIGl0IHdhcyBodG1sLCBzbyBqdXN0IGluc2VydFxyXG4gICAgICAgICAgICAgICAgdmFyIGVUZXh0U3BhbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgICAgIGVUZXh0U3Bhbi5pbm5lckhUTUwgPSBndWlGcm9tRmlsdGVyO1xyXG4gICAgICAgICAgICAgICAgZUZpbHRlckd1aS5hcHBlbmRDaGlsZChlVGV4dFNwYW4pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyV3JhcHBlci5zY29wZSkge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyV3JhcHBlci5ndWkgPSB0aGlzLiRjb21waWxlKGVGaWx0ZXJHdWkpKGZpbHRlcldyYXBwZXIuc2NvcGUpWzBdO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyV3JhcHBlci5ndWkgPSBlRmlsdGVyR3VpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmlsdGVyV3JhcHBlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHByaXZhdGUgc2hvd0ZpbHRlcihjb2x1bW46IGFueSwgZXZlbnRTb3VyY2U6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGZpbHRlcldyYXBwZXIgPSB0aGlzLmdldE9yQ3JlYXRlRmlsdGVyV3JhcHBlcihjb2x1bW4pO1xyXG5cclxuICAgICAgICAgICAgYWdQb3B1cFNlcnZpY2UucG9zaXRpb25Qb3B1cChldmVudFNvdXJjZSwgZmlsdGVyV3JhcHBlci5ndWksIDIwMCk7XHJcbiAgICAgICAgICAgIGFnUG9wdXBTZXJ2aWNlLmFkZEFzTW9kYWxQb3B1cChmaWx0ZXJXcmFwcGVyLmd1aSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmlsdGVyV3JhcHBlci5maWx0ZXIuYWZ0ZXJHdWlBdHRhY2hlZCkge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyV3JhcHBlci5maWx0ZXIuYWZ0ZXJHdWlBdHRhY2hlZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwidXRpbHMudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuXHJcbiAgICAvLyB0aGVzZSBjb25zdGFudHMgYXJlIHVzZWQgZm9yIGRldGVybWluaW5nIGlmIGdyb3VwcyBzaG91bGRcclxuICAgIC8vIGJlIHNlbGVjdGVkIG9yIGRlc2VsZWN0ZWQgd2hlbiBzZWxlY3RpbmcgZ3JvdXBzLCBhbmQgdGhlIGdyb3VwXHJcbiAgICAvLyB0aGVuIHNlbGVjdHMgdGhlIGNoaWxkcmVuLlxyXG4gICAgdmFyIFNFTEVDVEVEID0gMDtcclxuICAgIHZhciBVTlNFTEVDVEVEID0gMTtcclxuICAgIHZhciBNSVhFRCA9IDI7XHJcbiAgICB2YXIgRE9fTk9UX0NBUkUgPSAzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBTZWxlY3Rpb25Db250cm9sbGVyIHtcclxuXHJcbiAgICAgICAgZVJvd3NQYXJlbnQ6IGFueTtcclxuICAgICAgICBhbmd1bGFyR3JpZDogYW55O1xyXG4gICAgICAgIGdyaWRPcHRpb25zV3JhcHBlcjogYW55O1xyXG4gICAgICAgICRzY29wZTogYW55O1xyXG4gICAgICAgIHJvd1JlbmRlcmVyOiBhbnk7XHJcbiAgICAgICAgc2VsZWN0ZWRSb3dzOiBhbnk7XHJcbiAgICAgICAgc2VsZWN0ZWROb2Rlc0J5SWQ6IGFueTtcclxuICAgICAgICByb3dNb2RlbDogYW55O1xyXG5cclxuICAgICAgICBpbml0KGFuZ3VsYXJHcmlkOiBhbnksIGdyaWRQYW5lbDogYW55LCBncmlkT3B0aW9uc1dyYXBwZXI6IGFueSwgJHNjb3BlOiBhbnksIHJvd1JlbmRlcmVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5lUm93c1BhcmVudCA9IGdyaWRQYW5lbC5nZXRSb3dzUGFyZW50KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQgPSBhbmd1bGFyR3JpZDtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgICAgICB0aGlzLnJvd1JlbmRlcmVyID0gcm93UmVuZGVyZXI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmluaXRTZWxlY3RlZE5vZGVzQnlJZCgpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvd3MgPSBbXTtcclxuICAgICAgICAgICAgZ3JpZE9wdGlvbnNXcmFwcGVyLnNldFNlbGVjdGVkUm93cyh0aGlzLnNlbGVjdGVkUm93cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0U2VsZWN0ZWROb2Rlc0J5SWQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWROb2Rlc0J5SWQgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuc2V0U2VsZWN0ZWROb2Rlc0J5SWQodGhpcy5zZWxlY3RlZE5vZGVzQnlJZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRTZWxlY3RlZE5vZGVzKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWROb2RlczogYW55ID0gW107XHJcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGhpcy5zZWxlY3RlZE5vZGVzQnlJZCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlkID0ga2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZE5vZGUgPSB0aGlzLnNlbGVjdGVkTm9kZXNCeUlkW2lkXTtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTm9kZXMucHVzaChzZWxlY3RlZE5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZE5vZGVzO1xyXG4gICAgICAgIH1cclxuXHJcbi8vIHJldHVybnMgYSBsaXN0IG9mIGFsbCBub2RlcyBhdCAnYmVzdCBjb3N0JyAtIGEgZmVhdHVyZSB0byBiZSB1c2VkXHJcbi8vIHdpdGggZ3JvdXBzIC8gdHJlZXMuIGlmIGEgZ3JvdXAgaGFzIGFsbCBpdCdzIGNoaWxkcmVuIHNlbGVjdGVkLFxyXG4vLyB0aGVuIHRoZSBncm91cCBhcHBlYXJzIGluIHRoZSByZXN1bHQsIGJ1dCBub3QgdGhlIGNoaWxkcmVuLlxyXG4vLyBEZXNpZ25lZCBmb3IgdXNlIHdpdGggJ2NoaWxkcmVuJyBhcyB0aGUgZ3JvdXAgc2VsZWN0aW9uIHR5cGUsXHJcbi8vIHdoZXJlIGdyb3VwcyBkb24ndCBhY3R1YWxseSBhcHBlYXIgaW4gdGhlIHNlbGVjdGlvbiBub3JtYWxseS5cclxuICAgICAgICBnZXRCZXN0Q29zdE5vZGVTZWxlY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMucm93TW9kZWwuZ2V0VG9wTGV2ZWxOb2RlcyAhPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgJ3NlbGVjdEFsbCBub3QgYXZhaWxhYmxlIHdoZW4gcm93cyBhcmUgb24gdGhlIHNlcnZlcic7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0b3BMZXZlbE5vZGVzID0gdGhpcy5yb3dNb2RlbC5nZXRUb3BMZXZlbE5vZGVzKCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0OiBhbnkgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgLy8gcmVjdXJzaXZlIGZ1bmN0aW9uLCB0byBmaW5kIHRoZSBzZWxlY3RlZCBub2Rlc1xyXG4gICAgICAgICAgICBmdW5jdGlvbiB0cmF2ZXJzZShub2RlczogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuaXNOb2RlU2VsZWN0ZWQobm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbm90IHNlbGVjdGVkLCB0aGVuIGlmIGl0J3MgYSBncm91cCwgYW5kIHRoZSBncm91cFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBoYXMgY2hpbGRyZW4sIGNvbnRpbnVlIHRvIHNlYXJjaCBmb3Igc2VsZWN0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCAmJiBub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmF2ZXJzZShub2RlLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdHJhdmVyc2UodG9wTGV2ZWxOb2Rlcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0Um93TW9kZWwocm93TW9kZWw6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvd01vZGVsID0gcm93TW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljIC0gdGhpcyBjbGVhcnMgdGhlIHNlbGVjdGlvbiwgYnV0IGRvZXNuJ3QgY2xlYXIgZG93biB0aGUgY3NzIC0gd2hlbiBpdCBpcyBjYWxsZWQsIHRoZVxyXG4vLyBjYWxsZXIgdGhlbiBnZXRzIHRoZSBncmlkIHRvIHJlZnJlc2guXHJcbiAgICAgICAgZGVzZWxlY3RBbGwoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdFNlbGVjdGVkTm9kZXNCeUlkKCk7XHJcbiAgICAgICAgICAgIC8vdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnNlbGVjdGVkTm9kZXNCeUlkKTtcclxuICAgICAgICAgICAgLy9mb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgLy8gICAgZGVsZXRlIHRoaXMuc2VsZWN0ZWROb2Rlc0J5SWRba2V5c1tpXV07XHJcbiAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICB0aGlzLnN5bmNTZWxlY3RlZFJvd3NBbmRDYWxsTGlzdGVuZXIoKTtcclxuICAgICAgICB9XHJcblxyXG4vLyBwdWJsaWMgLSB0aGlzIHNlbGVjdHMgZXZlcnl0aGluZywgYnV0IGRvZXNuJ3QgY2xlYXIgZG93biB0aGUgY3NzIC0gd2hlbiBpdCBpcyBjYWxsZWQsIHRoZVxyXG4vLyBjYWxsZXIgdGhlbiBnZXRzIHRoZSBncmlkIHRvIHJlZnJlc2guXHJcbiAgICAgICAgc2VsZWN0QWxsKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLnJvd01vZGVsLmdldFRvcExldmVsTm9kZXMgIT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHRocm93ICdzZWxlY3RBbGwgbm90IGF2YWlsYWJsZSB3aGVuIHJvd3MgYXJlIG9uIHRoZSBzZXJ2ZXInO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ZWROb2Rlc0J5SWQgPSB0aGlzLnNlbGVjdGVkTm9kZXNCeUlkO1xyXG4gICAgICAgICAgICAvLyBpZiB0aGUgc2VsZWN0aW9uIGlzIFwiZG9uJ3QgaW5jbHVkZSBncm91cHNcIiwgdGhlbiB3ZSBkb24ndCBpbmNsdWRlIHRoZW0hXHJcbiAgICAgICAgICAgIHZhciBpbmNsdWRlR3JvdXBzID0gIXRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBTZWxlY3RzQ2hpbGRyZW4oKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlY3Vyc2l2ZWx5U2VsZWN0KG5vZGVzOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY3Vyc2l2ZWx5U2VsZWN0KG5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVHcm91cHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGVzQnlJZFtub2RlLmlkXSA9IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZE5vZGVzQnlJZFtub2RlLmlkXSA9IG5vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB0b3BMZXZlbE5vZGVzID0gdGhpcy5yb3dNb2RlbC5nZXRUb3BMZXZlbE5vZGVzKCk7XHJcbiAgICAgICAgICAgIHJlY3Vyc2l2ZWx5U2VsZWN0KHRvcExldmVsTm9kZXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zeW5jU2VsZWN0ZWRSb3dzQW5kQ2FsbExpc3RlbmVyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdWJsaWMgc2VsZWN0Tm9kZShub2RlOiBhbnksIHRyeU11bHRpOiBhbnksIHN1cHByZXNzRXZlbnRzPzogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBtdWx0aVNlbGVjdCA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93U2VsZWN0aW9uTXVsdGkoKSAmJiB0cnlNdWx0aTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHRoZSBub2RlIGlzIGEgZ3JvdXAsIHRoZW4gc2VsZWN0aW5nIHRoaXMgaXMgdGhlIHNhbWUgYXMgc2VsZWN0aW5nIHRoZSBwYXJlbnQsXHJcbiAgICAgICAgICAgIC8vIHNvIHRvIGhhdmUgb25seSBvbmUgZmxvdyB0aHJvdWdoIHRoZSBiZWxvdywgd2UgYWx3YXlzIHNlbGVjdCB0aGUgaGVhZGVyIHBhcmVudFxyXG4gICAgICAgICAgICAvLyAod2hpY2ggdGhlbiBoYXMgdGhlIHNpZGUgZWZmZWN0IG9mIHNlbGVjdGluZyB0aGUgY2hpbGQpLlxyXG4gICAgICAgICAgICB2YXIgbm9kZVRvU2VsZWN0OiBhbnk7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmZvb3Rlcikge1xyXG4gICAgICAgICAgICAgICAgbm9kZVRvU2VsZWN0ID0gbm9kZS5zaWJsaW5nO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbm9kZVRvU2VsZWN0ID0gbm9kZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYXQgdGhlIGVuZCwgaWYgdGhpcyBpcyB0cnVlLCB3ZSBpbmZvcm0gdGhlIGNhbGxiYWNrXHJcbiAgICAgICAgICAgIHZhciBhdExlYXN0T25lSXRlbVVuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGF0TGVhc3RPbmVJdGVtU2VsZWN0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vIHNlZSBpZiByb3dzIHRvIGJlIGRlc2VsZWN0ZWRcclxuICAgICAgICAgICAgaWYgKCFtdWx0aVNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgYXRMZWFzdE9uZUl0ZW1VbnNlbGVjdGVkID0gdGhpcy5kb1dvcmtPZkRlc2VsZWN0QWxsTm9kZXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBTZWxlY3RzQ2hpbGRyZW4oKSAmJiBub2RlVG9TZWxlY3QuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvbid0IHNlbGVjdCB0aGUgZ3JvdXAsIHNlbGVjdCB0aGUgY2hpbGRyZW4gaW5zdGVhZFxyXG4gICAgICAgICAgICAgICAgYXRMZWFzdE9uZUl0ZW1TZWxlY3RlZCA9IHRoaXMucmVjdXJzaXZlbHlTZWxlY3RBbGxDaGlsZHJlbihub2RlVG9TZWxlY3QpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gc2VlIGlmIHJvdyBuZWVkcyB0byBiZSBzZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgYXRMZWFzdE9uZUl0ZW1TZWxlY3RlZCA9IHRoaXMuZG9Xb3JrT2ZTZWxlY3ROb2RlKG5vZGVUb1NlbGVjdCwgc3VwcHJlc3NFdmVudHMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoYXRMZWFzdE9uZUl0ZW1VbnNlbGVjdGVkIHx8IGF0TGVhc3RPbmVJdGVtU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3luY1NlbGVjdGVkUm93c0FuZENhbGxMaXN0ZW5lcihzdXBwcmVzc0V2ZW50cyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlR3JvdXBQYXJlbnRzSWZOZWVkZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlY3Vyc2l2ZWx5U2VsZWN0QWxsQ2hpbGRyZW4obm9kZTogYW55LCBzdXBwcmVzc0V2ZW50cz86IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgYXRMZWFzdE9uZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVjdXJzaXZlbHlTZWxlY3RBbGxDaGlsZHJlbihjaGlsZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0TGVhc3RPbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9Xb3JrT2ZTZWxlY3ROb2RlKGNoaWxkLCBzdXBwcmVzc0V2ZW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0TGVhc3RPbmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhdExlYXN0T25lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVjdXJzaXZlbHlEZXNlbGVjdEFsbENoaWxkcmVuKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAobm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkID0gbm9kZS5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGQuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN1cnNpdmVseURlc2VsZWN0QWxsQ2hpbGRyZW4oY2hpbGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RSZWFsTm9kZShjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHJpdmF0ZVxyXG4vLyAxIC0gc2VsZWN0cyBhIG5vZGVcclxuLy8gMiAtIHVwZGF0ZXMgdGhlIFVJXHJcbi8vIDMgLSBjYWxscyBjYWxsYmFja3NcclxuICAgICAgICBkb1dvcmtPZlNlbGVjdE5vZGUobm9kZTogYW55LCBzdXBwcmVzc0V2ZW50czogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkTm9kZXNCeUlkW25vZGUuaWRdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWROb2Rlc0J5SWRbbm9kZS5pZF0gPSBub2RlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRDc3NDbGFzc0Zvck5vZGVfYW5kSW5mb3JtVmlydHVhbFJvd0xpc3RlbmVyKG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gYWxzbyBjb2xvciBpbiB0aGUgZm9vdGVyIGlmIHRoZXJlIGlzIG9uZVxyXG4gICAgICAgICAgICBpZiAobm9kZS5ncm91cCAmJiBub2RlLmV4cGFuZGVkICYmIG5vZGUuc2libGluZykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRDc3NDbGFzc0Zvck5vZGVfYW5kSW5mb3JtVmlydHVhbFJvd0xpc3RlbmVyKG5vZGUuc2libGluZyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGluZm9ybSB0aGUgcm93U2VsZWN0ZWQgbGlzdGVuZXIsIGlmIGFueVxyXG4gICAgICAgICAgICBpZiAoIXN1cHByZXNzRXZlbnRzICYmIHR5cGVvZiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dTZWxlY3RlZCgpID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFJvd1NlbGVjdGVkKCkobm9kZS5kYXRhLCBub2RlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHJpdmF0ZVxyXG4vLyAxIC0gc2VsZWN0cyBhIG5vZGVcclxuLy8gMiAtIHVwZGF0ZXMgdGhlIFVJXHJcbi8vIDMgLSBjYWxscyBjYWxsYmFja3NcclxuLy8gd293IC0gd2hhdCBhIGJpZyBuYW1lIGZvciBhIG1ldGhvZCwgZXhjZXB0aW9uIGNhc2UsIGl0J3Mgc2F5aW5nIHdoYXQgdGhlIG1ldGhvZCBkb2VzXHJcbiAgICAgICAgYWRkQ3NzQ2xhc3NGb3JOb2RlX2FuZEluZm9ybVZpcnR1YWxSb3dMaXN0ZW5lcihub2RlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHZpcnR1YWxSZW5kZXJlZFJvd0luZGV4ID0gdGhpcy5yb3dSZW5kZXJlci5nZXRJbmRleE9mUmVuZGVyZWROb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICBpZiAodmlydHVhbFJlbmRlcmVkUm93SW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdXRpbHMucXVlcnlTZWxlY3RvckFsbF9hZGRDc3NDbGFzcyh0aGlzLmVSb3dzUGFyZW50LCAnW3Jvdz1cIicgKyB2aXJ0dWFsUmVuZGVyZWRSb3dJbmRleCArICdcIl0nLCAnYWctcm93LXNlbGVjdGVkJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gaW5mb3JtIHZpcnR1YWwgcm93IGxpc3RlbmVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuZ3VsYXJHcmlkLm9uVmlydHVhbFJvd1NlbGVjdGVkKHZpcnR1YWxSZW5kZXJlZFJvd0luZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbi8vIHByaXZhdGVcclxuLy8gMSAtIHVuLXNlbGVjdHMgYSBub2RlXHJcbi8vIDIgLSB1cGRhdGVzIHRoZSBVSVxyXG4vLyAzIC0gY2FsbHMgY2FsbGJhY2tzXHJcbiAgICAgICAgZG9Xb3JrT2ZEZXNlbGVjdEFsbE5vZGVzKG5vZGVUb0tlZXBTZWxlY3RlZD86IGFueSkge1xyXG4gICAgICAgICAgICAvLyBub3QgZG9pbmcgbXVsdGktc2VsZWN0LCBzbyBkZXNlbGVjdCBldmVyeXRoaW5nIG90aGVyIHRoYW4gdGhlICdqdXN0IHNlbGVjdGVkJyByb3dcclxuICAgICAgICAgICAgdmFyIGF0TGVhc3RPbmVTZWxlY3Rpb25DaGFuZ2U6IGFueTtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZUtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnNlbGVjdGVkTm9kZXNCeUlkKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxlY3RlZE5vZGVLZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBza2lwIHRoZSAnanVzdCBzZWxlY3RlZCcgcm93XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gc2VsZWN0ZWROb2RlS2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlVG9EZXNlbGVjdCA9IHRoaXMuc2VsZWN0ZWROb2Rlc0J5SWRba2V5XTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVG9EZXNlbGVjdCA9PT0gbm9kZVRvS2VlcFNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGVzZWxlY3RSZWFsTm9kZShub2RlVG9EZXNlbGVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZVNlbGVjdGlvbkNoYW5nZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGF0TGVhc3RPbmVTZWxlY3Rpb25DaGFuZ2U7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHJpdmF0ZVxyXG4gICAgICAgIGRlc2VsZWN0UmVhbE5vZGUobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGRlc2VsZWN0IHRoZSBjc3NcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDc3NDbGFzc0Zvck5vZGUobm9kZSk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBub2RlIGlzIGEgaGVhZGVyLCBhbmQgaWYgaXQgaGFzIGEgc2libGluZyBmb290ZXIsIGRlc2VsZWN0IHRoZSBmb290ZXIgYWxzb1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ncm91cCAmJiBub2RlLmV4cGFuZGVkICYmIG5vZGUuc2libGluZykgeyAvLyBhbHNvIGNoZWNrIHRoYXQgaXQncyBleHBhbmRlZCwgYXMgc2libGluZyBjb3VsZCBiZSBhIGdob3N0XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNzc0NsYXNzRm9yTm9kZShub2RlLnNpYmxpbmcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIHJvd1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5zZWxlY3RlZE5vZGVzQnlJZFtub2RlLmlkXTtcclxuICAgICAgICB9XHJcblxyXG4vLyBwcml2YXRlXHJcbiAgICAgICAgcmVtb3ZlQ3NzQ2xhc3NGb3JOb2RlKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgdmlydHVhbFJlbmRlcmVkUm93SW5kZXggPSB0aGlzLnJvd1JlbmRlcmVyLmdldEluZGV4T2ZSZW5kZXJlZE5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgIGlmICh2aXJ0dWFsUmVuZGVyZWRSb3dJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB1dGlscy5xdWVyeVNlbGVjdG9yQWxsX3JlbW92ZUNzc0NsYXNzKHRoaXMuZVJvd3NQYXJlbnQsICdbcm93PVwiJyArIHZpcnR1YWxSZW5kZXJlZFJvd0luZGV4ICsgJ1wiXScsICdhZy1yb3ctc2VsZWN0ZWQnKTtcclxuICAgICAgICAgICAgICAgIC8vIGluZm9ybSB2aXJ0dWFsIHJvdyBsaXN0ZW5lclxyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmd1bGFyR3JpZC5vblZpcnR1YWxSb3dTZWxlY3RlZCh2aXJ0dWFsUmVuZGVyZWRSb3dJbmRleCwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljIChzZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkpXHJcbiAgICAgICAgZGVzZWxlY3RJbmRleChyb3dJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5yb3dNb2RlbC5nZXRWaXJ0dWFsUm93KHJvd0luZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5kZXNlbGVjdE5vZGUobm9kZSk7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljIChhcGkpXHJcbiAgICAgICAgZGVzZWxlY3ROb2RlKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBTZWxlY3RzQ2hpbGRyZW4oKSAmJiBub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gd2FudCB0byBkZXNlbGVjdCBjaGlsZHJlbiwgbm90IHRoaXMgbm9kZSwgc28gcmVjdXJzaXZlbHkgZGVzZWxlY3RcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5RGVzZWxlY3RBbGxDaGlsZHJlbihub2RlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXNlbGVjdFJlYWxOb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc3luY1NlbGVjdGVkUm93c0FuZENhbGxMaXN0ZW5lcigpO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUdyb3VwUGFyZW50c0lmTmVlZGVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljIChzZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkgJiBhcGkpXHJcbiAgICAgICAgc2VsZWN0SW5kZXgoaW5kZXg6IGFueSwgdHJ5TXVsdGk6IGFueSwgc3VwcHJlc3NFdmVudHM6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucm93TW9kZWwuZ2V0VmlydHVhbFJvdyhpbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Tm9kZShub2RlLCB0cnlNdWx0aSwgc3VwcHJlc3NFdmVudHMpO1xyXG4gICAgICAgIH1cclxuXHJcbi8vIHByaXZhdGVcclxuLy8gdXBkYXRlcyB0aGUgc2VsZWN0ZWRSb3dzIHdpdGggdGhlIHNlbGVjdGVkTm9kZXMgYW5kIGNhbGxzIHNlbGVjdGlvbkNoYW5nZWQgbGlzdGVuZXJcclxuICAgICAgICBzeW5jU2VsZWN0ZWRSb3dzQW5kQ2FsbExpc3RlbmVyKHN1cHByZXNzRXZlbnRzPzogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBzZWxlY3RlZCByb3dzXHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RlZFJvd3MgPSB0aGlzLnNlbGVjdGVkUm93cztcclxuICAgICAgICAgICAgdmFyIG9sZENvdW50ID0gc2VsZWN0ZWRSb3dzLmxlbmd0aDtcclxuICAgICAgICAgICAgLy8gY2xlYXIgc2VsZWN0ZWQgcm93c1xyXG4gICAgICAgICAgICBzZWxlY3RlZFJvd3MubGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLnNlbGVjdGVkTm9kZXNCeUlkKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RlZE5vZGVzQnlJZFtrZXlzW2ldXSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTm9kZSA9IHRoaXMuc2VsZWN0ZWROb2Rlc0J5SWRba2V5c1tpXV07XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRSb3dzLnB1c2goc2VsZWN0ZWROb2RlLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB0aGlzIHN0b3BlIHRoZSBldmVudCBmaXJpbmcgdGhlIHZlcnkgZmlyc3QgdGhlIHRpbWUgZ3JpZCBpcyBpbml0aWFsaXNlZC4gd2l0aG91dCB0aGlzLCB0aGUgZG9jdW1lbnRhdGlvblxyXG4gICAgICAgICAgICAvLyBwYWdlIGhhZCBhIHBvcHVwIGluIHRoZSAnc2VsZWN0aW9uJyBwYWdlIGFzIHNvb24gYXMgdGhlIHBhZ2Ugd2FzIGxvYWRlZCEhXHJcbiAgICAgICAgICAgIHZhciBub3RoaW5nQ2hhbmdlZE11c3RCZUluaXRpYWxpc2luZyA9IG9sZENvdW50ID09PSAwICYmIHNlbGVjdGVkUm93cy5sZW5ndGggPT09IDA7XHJcblxyXG4gICAgICAgICAgICBpZiAoIW5vdGhpbmdDaGFuZ2VkTXVzdEJlSW5pdGlhbGlzaW5nICYmICFzdXBwcmVzc0V2ZW50cyAmJiB0eXBlb2YgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0U2VsZWN0aW9uQ2hhbmdlZCgpID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFNlbGVjdGlvbkNoYW5nZWQoKSgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLiRzY29wZSkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC4kc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbi8vIHByaXZhdGVcclxuICAgICAgICByZWN1cnNpdmVseUNoZWNrSWZTZWxlY3RlZChub2RlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGZvdW5kU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIGZvdW5kVW5zZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdDogYW55O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZC5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0aGlzLnJlY3Vyc2l2ZWx5Q2hlY2tJZlNlbGVjdGVkKGNoaWxkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgU0VMRUNURUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFVOU0VMRUNURUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRVbnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgTUlYRUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRVbnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlIGNhbiBpZ25vcmUgdGhlIERPX05PVF9DQVJFLCBhcyBpdCBkb2Vzbid0IGltcGFjdCwgbWVhbnMgdGhlIGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBoYXMgbm8gY2hpbGRyZW4gYW5kIHNob3VsZG4ndCBiZSBjb25zaWRlcmVkIHdoZW4gZGVjaWRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTm9kZVNlbGVjdGVkKGNoaWxkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm91bmRTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZFVuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRTZWxlY3RlZCAmJiBmb3VuZFVuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbWl4ZWQsIHRoZW4gbm8gbmVlZCB0byBnbyBmdXJ0aGVyLCBqdXN0IHJldHVybiB1cCB0aGUgY2hhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1JWEVEO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZ290IHRoaXMgZmFyLCBzbyBubyBjb25mbGljdHMsIGVpdGhlciBhbGwgY2hpbGRyZW4gc2VsZWN0ZWQsIHVuc2VsZWN0ZWQsIG9yIG5laXRoZXJcclxuICAgICAgICAgICAgaWYgKGZvdW5kU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBTRUxFQ1RFRDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3VuZFVuc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVTlNFTEVDVEVEO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERPX05PVF9DQVJFO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljIChzZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkpXHJcbi8vIHJldHVybnM6XHJcbi8vIHRydWU6IGlmIHNlbGVjdGVkXHJcbi8vIGZhbHNlOiBpZiB1bnNlbGVjdGVkXHJcbi8vIHVuZGVmaW5lZDogaWYgaXQncyBhIGdyb3VwIGFuZCAnY2hpbGRyZW4gc2VsZWN0aW9uJyBpcyB1c2VkIGFuZCAnY2hpbGRyZW4nIGFyZSBhIG1peCBvZiBzZWxlY3RlZCBhbmQgdW5zZWxlY3RlZFxyXG4gICAgICAgIGlzTm9kZVNlbGVjdGVkKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cFNlbGVjdHNDaGlsZHJlbigpICYmIG5vZGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIC8vIGRvaW5nIGNoaWxkIHNlbGVjdGlvbiwgd2UgbmVlZCB0byB0cmF2ZXJzZSB0aGUgY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRPZkNoaWxkcmVuID0gdGhpcy5yZWN1cnNpdmVseUNoZWNrSWZTZWxlY3RlZChub2RlKTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocmVzdWx0T2ZDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgU0VMRUNURUQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgVU5TRUxFQ1RFRDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZE5vZGVzQnlJZFtub2RlLmlkXSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGVHcm91cFBhcmVudHNJZk5lZWRlZCgpIHtcclxuICAgICAgICAgICAgLy8gd2Ugb25seSBkbyB0aGlzIGlmIHBhcmVudCBub2RlcyBhcmUgcmVzcG9uc2libGVcclxuICAgICAgICAgICAgLy8gZm9yIHNlbGVjdGluZyB0aGVpciBjaGlsZHJlbi5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0dyb3VwU2VsZWN0c0NoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGZpcnN0Um93ID0gdGhpcy5yb3dSZW5kZXJlci5nZXRGaXJzdFZpcnR1YWxSZW5kZXJlZFJvdygpO1xyXG4gICAgICAgICAgICB2YXIgbGFzdFJvdyA9IHRoaXMucm93UmVuZGVyZXIuZ2V0TGFzdFZpcnR1YWxSZW5kZXJlZFJvdygpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciByb3dJbmRleCA9IGZpcnN0Um93OyByb3dJbmRleCA8PSBsYXN0Um93OyByb3dJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgaWYgbm9kZSBpcyBhIGdyb3VwXHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucm93TW9kZWwuZ2V0VmlydHVhbFJvdyhyb3dJbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHRoaXMuaXNOb2RlU2VsZWN0ZWQobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hbmd1bGFyR3JpZC5vblZpcnR1YWxSb3dTZWxlY3RlZChyb3dJbmRleCwgc2VsZWN0ZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMucXVlcnlTZWxlY3RvckFsbF9hZGRDc3NDbGFzcyh0aGlzLmVSb3dzUGFyZW50LCAnW3Jvdz1cIicgKyByb3dJbmRleCArICdcIl0nLCAnYWctcm93LXNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMucXVlcnlTZWxlY3RvckFsbF9yZW1vdmVDc3NDbGFzcyh0aGlzLmVSb3dzUGFyZW50LCAnW3Jvdz1cIicgKyByb3dJbmRleCArICdcIl0nLCAnYWctcm93LXNlbGVjdGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCJcclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgU2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5IHtcclxuXHJcbiAgICAgICAgYW5ndWxhckdyaWQ6IGFueTtcclxuICAgICAgICBzZWxlY3Rpb25Db250cm9sbGVyOiBhbnk7XHJcblxyXG4gICAgICAgIGluaXQoYW5ndWxhckdyaWQ6IGFueSwgc2VsZWN0aW9uQ29udHJvbGxlcjogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQgPSBhbmd1bGFyR3JpZDtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyID0gc2VsZWN0aW9uQ29udHJvbGxlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUNoZWNrYm94Q29sRGVmKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgd2lkdGg6IDMwLFxyXG4gICAgICAgICAgICAgICAgc3VwcHJlc3NNZW51OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc3VwcHJlc3NTb3J0aW5nOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgaGVhZGVyQ2VsbFJlbmRlcmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZUNoZWNrYm94LnR5cGUgPSAnY2hlY2tib3gnO1xyXG4gICAgICAgICAgICAgICAgICAgIGVDaGVja2JveC5uYW1lID0gJ25hbWUnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlQ2hlY2tib3g7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY2VsbFJlbmRlcmVyOiB0aGlzLmNyZWF0ZUNoZWNrYm94UmVuZGVyZXIoKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlQ2hlY2tib3hSZW5kZXJlcigpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5jcmVhdGVTZWxlY3Rpb25DaGVja2JveChwYXJhbXMubm9kZSwgcGFyYW1zLnJvd0luZGV4KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZVNlbGVjdGlvbkNoZWNrYm94KG5vZGU6IGFueSwgcm93SW5kZXg6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGVDaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0Jyk7XHJcbiAgICAgICAgICAgIGVDaGVja2JveC50eXBlID0gXCJjaGVja2JveFwiO1xyXG4gICAgICAgICAgICBlQ2hlY2tib3gubmFtZSA9IFwibmFtZVwiO1xyXG4gICAgICAgICAgICBlQ2hlY2tib3guY2xhc3NOYW1lID0gJ2FnLXNlbGVjdGlvbi1jaGVja2JveCc7XHJcbiAgICAgICAgICAgIHNldENoZWNrYm94U3RhdGUoZUNoZWNrYm94LCB0aGlzLnNlbGVjdGlvbkNvbnRyb2xsZXIuaXNOb2RlU2VsZWN0ZWQobm9kZSkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBlQ2hlY2tib3gub25jbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBlQ2hlY2tib3gub25jaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSBlQ2hlY2tib3guY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0aW9uQ29udHJvbGxlci5zZWxlY3RJbmRleChyb3dJbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0aW9uQ29udHJvbGxlci5kZXNlbGVjdEluZGV4KHJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQuYWRkVmlydHVhbFJvd0xpc3RlbmVyKHJvd0luZGV4LCB7XHJcbiAgICAgICAgICAgICAgICByb3dTZWxlY3RlZDogZnVuY3Rpb24gKHNlbGVjdGVkOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRDaGVja2JveFN0YXRlKGVDaGVja2JveCwgc2VsZWN0ZWQpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJvd1JlbW92ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZUNoZWNrYm94O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzZXRDaGVja2JveFN0YXRlKGVDaGVja2JveDogYW55LCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gJ2Jvb2xlYW4nKSB7XHJcbiAgICAgICAgICAgIGVDaGVja2JveC5jaGVja2VkID0gc3RhdGU7XHJcbiAgICAgICAgICAgIGVDaGVja2JveC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gaXNOb2RlU2VsZWN0ZWQgcmV0dXJucyBiYWNrIHVuZGVmaW5lZCBpZiBpdCdzIGEgZ3JvdXAgYW5kIHRoZSBjaGlsZHJlblxyXG4gICAgICAgICAgICAvLyBhcmUgYSBtaXggb2Ygc2VsZWN0ZWQgYW5kIHVuc2VsZWN0ZWRcclxuICAgICAgICAgICAgZUNoZWNrYm94LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cclxuXHJcbiIsIlxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciBTVkdfTlMgPSBcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFN2Z0ZhY3Rvcnkge1xyXG5cclxuICAgICAgICBzdGF0aWMgdGhlSW5zdGFuY2U6U3ZnRmFjdG9yeTtcclxuXHJcbiAgICAgICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGhlSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGhlSW5zdGFuY2UgPSBuZXcgU3ZnRmFjdG9yeSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRoZUluc3RhbmNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlRmlsdGVyU3ZnKCkge1xyXG4gICAgICAgICAgICB2YXIgZVN2ZyA9IGNyZWF0ZUljb25TdmcoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlRnVubmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgXCJwb2x5Z29uXCIpO1xyXG4gICAgICAgICAgICBlRnVubmVsLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBcIjAsMCA0LDQgNCwxMCA2LDEwIDYsNCAxMCwwXCIpO1xyXG4gICAgICAgICAgICBlRnVubmVsLnNldEF0dHJpYnV0ZShcImNsYXNzXCIsIFwiYWctaGVhZGVyLWljb25cIik7XHJcbiAgICAgICAgICAgIGVTdmcuYXBwZW5kQ2hpbGQoZUZ1bm5lbCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZVN2ZztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUNvbHVtblNob3dpbmdTdmcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVDaXJjbGUodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVDb2x1bW5IaWRkZW5TdmcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVDaXJjbGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlTWVudVN2ZygpIHtcclxuICAgICAgICAgICAgdmFyIGVTdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcInN2Z1wiKTtcclxuICAgICAgICAgICAgdmFyIHNpemUgPSBcIjEyXCI7XHJcbiAgICAgICAgICAgIGVTdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgc2l6ZSk7XHJcbiAgICAgICAgICAgIGVTdmcuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsIHNpemUpO1xyXG5cclxuICAgICAgICAgICAgW1wiMFwiLCBcIjVcIiwgXCIxMFwiXS5mb3JFYWNoKGZ1bmN0aW9uICh5KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZUxpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcInJlY3RcIik7XHJcbiAgICAgICAgICAgICAgICBlTGluZS5zZXRBdHRyaWJ1dGUoXCJ5XCIsIHkpO1xyXG4gICAgICAgICAgICAgICAgZUxpbmUuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBlTGluZS5zZXRBdHRyaWJ1dGUoXCJoZWlnaHRcIiwgXCIyXCIpO1xyXG4gICAgICAgICAgICAgICAgZUxpbmUuc2V0QXR0cmlidXRlKFwiY2xhc3NcIiwgXCJhZy1oZWFkZXItaWNvblwiKTtcclxuICAgICAgICAgICAgICAgIGVTdmcuYXBwZW5kQ2hpbGQoZUxpbmUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlU3ZnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlQXJyb3dVcFN2ZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvbHlnb25TdmcoXCIwLDEwIDUsMCAxMCwxMFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUFycm93TGVmdFN2ZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvbHlnb25TdmcoXCIxMCwwIDAsNSAxMCwxMFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUFycm93RG93blN2ZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvbHlnb25TdmcoXCIwLDAgNSwxMCAxMCwwXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlQXJyb3dSaWdodFN2ZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVBvbHlnb25TdmcoXCIwLDAgMTAsNSAwLDEwXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3JlYXRlU21hbGxBcnJvd0Rvd25TdmcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVQb2x5Z29uU3ZnKFwiMCwwIDMsNiA2LDBcIiwgNik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVblNvcnQgSWNvbiBTVkdcclxuICAgICAgICBjcmVhdGVBcnJvd1VwRG93blN2ZygpIHtcclxuICAgICAgICAgICAgdmFyIHN2ZyA9IGNyZWF0ZUljb25TdmcoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlQXNjSWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhTVkdfTlMsIFwicG9seWdvblwiKTtcclxuICAgICAgICAgICAgZUFzY0ljb24uc2V0QXR0cmlidXRlKFwicG9pbnRzXCIsICcwLDQgNSwwIDEwLDQnKTtcclxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKGVBc2NJY29uKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlRGVzY0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcInBvbHlnb25cIik7XHJcbiAgICAgICAgICAgIGVEZXNjSWNvbi5zZXRBdHRyaWJ1dGUoXCJwb2ludHNcIiwgJzAsNiA1LDEwIDEwLDYnKTtcclxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKGVEZXNjSWNvbik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gc3ZnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVQb2x5Z29uU3ZnKHBvaW50czogYW55LCB3aWR0aD86IGFueSkge1xyXG4gICAgICAgIHZhciBlU3ZnID0gY3JlYXRlSWNvblN2Zyh3aWR0aCk7XHJcblxyXG4gICAgICAgIHZhciBlRGVzY0ljb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcInBvbHlnb25cIik7XHJcbiAgICAgICAgZURlc2NJY29uLnNldEF0dHJpYnV0ZShcInBvaW50c1wiLCBwb2ludHMpO1xyXG4gICAgICAgIGVTdmcuYXBwZW5kQ2hpbGQoZURlc2NJY29uKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGVTdmc7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdXRpbCBmdW5jdGlvbiBmb3IgdGhlIGFib3ZlXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVJY29uU3ZnKHdpZHRoPzogYW55KSB7XHJcbiAgICAgICAgdmFyIGVTdmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoU1ZHX05TLCBcInN2Z1wiKTtcclxuICAgICAgICBpZiAod2lkdGggPiAwKSB7XHJcbiAgICAgICAgICAgIGVTdmcuc2V0QXR0cmlidXRlKFwid2lkdGhcIiwgd2lkdGgpO1xyXG4gICAgICAgICAgICBlU3ZnLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCB3aWR0aCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZVN2Zy5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCBcIjEwXCIpO1xyXG4gICAgICAgICAgICBlU3ZnLnNldEF0dHJpYnV0ZShcImhlaWdodFwiLCBcIjEwXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZVN2ZztcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjcmVhdGVDaXJjbGUoZmlsbDogYW55KSB7XHJcbiAgICAgICAgdmFyIGVTdmcgPSBjcmVhdGVJY29uU3ZnKCk7XHJcblxyXG4gICAgICAgIHZhciBlQ2lyY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKFNWR19OUywgXCJjaXJjbGVcIik7XHJcbiAgICAgICAgZUNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeFwiLCBcIjVcIik7XHJcbiAgICAgICAgZUNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJjeVwiLCBcIjVcIik7XHJcbiAgICAgICAgZUNpcmNsZS5zZXRBdHRyaWJ1dGUoXCJyXCIsIFwiNVwiKTtcclxuICAgICAgICBlQ2lyY2xlLnNldEF0dHJpYnV0ZShcInN0cm9rZVwiLCBcImJsYWNrXCIpO1xyXG4gICAgICAgIGVDaXJjbGUuc2V0QXR0cmlidXRlKFwic3Ryb2tlLXdpZHRoXCIsIFwiMlwiKTtcclxuICAgICAgICBpZiAoZmlsbCkge1xyXG4gICAgICAgICAgICBlQ2lyY2xlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJibGFja1wiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBlQ2lyY2xlLnNldEF0dHJpYnV0ZShcImZpbGxcIiwgXCJub25lXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlU3ZnLmFwcGVuZENoaWxkKGVDaXJjbGUpO1xyXG5cclxuICAgICAgICByZXR1cm4gZVN2ZztcclxuICAgIH1cclxuXHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3N2Z0ZhY3RvcnkudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29uc3RhbnRzLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIHN2Z0ZhY3RvcnkgPSBTdmdGYWN0b3J5LmdldEluc3RhbmNlKCk7XHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuICAgIHZhciBjb25zdGFudHMgPSBDb25zdGFudHM7XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQ2VsbFJlbmRlcmVyRmFjdG9yeShncmlkT3B0aW9uc1dyYXBwZXI6IGFueSwgc2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5OiBhbnkpIHtcclxuXHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGdyb3VwQ2VsbFJlbmRlcmVyKHBhcmFtczogYW55KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZUdyb3VwQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgdmFyIG5vZGUgPSBwYXJhbXMubm9kZTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjZWxsRXhwYW5kYWJsZSA9IG5vZGUuZ3JvdXAgJiYgIW5vZGUuZm9vdGVyO1xyXG4gICAgICAgICAgICBpZiAoY2VsbEV4cGFuZGFibGUpIHtcclxuICAgICAgICAgICAgICAgIGFkZEV4cGFuZEFuZENvbnRyYWN0KGVHcm91cENlbGwsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjaGVja2JveE5lZWRlZCA9IHBhcmFtcy5jb2xEZWYgJiYgcGFyYW1zLmNvbERlZi5jZWxsUmVuZGVyZXIgJiYgcGFyYW1zLmNvbERlZi5jZWxsUmVuZGVyZXIuY2hlY2tib3ggJiYgIW5vZGUuZm9vdGVyO1xyXG4gICAgICAgICAgICBpZiAoY2hlY2tib3hOZWVkZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlQ2hlY2tib3ggPSBzZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkuY3JlYXRlU2VsZWN0aW9uQ2hlY2tib3gobm9kZSwgcGFyYW1zLnJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgIGVHcm91cENlbGwuYXBwZW5kQ2hpbGQoZUNoZWNrYm94KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBhcmFtcy5jb2xEZWYgJiYgcGFyYW1zLmNvbERlZi5jZWxsUmVuZGVyZXIgJiYgcGFyYW1zLmNvbERlZi5jZWxsUmVuZGVyZXIuaW5uZXJSZW5kZXJlcikge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJvbUlubmVyUmVuZGVyZXIoZUdyb3VwQ2VsbCwgcGFyYW1zLCBwYXJhbXMuY29sRGVmLmNlbGxSZW5kZXJlci5pbm5lclJlbmRlcmVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmZvb3Rlcikge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlRm9vdGVyQ2VsbChlR3JvdXBDZWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG5vZGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGNyZWF0ZUdyb3VwQ2VsbChlR3JvdXBDZWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY3JlYXRlTGVhZkNlbGwoZUdyb3VwQ2VsbCwgcGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gb25seSBkbyB0aGlzIGlmIGFuIGluZGVudCAtIGFzIHRoaXMgb3ZlcndyaXRlcyB0aGUgcGFkZGluZyB0aGF0XHJcbiAgICAgICAgICAgIC8vIHRoZSB0aGVtZSBzZXQsIHdoaWNoIHdpbGwgbWFrZSB0aGluZ3MgbG9vayAnbm90IGFsaWduZWQnIGZvciB0aGVcclxuICAgICAgICAgICAgLy8gZmlyc3QgZ3JvdXAgbGV2ZWwuXHJcbiAgICAgICAgICAgIGlmIChub2RlLmZvb3RlciB8fCBub2RlLmxldmVsID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhZGRpbmdGYWN0b3I6IGFueTtcclxuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMuY29sRGVmICYmIHBhcmFtcy5jb2xEZWYuY2VsbFJlbmRlcmVyICYmIHBhcmFtcy5jb2xEZWYuY2VsbFJlbmRlcmVyLnBhZGRpbmcgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZGRpbmdGYWN0b3IgPSBwYXJhbXMuY29sRGVmLmNlbGxSZW5kZXJlci5wYWRkaW5nO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nRmFjdG9yID0gMTA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFkZGluZ1B4ID0gbm9kZS5sZXZlbCAqIHBhZGRpbmdGYWN0b3I7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5mb290ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nUHggKz0gMTA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZ1B4ICs9IDU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlR3JvdXBDZWxsLnN0eWxlLnBhZGRpbmdMZWZ0ID0gcGFkZGluZ1B4ICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVHcm91cENlbGw7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkRXhwYW5kQW5kQ29udHJhY3QoZUdyb3VwQ2VsbDogYW55LCBwYXJhbXM6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGVFeHBhbmRJY29uID0gY3JlYXRlR3JvdXBFeHBhbmRJY29uKHRydWUpO1xyXG4gICAgICAgICAgICB2YXIgZUNvbnRyYWN0SWNvbiA9IGNyZWF0ZUdyb3VwRXhwYW5kSWNvbihmYWxzZSk7XHJcbiAgICAgICAgICAgIGVHcm91cENlbGwuYXBwZW5kQ2hpbGQoZUV4cGFuZEljb24pO1xyXG4gICAgICAgICAgICBlR3JvdXBDZWxsLmFwcGVuZENoaWxkKGVDb250cmFjdEljb24pO1xyXG5cclxuICAgICAgICAgICAgZUV4cGFuZEljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBleHBhbmRPckNvbnRyYWN0KTtcclxuICAgICAgICAgICAgZUNvbnRyYWN0SWNvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV4cGFuZE9yQ29udHJhY3QpO1xyXG4gICAgICAgICAgICBlR3JvdXBDZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgZXhwYW5kT3JDb250cmFjdCk7XHJcblxyXG4gICAgICAgICAgICBzaG93QW5kSGlkZUV4cGFuZEFuZENvbnRyYWN0KGVFeHBhbmRJY29uLCBlQ29udHJhY3RJY29uLCBwYXJhbXMubm9kZS5leHBhbmRlZCk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBwYXJlbnQgY2VsbCB3YXMgcGFzc2VkLCB0aGVuIHdlIGNhbiBsaXN0ZW4gZm9yIHdoZW4gZm9jdXMgaXMgb24gdGhlIGNlbGwsXHJcbiAgICAgICAgICAgIC8vIGFuZCB0aGVuIGV4cGFuZCAvIGNvbnRyYWN0IGFzIHRoZSB1c2VyIGhpdHMgZW50ZXIgb3Igc3BhY2UtYmFyXHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMuZUdyaWRDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMuZUdyaWRDZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbihldmVudDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHV0aWxzLmlzS2V5UHJlc3NlZChldmVudCwgY29uc3RhbnRzLktFWV9FTlRFUikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwYW5kT3JDb250cmFjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBleHBhbmRPckNvbnRyYWN0KCkge1xyXG4gICAgICAgICAgICAgICAgZXhwYW5kR3JvdXAoZUV4cGFuZEljb24sIGVDb250cmFjdEljb24sIHBhcmFtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNob3dBbmRIaWRlRXhwYW5kQW5kQ29udHJhY3QoZUV4cGFuZEljb246IGFueSwgZUNvbnRyYWN0SWNvbjogYW55LCBleHBhbmRlZDogYW55KSB7XHJcbiAgICAgICAgICAgIHV0aWxzLnNldFZpc2libGUoZUV4cGFuZEljb24sICFleHBhbmRlZCk7XHJcbiAgICAgICAgICAgIHV0aWxzLnNldFZpc2libGUoZUNvbnRyYWN0SWNvbiwgZXhwYW5kZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRnJvbUlubmVyUmVuZGVyZXIoZUdyb3VwQ2VsbDogYW55LCBwYXJhbXM6IGFueSwgcmVuZGVyZXI6IGFueSkge1xyXG4gICAgICAgICAgICB1dGlscy51c2VSZW5kZXJlcihlR3JvdXBDZWxsLCByZW5kZXJlciwgcGFyYW1zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4cGFuZEdyb3VwKGVFeHBhbmRJY29uOiBhbnksIGVDb250cmFjdEljb246IGFueSwgcGFyYW1zOiBhbnkpIHtcclxuICAgICAgICAgICAgcGFyYW1zLm5vZGUuZXhwYW5kZWQgPSAhcGFyYW1zLm5vZGUuZXhwYW5kZWQ7XHJcbiAgICAgICAgICAgIHBhcmFtcy5hcGkub25Hcm91cEV4cGFuZGVkT3JDb2xsYXBzZWQocGFyYW1zLnJvd0luZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIHNob3dBbmRIaWRlRXhwYW5kQW5kQ29udHJhY3QoZUV4cGFuZEljb24sIGVDb250cmFjdEljb24sIHBhcmFtcy5ub2RlLmV4cGFuZGVkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUdyb3VwRXhwYW5kSWNvbihleHBhbmRlZDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBlSWNvbjogYW55O1xyXG4gICAgICAgICAgICBpZiAoZXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgICAgIGVJY29uID0gdXRpbHMuY3JlYXRlSWNvbignZ3JvdXBDb250cmFjdGVkJywgZ3JpZE9wdGlvbnNXcmFwcGVyLCBudWxsLCBzdmdGYWN0b3J5LmNyZWF0ZUFycm93UmlnaHRTdmcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZUljb24gPSB1dGlscy5jcmVhdGVJY29uKCdncm91cEV4cGFuZGVkJywgZ3JpZE9wdGlvbnNXcmFwcGVyLCBudWxsLCBzdmdGYWN0b3J5LmNyZWF0ZUFycm93RG93blN2Zyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdXRpbHMuYWRkQ3NzQ2xhc3MoZUljb24sICdhZy1ncm91cC1leHBhbmQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVJY29uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3JlYXRlcyBjZWxsIHdpdGggJ1RvdGFsIHt7a2V5fX0nIGZvciBhIGdyb3VwXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlRm9vdGVyQ2VsbChlR3JvdXBDZWxsOiBhbnksIHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXh0VG9EaXNwbGF5ID0gXCJUb3RhbCBcIiArIGdldEdyb3VwTmFtZShwYXJhbXMpO1xyXG4gICAgICAgICAgICB2YXIgZVRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0VG9EaXNwbGF5KTtcclxuICAgICAgICAgICAgZUdyb3VwQ2VsbC5hcHBlbmRDaGlsZChlVGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZXRHcm91cE5hbWUocGFyYW1zOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNlbGxSZW5kZXJlciA9IHBhcmFtcy5jb2xEZWYuY2VsbFJlbmRlcmVyO1xyXG4gICAgICAgICAgICBpZiAoY2VsbFJlbmRlcmVyICYmIGNlbGxSZW5kZXJlci5rZXlNYXBcclxuICAgICAgICAgICAgICAgICYmIHR5cGVvZiBjZWxsUmVuZGVyZXIua2V5TWFwID09PSAnb2JqZWN0JyAmJiBwYXJhbXMuY29sRGVmLmNlbGxSZW5kZXJlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlRnJvbU1hcCA9IGNlbGxSZW5kZXJlci5rZXlNYXBbcGFyYW1zLm5vZGUua2V5XTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZUZyb21NYXApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVGcm9tTWFwO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyYW1zLm5vZGUua2V5O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtcy5ub2RlLmtleTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3JlYXRlcyBjZWxsIHdpdGggJ3t7a2V5fX0gKHt7Y2hpbGRDb3VudH19KScgZm9yIGEgZ3JvdXBcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVHcm91cENlbGwoZUdyb3VwQ2VsbDogYW55LCBwYXJhbXM6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgZ3JvdXBOYW1lID0gZ2V0R3JvdXBOYW1lKHBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgY29sRGVmT2ZHcm91cGVkQ29sID0gcGFyYW1zLmFwaS5nZXRDb2x1bW5EZWYocGFyYW1zLm5vZGUuZmllbGQpO1xyXG4gICAgICAgICAgICBpZiAoY29sRGVmT2ZHcm91cGVkQ29sICYmIHR5cGVvZiBjb2xEZWZPZkdyb3VwZWRDb2wuY2VsbFJlbmRlcmVyID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMudmFsdWUgPSBncm91cE5hbWU7XHJcbiAgICAgICAgICAgICAgICB1dGlscy51c2VSZW5kZXJlcihlR3JvdXBDZWxsLCBjb2xEZWZPZkdyb3VwZWRDb2wuY2VsbFJlbmRlcmVyLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZUdyb3VwQ2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShncm91cE5hbWUpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gb25seSBpbmNsdWRlIHRoZSBjaGlsZCBjb3VudCBpZiBpdCdzIGluY2x1ZGVkLCBlZyBpZiB1c2VyIGRvaW5nIGN1c3RvbSBhZ2dyZWdhdGlvbixcclxuICAgICAgICAgICAgLy8gdGhlbiB0aGlzIGNvdWxkIGJlIGxlZnQgb3V0LCBvciBzZXQgdG8gLTEsIGllIG5vIGNoaWxkIGNvdW50XHJcbiAgICAgICAgICAgIHZhciBzdXBwcmVzc0NvdW50ID0gcGFyYW1zLmNvbERlZi5jZWxsUmVuZGVyZXIgJiYgcGFyYW1zLmNvbERlZi5jZWxsUmVuZGVyZXIuc3VwcHJlc3NDb3VudDtcclxuICAgICAgICAgICAgaWYgKCFzdXBwcmVzc0NvdW50ICYmIHBhcmFtcy5ub2RlLmFsbENoaWxkcmVuQ291bnQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgZUdyb3VwQ2VsbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIiAoXCIgKyBwYXJhbXMubm9kZS5hbGxDaGlsZHJlbkNvdW50ICsgXCIpXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY3JlYXRlcyBjZWxsIHdpdGggJ3t7a2V5fX0gKHt7Y2hpbGRDb3VudH19KScgZm9yIGEgZ3JvdXBcclxuICAgICAgICBmdW5jdGlvbiBjcmVhdGVMZWFmQ2VsbChlUGFyZW50OiBhbnksIHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChwYXJhbXMudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlVGV4dCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcgJyArIHBhcmFtcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICBlUGFyZW50LmFwcGVuZENoaWxkKGVUZXh0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwidXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiY29uc3RhbnRzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImNlbGxSZW5kZXJlcnMvZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5LnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIF8gPSBVdGlscztcclxuXHJcbiAgICBpbnRlcmZhY2UgUmVuZGVyZWRSb3cge1xyXG4gICAgICAgIGVDZWxsczogYW55O1xyXG4gICAgICAgIGVWb2xhdGlsZUNlbGxzOiBhbnk7XHJcbiAgICAgICAgc2NvcGU6IGFueTtcclxuICAgICAgICBub2RlOiBhbnk7XHJcbiAgICAgICAgcGlubmVkRWxlbWVudDogYW55O1xyXG4gICAgICAgIGJvZHlFbGVtZW50OiBhbnk7XHJcbiAgICAgICAgZGF0YTogYW55O1xyXG4gICAgICAgIHJvd0luZGV4OiBudW1iZXI7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFJvd1JlbmRlcmVyIHtcclxuXHJcbiAgICAgICAgZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb25zO1xyXG4gICAgICAgIGNvbHVtbk1vZGVsOiBhbnk7XHJcbiAgICAgICAgZ3JpZE9wdGlvbnNXcmFwcGVyOiBHcmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgYW5ndWxhckdyaWQ6IEdyaWQ7XHJcbiAgICAgICAgc2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5OiBTZWxlY3Rpb25SZW5kZXJlckZhY3Rvcnk7XHJcbiAgICAgICAgZ3JpZFBhbmVsOiBHcmlkUGFuZWw7XHJcbiAgICAgICAgJGNvbXBpbGU6IGFueTtcclxuICAgICAgICAkc2NvcGU6IGFueTtcclxuICAgICAgICBzZWxlY3Rpb25Db250cm9sbGVyOiBTZWxlY3Rpb25Db250cm9sbGVyO1xyXG4gICAgICAgIGV4cHJlc3Npb25TZXJ2aWNlOiBFeHByZXNzaW9uU2VydmljZTtcclxuICAgICAgICB0ZW1wbGF0ZVNlcnZpY2U6IFRlbXBsYXRlU2VydmljZTtcclxuICAgICAgICBjZWxsUmVuZGVyZXJNYXA6IHtba2V5OiBzdHJpbmddOiBhbnl9O1xyXG4gICAgICAgIHByaXZhdGUgcmVuZGVyZWRSb3dzOiB7W2tleTogc3RyaW5nXTogUmVuZGVyZWRSb3d9O1xyXG4gICAgICAgIHJlbmRlcmVkUm93U3RhcnRFZGl0aW5nTGlzdGVuZXJzOiB7W2tleTogc3RyaW5nXToge1trZXk6IHN0cmluZ106IGFueX19O1xyXG4gICAgICAgIGVkaXRpbmdDZWxsOiBhbnk7XHJcbiAgICAgICAgcm93TW9kZWw6IGFueTtcclxuICAgICAgICBlQm9keUNvbnRhaW5lcjogYW55O1xyXG4gICAgICAgIGVCb2R5Vmlld3BvcnQ6IGFueTtcclxuICAgICAgICBlUGlubmVkQ29sc0NvbnRhaW5lcjogYW55O1xyXG4gICAgICAgIGVQYXJlbnRPZlJvd3M6IGFueTtcclxuICAgICAgICBmaXJzdFZpcnR1YWxSZW5kZXJlZFJvdzogYW55O1xyXG4gICAgICAgIGxhc3RWaXJ0dWFsUmVuZGVyZWRSb3c6IGFueTtcclxuICAgICAgICBmb2N1c2VkQ2VsbDogYW55O1xyXG5cclxuICAgICAgICBpbml0KGdyaWRPcHRpb25zOiBHcmlkT3B0aW9ucywgY29sdW1uTW9kZWw6IGFueSwgZ3JpZE9wdGlvbnNXcmFwcGVyOiBHcmlkT3B0aW9uc1dyYXBwZXIsIGdyaWRQYW5lbDogR3JpZFBhbmVsLFxyXG4gICAgICAgICAgICAgYW5ndWxhckdyaWQ6IEdyaWQsIHNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeTogU2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5LCAkY29tcGlsZTogYW55LCAkc2NvcGU6IGFueSxcclxuICAgICAgICAgICAgIHNlbGVjdGlvbkNvbnRyb2xsZXI6IFNlbGVjdGlvbkNvbnRyb2xsZXIsIGV4cHJlc3Npb25TZXJ2aWNlOiBFeHByZXNzaW9uU2VydmljZSwgdGVtcGxhdGVTZXJ2aWNlOiBUZW1wbGF0ZVNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9ucyA9IGdyaWRPcHRpb25zO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsID0gY29sdW1uTW9kZWw7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyID0gZ3JpZE9wdGlvbnNXcmFwcGVyO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ3VsYXJHcmlkID0gYW5ndWxhckdyaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5ID0gc2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5O1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbCA9IGdyaWRQYW5lbDtcclxuICAgICAgICAgICAgdGhpcy4kY29tcGlsZSA9ICRjb21waWxlO1xyXG4gICAgICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyID0gc2VsZWN0aW9uQ29udHJvbGxlcjtcclxuICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uU2VydmljZSA9IGV4cHJlc3Npb25TZXJ2aWNlO1xyXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlU2VydmljZSA9IHRlbXBsYXRlU2VydmljZTtcclxuICAgICAgICAgICAgdGhpcy5maW5kQWxsRWxlbWVudHMoZ3JpZFBhbmVsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2VsbFJlbmRlcmVyTWFwID0ge1xyXG4gICAgICAgICAgICAgICAgJ2dyb3VwJzogZ3JvdXBDZWxsUmVuZGVyZXJGYWN0b3J5KGdyaWRPcHRpb25zV3JhcHBlciwgc2VsZWN0aW9uUmVuZGVyZXJGYWN0b3J5KSxcclxuXHQgICAgICAgICdleHBhbmQnOiBncmlkT3B0aW9ucy5leHBhbmRSb3dcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIG1hcCBvZiByb3cgaWRzIHRvIHJvdyBvYmplY3RzLiBrZWVwcyB0cmFjayBvZiB3aGljaCBlbGVtZW50c1xyXG4gICAgICAgICAgICAvLyBhcmUgcmVuZGVyZWQgZm9yIHdoaWNoIHJvd3MgaW4gdGhlIGRvbS4gZWFjaCByb3cgb2JqZWN0IGhhczpcclxuICAgICAgICAgICAgLy8gW3Njb3BlLCBib2R5Um93LCBwaW5uZWRSb3csIHJvd0RhdGFdXHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRSb3dzID0ge307XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkUm93U3RhcnRFZGl0aW5nTGlzdGVuZXJzID0ge307XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVkaXRpbmdDZWxsID0gZmFsc2U7IC8vZ2V0cyBzZXQgdG8gdHJ1ZSB3aGVuIGVkaXRpbmcgYSBjZWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRSb3dNb2RlbChyb3dNb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm93TW9kZWwgPSByb3dNb2RlbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldE1haW5Sb3dXaWR0aHMoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYWluUm93V2lkdGggPSB0aGlzLmNvbHVtbk1vZGVsLmdldEJvZHlDb250YWluZXJXaWR0aCgpICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgdmFyIHVucGlubmVkUm93czogW2FueV0gPSB0aGlzLmVCb2R5Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuYWctcm93XCIpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVucGlubmVkUm93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdW5waW5uZWRSb3dzW2ldLnN0eWxlLndpZHRoID0gbWFpblJvd1dpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaW5kQWxsRWxlbWVudHMoZ3JpZFBhbmVsOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5lQm9keUNvbnRhaW5lciA9IGdyaWRQYW5lbC5nZXRCb2R5Q29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZUJvZHlWaWV3cG9ydCA9IGdyaWRQYW5lbC5nZXRCb2R5Vmlld3BvcnQoKTtcclxuICAgICAgICAgICAgdGhpcy5lUGlubmVkQ29sc0NvbnRhaW5lciA9IGdyaWRQYW5lbC5nZXRQaW5uZWRDb2xzQ29udGFpbmVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZVBhcmVudE9mUm93cyA9IGdyaWRQYW5lbC5nZXRSb3dzUGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoVmlldyhyZWZyZXNoRnJvbUluZGV4PzogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNEb250VXNlU2Nyb2xscygpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm93Q291bnQgPSB0aGlzLnJvd01vZGVsLmdldFZpcnR1YWxSb3dDb3VudCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lckhlaWdodCA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFJvd0hlaWdodCgpICogcm93Q291bnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVCb2R5Q29udGFpbmVyLnN0eWxlLmhlaWdodCA9IGNvbnRhaW5lckhlaWdodCArIFwicHhcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZVBpbm5lZENvbHNDb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gY29udGFpbmVySGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hBbGxWaXJ0dWFsUm93cyhyZWZyZXNoRnJvbUluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNvZnRSZWZyZXNoVmlldygpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBmaXJzdCA9IHRoaXMuZmlyc3RWaXJ0dWFsUmVuZGVyZWRSb3c7XHJcbiAgICAgICAgICAgIHZhciBsYXN0ID0gdGhpcy5sYXN0VmlydHVhbFJlbmRlcmVkUm93O1xyXG5cclxuICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLmNvbHVtbk1vZGVsLmdldERpc3BsYXllZENvbHVtbnMoKTtcclxuICAgICAgICAgICAgLy8gaWYgbm8gY29scywgZG9uJ3QgZHJhdyByb3dcclxuICAgICAgICAgICAgaWYgKCFjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvd0luZGV4ID0gZmlyc3Q7IHJvd0luZGV4IDw9IGxhc3Q7IHJvd0luZGV4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5yb3dNb2RlbC5nZXRWaXJ0dWFsUm93KHJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBjb2x1bW5zLmxlbmd0aDsgY29sSW5kZXgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gY29sdW1uc1tjb2xJbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJlZFJvdyA9IHRoaXMucmVuZGVyZWRSb3dzW3Jvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVHcmlkQ2VsbCA9IHJlbmRlcmVkUm93LmVWb2xhdGlsZUNlbGxzW2NvbHVtbi5jb2xJZF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVHcmlkQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc0ZpcnN0Q29sdW1uID0gY29sSW5kZXggPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY29wZSA9IHJlbmRlcmVkUm93LnNjb3BlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zb2Z0UmVmcmVzaENlbGwoZUdyaWRDZWxsLCBpc0ZpcnN0Q29sdW1uLCBub2RlLCBjb2x1bW4sIHNjb3BlLCByb3dJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzb2Z0UmVmcmVzaENlbGwoZUdyaWRDZWxsOiBhbnksIGlzRmlyc3RDb2x1bW46IGFueSwgbm9kZTogYW55LCBjb2x1bW46IGFueSwgc2NvcGU6IGFueSwgcm93SW5kZXg6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgXy5yZW1vdmVBbGxDaGlsZHJlbihlR3JpZENlbGwpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldERhdGFGb3JOb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVHZXR0ZXIgPSB0aGlzLmNyZWF0ZVZhbHVlR2V0dGVyKGRhdGEsIGNvbHVtbi5jb2xEZWYsIG5vZGUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHZhbHVlOiBhbnk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZUdldHRlcikge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZUdldHRlcigpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlQW5kU3R5bGVHcmlkQ2VsbCh2YWx1ZUdldHRlciwgdmFsdWUsIGVHcmlkQ2VsbCwgaXNGaXJzdENvbHVtbiwgbm9kZSwgY29sdW1uLCByb3dJbmRleCwgc2NvcGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgYW5ndWxhciBjb21waWxpbmcsIHRoZW4gbmVlZCB0byBhbHNvIGNvbXBpbGUgdGhlIGNlbGwgYWdhaW4gKGFuZ3VsYXIgY29tcGlsaW5nIHN1Y2tzLCBwbGVhc2Ugd2FpdC4uLilcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzQW5ndWxhckNvbXBpbGVSb3dzKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGNvbXBpbGUoZUdyaWRDZWxsKShzY29wZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJvd0RhdGFDaGFuZ2VkKHJvd3M6IGFueSkge1xyXG4gICAgICAgICAgICAvLyB3ZSBvbmx5IG5lZWQgdG8gYmUgd29ycmllZCBhYm91dCByZW5kZXJlZCByb3dzLCBhcyB0aGlzIG1ldGhvZCBpc1xyXG4gICAgICAgICAgICAvLyBjYWxsZWQgdG8gd2hhdHMgcmVuZGVyZWQuIGlmIHRoZSByb3cgaXNuJ3QgcmVuZGVyZWQsIHdlIGRvbid0IGNhcmVcclxuICAgICAgICAgICAgdmFyIGluZGV4ZXNUb1JlbW92ZTogYW55ID0gW107XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJlZFJvd3MgPSB0aGlzLnJlbmRlcmVkUm93cztcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMocmVuZGVyZWRSb3dzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXk6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlbmRlcmVkUm93ID0gcmVuZGVyZWRSb3dzW2tleV07XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgaWYgdGhlIHJlbmRlcmVkIHJvdyBpcyBpbiB0aGUgbGlzdCBvZiByb3dzIHdlIGhhdmUgdG8gdXBkYXRlXHJcbiAgICAgICAgICAgICAgICB2YXIgcm93TmVlZHNVcGRhdGluZyA9IHJvd3MuaW5kZXhPZihyZW5kZXJlZFJvdy5ub2RlLmRhdGEpID49IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93TmVlZHNVcGRhdGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZXNUb1JlbW92ZS5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIHJvd3NcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVWaXJ0dWFsUm93cyhpbmRleGVzVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAvLyBhZGQgZHJhdyB0aGVtIGFnYWluXHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1ZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoQWxsVmlydHVhbFJvd3MoZnJvbUluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGFsbCBjdXJyZW50IHZpcnR1YWwgcm93cywgYXMgdGhleSBoYXZlIG9sZCBkYXRhXHJcbiAgICAgICAgICAgIHZhciByb3dzVG9SZW1vdmUgPSBPYmplY3Qua2V5cyh0aGlzLnJlbmRlcmVkUm93cyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVmlydHVhbFJvd3Mocm93c1RvUmVtb3ZlLCBmcm9tSW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGluIG5ldyByb3dzXHJcbiAgICAgICAgICAgIHRoaXMuZHJhd1ZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljIC0gcmVtb3ZlcyB0aGUgZ3JvdXAgcm93cyBhbmQgdGhlbiByZWRyYXdzIHRoZW0gYWdhaW5cclxuICAgICAgICByZWZyZXNoR3JvdXBSb3dzKCkge1xyXG4gICAgICAgICAgICAvLyBmaW5kIGFsbCB0aGUgZ3JvdXAgcm93c1xyXG4gICAgICAgICAgICB2YXIgcm93c1RvUmVtb3ZlOiBhbnkgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnJlbmRlcmVkUm93cykuZm9yRWFjaChmdW5jdGlvbiAoa2V5OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZW5kZXJlZFJvdyA9IHRoYXQucmVuZGVyZWRSb3dzW2tleV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHJlbmRlcmVkUm93Lm5vZGU7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd3NUb1JlbW92ZS5wdXNoKGtleSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIHJvd3NcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVWaXJ0dWFsUm93cyhyb3dzVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAvLyBhbmQgZHJhdyB0aGVtIGJhY2sgYWdhaW5cclxuICAgICAgICAgICAgdGhpcy5lbnN1cmVSb3dzUmVuZGVyZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4vLyB0YWtlcyBhcnJheSBvZiByb3cgaW5kZXhlc1xyXG4gICAgICAgIHJlbW92ZVZpcnR1YWxSb3dzKHJvd3NUb1JlbW92ZTogYW55LCBmcm9tSW5kZXg/OiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAvLyBpZiBubyBmcm9tSW5kZXggdGhlbiBzZXQgdG8gLTEsIHdoaWNoIHdpbGwgcmVmcmVzaCBldmVyeXRoaW5nXHJcbiAgICAgICAgICAgIHZhciByZWFsRnJvbUluZGV4ID0gKHR5cGVvZiBmcm9tSW5kZXggPT09ICdudW1iZXInKSA/IGZyb21JbmRleCA6IC0xO1xyXG4gICAgICAgICAgICByb3dzVG9SZW1vdmUuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXhUb1JlbW92ZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXhUb1JlbW92ZSA+PSByZWFsRnJvbUluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yZW1vdmVWaXJ0dWFsUm93KGluZGV4VG9SZW1vdmUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgcm93IHdhcyBsYXN0IHRvIGhhdmUgZm9jdXMsIHdlIHJlbW92ZSB0aGUgZmFjdCB0aGF0IGl0IGhhcyBmb2N1c1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LmZvY3VzZWRDZWxsICYmIHRoYXQuZm9jdXNlZENlbGwucm93SW5kZXggPT0gaW5kZXhUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmZvY3VzZWRDZWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVtb3ZlVmlydHVhbFJvdyhpbmRleFRvUmVtb3ZlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlcmVkUm93ID0gdGhpcy5yZW5kZXJlZFJvd3NbaW5kZXhUb1JlbW92ZV07XHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJlZFJvdy5waW5uZWRFbGVtZW50ICYmIHRoaXMuZVBpbm5lZENvbHNDb250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZVBpbm5lZENvbHNDb250YWluZXIucmVtb3ZlQ2hpbGQocmVuZGVyZWRSb3cucGlubmVkRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJlZFJvdy5ib2R5RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lQm9keUNvbnRhaW5lci5yZW1vdmVDaGlsZChyZW5kZXJlZFJvdy5ib2R5RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyZW5kZXJlZFJvdy5zY29wZSkge1xyXG4gICAgICAgICAgICAgICAgcmVuZGVyZWRSb3cuc2NvcGUuJGRlc3Ryb3koKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFZpcnR1YWxSb3dSZW1vdmVkKCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFZpcnR1YWxSb3dSZW1vdmVkKCkocmVuZGVyZWRSb3cuZGF0YSwgaW5kZXhUb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5hbmd1bGFyR3JpZC5vblZpcnR1YWxSb3dSZW1vdmVkKGluZGV4VG9SZW1vdmUpO1xyXG5cclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVuZGVyZWRSb3dzW2luZGV4VG9SZW1vdmVdO1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy5yZW5kZXJlZFJvd1N0YXJ0RWRpdGluZ0xpc3RlbmVyc1tpbmRleFRvUmVtb3ZlXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyYXdWaXJ0dWFsUm93cygpIHtcclxuICAgICAgICAgICAgdmFyIGZpcnN0OiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0OiBhbnk7XHJcblxyXG4gICAgICAgICAgICB2YXIgcm93Q291bnQgPSB0aGlzLnJvd01vZGVsLmdldFZpcnR1YWxSb3dDb3VudCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzRG9udFVzZVNjcm9sbHMoKSkge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGFzdCA9IHJvd0NvdW50O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRvcFBpeGVsID0gdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIHZhciBib3R0b21QaXhlbCA9IHRvcFBpeGVsICsgdGhpcy5lQm9keVZpZXdwb3J0Lm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICBmaXJzdCA9IE1hdGguZmxvb3IodG9wUGl4ZWwgLyB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dIZWlnaHQoKSk7XHJcbiAgICAgICAgICAgICAgICBsYXN0ID0gTWF0aC5mbG9vcihib3R0b21QaXhlbCAvIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFJvd0hlaWdodCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2FkZCBpbiBidWZmZXJcclxuICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dCdWZmZXIoKSB8fCBDb25zdGFudHMuUk9XX0JVRkZFUl9TSVpFO1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmaXJzdCAtIGJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgIGxhc3QgPSBsYXN0ICsgYnVmZmVyO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGFkanVzdCwgaW4gY2FzZSBidWZmZXIgZXh0ZW5kZWQgYWN0dWFsIHNpemVcclxuICAgICAgICAgICAgICAgIGlmIChmaXJzdCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdCA9IDA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdCA+IHJvd0NvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3QgPSByb3dDb3VudCAtIDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmlyc3RWaXJ0dWFsUmVuZGVyZWRSb3cgPSBmaXJzdDtcclxuICAgICAgICAgICAgdGhpcy5sYXN0VmlydHVhbFJlbmRlcmVkUm93ID0gbGFzdDtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZW5zdXJlUm93c1JlbmRlcmVkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRGaXJzdFZpcnR1YWxSZW5kZXJlZFJvdygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyc3RWaXJ0dWFsUmVuZGVyZWRSb3c7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRMYXN0VmlydHVhbFJlbmRlcmVkUm93KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sYXN0VmlydHVhbFJlbmRlcmVkUm93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5zdXJlUm93c1JlbmRlcmVkKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIG1haW5Sb3dXaWR0aCA9IHRoaXMuY29sdW1uTW9kZWwuZ2V0Qm9keUNvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIC8vIGF0IHRoZSBlbmQsIHRoaXMgYXJyYXkgd2lsbCBjb250YWluIHRoZSBpdGVtcyB3ZSBuZWVkIHRvIHJlbW92ZVxyXG4gICAgICAgICAgICB2YXIgcm93c1RvUmVtb3ZlID0gT2JqZWN0LmtleXModGhpcy5yZW5kZXJlZFJvd3MpO1xyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGluIG5ldyByb3dzXHJcbiAgICAgICAgICAgIGZvciAodmFyIHJvd0luZGV4ID0gdGhpcy5maXJzdFZpcnR1YWxSZW5kZXJlZFJvdzsgcm93SW5kZXggPD0gdGhpcy5sYXN0VmlydHVhbFJlbmRlcmVkUm93OyByb3dJbmRleCsrKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgaWYgaXRlbSBhbHJlYWR5IHRoZXJlLCBhbmQgaWYgeWVzLCB0YWtlIGl0IG91dCBvZiB0aGUgJ3RvIHJlbW92ZScgYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmIChyb3dzVG9SZW1vdmUuaW5kZXhPZihyb3dJbmRleC50b1N0cmluZygpKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93c1RvUmVtb3ZlLnNwbGljZShyb3dzVG9SZW1vdmUuaW5kZXhPZihyb3dJbmRleC50b1N0cmluZygpKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjaGVjayB0aGlzIHJvdyBhY3R1YWxseSBleGlzdHMgKGluIGNhc2Ugb3ZlcmZsb3cgYnVmZmVyIHdpbmRvdyBleGNlZWRzIHJlYWwgZGF0YSlcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5yb3dNb2RlbC5nZXRWaXJ0dWFsUm93KHJvd0luZGV4KTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pbnNlcnRSb3cobm9kZSwgcm93SW5kZXgsIG1haW5Sb3dXaWR0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGF0IHRoaXMgcG9pbnQsIGV2ZXJ5dGhpbmcgaW4gb3VyICdyb3dzVG9SZW1vdmUnIC4gLiAuXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlVmlydHVhbFJvd3Mocm93c1RvUmVtb3ZlKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBkb2luZyBhbmd1bGFyIGNvbXBpbGluZywgdGhlbiBkbyBkaWdlc3QgdGhlIHNjb3BlIGhlcmVcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzQW5ndWxhckNvbXBpbGVSb3dzKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdlIGRvIGl0IGluIGEgdGltZW91dCwgaW4gY2FzZSB3ZSBhcmUgYWxyZWFkeSBpbiBhbiBhcHBseVxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC4kc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zZXJ0Um93KG5vZGU6IGFueSwgcm93SW5kZXg6IGFueSwgbWFpblJvd1dpZHRoOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbnMgPSB0aGlzLmNvbHVtbk1vZGVsLmdldERpc3BsYXllZENvbHVtbnMoKTtcclxuICAgICAgICAgICAgLy8gaWYgbm8gY29scywgZG9uJ3QgZHJhdyByb3dcclxuICAgICAgICAgICAgaWYgKCFjb2x1bW5zIHx8IGNvbHVtbnMubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdmFyIHJvd0RhdGEgPSBub2RlLnJvd0RhdGE7XHJcbiAgICAgICAgICAgIHZhciByb3dJc0FHcm91cCA9IG5vZGUuZ3JvdXA7XHJcblxyXG4gICAgICAgICAgICAvLyB0cnkgY29tcGlsaW5nIGFzIHdlIGluc2VydCByb3dzXHJcbiAgICAgICAgICAgIHZhciBuZXdDaGlsZFNjb3BlID0gdGhpcy5jcmVhdGVDaGlsZFNjb3BlT3JOdWxsKG5vZGUuZGF0YSwgbm9kZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVBpbm5lZFJvdyA9IHRoaXMuY3JlYXRlUm93Q29udGFpbmVyKHJvd0luZGV4LCBub2RlLCByb3dJc0FHcm91cCwgbmV3Q2hpbGRTY29wZSk7XHJcbiAgICAgICAgICAgIHZhciBlTWFpblJvdyA9IHRoaXMuY3JlYXRlUm93Q29udGFpbmVyKHJvd0luZGV4LCBub2RlLCByb3dJc0FHcm91cCwgbmV3Q2hpbGRTY29wZSk7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGVNYWluUm93LnN0eWxlLndpZHRoID0gbWFpblJvd1dpZHRoICsgXCJweFwiO1xyXG5cclxuICAgICAgICAgICAgdmFyIHJlbmRlcmVkUm93OiBSZW5kZXJlZFJvdyA9IHtcclxuICAgICAgICAgICAgICAgIHNjb3BlOiBuZXdDaGlsZFNjb3BlLFxyXG4gICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgIGVDZWxsczoge30sXHJcbiAgICAgICAgICAgICAgICBlVm9sYXRpbGVDZWxsczoge30sXHJcbiAgICAgICAgICAgICAgICBwaW5uZWRFbGVtZW50OiA8YW55PiBudWxsLFxyXG4gICAgICAgICAgICAgICAgYm9keUVsZW1lbnQ6IDxhbnk+IG51bGwsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBudWxsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVkUm93c1tyb3dJbmRleF0gPSByZW5kZXJlZFJvdztcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlZFJvd1N0YXJ0RWRpdGluZ0xpc3RlbmVyc1tyb3dJbmRleF0gPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGdyb3VwIGl0ZW0sIGluc2VydCB0aGUgZmlyc3Qgcm93XHJcbiAgICAgICAgICAgIHZhciBncm91cEhlYWRlclRha2VzRW50aXJlUm93ID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cFVzZUVudGlyZVJvdygpO1xyXG4gICAgICAgICAgICB2YXIgZHJhd0dyb3VwUm93ID0gcm93SXNBR3JvdXAgJiYgZ3JvdXBIZWFkZXJUYWtlc0VudGlyZVJvdztcclxuXHJcbiAgICAgICAgICAgIGlmIChkcmF3R3JvdXBSb3cpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaXJzdENvbHVtbiA9IGNvbHVtbnNbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVHcm91cFJvdyA9IHRoYXQuY3JlYXRlR3JvdXBFbGVtZW50KG5vZGUsIHJvd0luZGV4LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlyc3RDb2x1bW4ucGlubmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZVBpbm5lZFJvdy5hcHBlbmRDaGlsZChlR3JvdXBSb3cpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZUdyb3VwUm93UGFkZGluZyA9IHRoYXQuY3JlYXRlR3JvdXBFbGVtZW50KG5vZGUsIHJvd0luZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBlTWFpblJvdy5hcHBlbmRDaGlsZChlR3JvdXBSb3dQYWRkaW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZU1haW5Sb3cuYXBwZW5kQ2hpbGQoZUdyb3VwUm93KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNEb0ludGVybmFsRXhwYW5kaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZS5wYXJlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUucGFyZW50LmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBpOiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRBcGkoKVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVHcm91cFJvdyA9IHRoYXQuY2VsbFJlbmRlcmVyTWFwWydleHBhbmQnXShwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVNYWluUm93LnN0eWxlLmhlaWdodCA9ICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dIZWlnaHQoKSAqIG5vZGUucGFyZW50LnJvd3MpICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICBlTWFpblJvdy5hcHBlbmRDaGlsZChlR3JvdXBSb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24oY29sdW1uOiBhbnksIGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Q29sID0gaW5kZXggPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gdGhhdC5nZXREYXRhRm9yTm9kZShub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlR2V0dGVyID0gdGhhdC5jcmVhdGVWYWx1ZUdldHRlcihkYXRhLCBjb2x1bW4uY29sRGVmLCBub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jcmVhdGVDZWxsRnJvbUNvbERlZihmaXJzdENvbCwgY29sdW1uLCB2YWx1ZUdldHRlciwgbm9kZSwgcm93SW5kZXgsIGVNYWluUm93LCBlUGlubmVkUm93LCBuZXdDaGlsZFNjb3BlLCByZW5kZXJlZFJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFub2RlLmZpcnN0KSB7XHJcbiAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbjogYW55LCBpbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpcnN0Q29sID0gaW5kZXggPT09IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGF0LmdldERhdGFGb3JOb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUdldHRlciA9IHRoYXQuY3JlYXRlVmFsdWVHZXR0ZXIoZGF0YSwgY29sdW1uLmNvbERlZiwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jcmVhdGVDZWxsRnJvbUNvbERlZihmaXJzdENvbCwgY29sdW1uLCB2YWx1ZUdldHRlciwgbm9kZSwgcm93SW5kZXgsIGVNYWluUm93LCBlUGlubmVkUm93LCBuZXdDaGlsZFNjb3BlLCByZW5kZXJlZFJvdyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy90cnkgY29tcGlsaW5nIGFzIHdlIGluc2VydCByb3dzXHJcbiAgICAgICAgICAgIHJlbmRlcmVkUm93LnBpbm5lZEVsZW1lbnQgPSB0aGlzLmNvbXBpbGVBbmRBZGQodGhpcy5lUGlubmVkQ29sc0NvbnRhaW5lciwgZVBpbm5lZFJvdywgbmV3Q2hpbGRTY29wZSk7XHJcbiAgICAgICAgICAgIHJlbmRlcmVkUm93LmJvZHlFbGVtZW50ID0gdGhpcy5jb21waWxlQW5kQWRkKHRoaXMuZUJvZHlDb250YWluZXIsIGVNYWluUm93LCBuZXdDaGlsZFNjb3BlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmIGdyb3VwIGlzIGEgZm9vdGVyLCBhbHdheXMgc2hvdyB0aGUgZGF0YS5cclxuICAgICAgICAvLyBpZiBncm91cCBpcyBhIGhlYWRlciwgb25seSBzaG93IGRhdGEgaWYgbm90IGV4cGFuZGVkXHJcbiAgICAgICAgZ2V0RGF0YUZvck5vZGUobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlLmZvb3Rlcikge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgZm9vdGVyLCB3ZSBhbHdheXMgc2hvdyB0aGUgZGF0YVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGF0YTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBoZWFkZXIgYW5kIGhlYWRlciBpcyBleHBhbmRlZCwgd2Ugc2hvdyBkYXRhIGluIGZvb3RlciBvbmx5XHJcbiAgICAgICAgICAgICAgICB2YXIgZm9vdGVyc0VuYWJsZWQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0dyb3VwSW5jbHVkZUZvb3RlcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChub2RlLmV4cGFuZGVkICYmIGZvb3RlcnNFbmFibGVkKSA/IHVuZGVmaW5lZCA6IG5vZGUuZGF0YTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpdCdzIGEgbm9ybWFsIG5vZGUsIGp1c3QgcmV0dXJuIGRhdGEgYXMgbm9ybWFsXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVWYWx1ZUdldHRlcihkYXRhOiBhbnksIGNvbERlZjogYW55LCBub2RlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwaSA9IHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGF0LmdyaWRPcHRpb25zV3JhcHBlci5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXy5nZXRWYWx1ZSh0aGF0LmV4cHJlc3Npb25TZXJ2aWNlLCBkYXRhLCBjb2xEZWYsIG5vZGUsIGFwaSwgY29udGV4dCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVDaGlsZFNjb3BlT3JOdWxsKGRhdGE6IGFueSwgbm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0FuZ3VsYXJDb21waWxlUm93cygpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGRTY29wZSA9IHRoaXMuJHNjb3BlLiRuZXcoKTtcclxuICAgICAgICAgICAgICAgIG5ld0NoaWxkU2NvcGUuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICBuZXdDaGlsZFNjb3BlLm5vZGUgPSBub2RlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld0NoaWxkU2NvcGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29tcGlsZUFuZEFkZChjb250YWluZXI6IGFueSwgZWxlbWVudDogYW55LCBzY29wZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmIChzY29wZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVFbGVtZW50Q29tcGlsZWQgPSB0aGlzLiRjb21waWxlKGVsZW1lbnQpKHNjb3BlKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb250YWluZXIpIHsgLy8gY2hlY2tpbmcgY29udGFpbmVyLCBhcyBpZiBub1Njcm9sbCwgcGlubmVkIGNvbnRhaW5lciBpcyBtaXNzaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVFbGVtZW50Q29tcGlsZWRbMF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVFbGVtZW50Q29tcGlsZWRbMF07XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUNlbGxGcm9tQ29sRGVmKGlzRmlyc3RDb2x1bW46IGFueSwgY29sdW1uOiBhbnksIHZhbHVlR2V0dGVyOiBhbnksIG5vZGU6IGFueSwgcm93SW5kZXg6IGFueSwgZU1haW5Sb3c6XHJcbiAgICAgICAgICAgIGFueSwgZVBpbm5lZFJvdzogYW55LCAkY2hpbGRTY29wZTogYW55LCByZW5kZXJlZFJvdzogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBlR3JpZENlbGwgPSB0aGlzLmNyZWF0ZUNlbGwoaXNGaXJzdENvbHVtbiwgY29sdW1uLCB2YWx1ZUdldHRlciwgbm9kZSwgcm93SW5kZXgsICRjaGlsZFNjb3BlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2x1bW4uY29sRGVmLnZvbGF0aWxlKSB7XHJcbiAgICAgICAgICAgICAgICByZW5kZXJlZFJvdy5lVm9sYXRpbGVDZWxsc1tjb2x1bW4uY29sSWRdID0gZUdyaWRDZWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlbmRlcmVkUm93LmVDZWxsc1tjb2x1bW4uY29sSWRdID0gZUdyaWRDZWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbHVtbi5waW5uZWQpIHtcclxuICAgICAgICAgICAgICAgIGVQaW5uZWRSb3cuYXBwZW5kQ2hpbGQoZUdyaWRDZWxsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGVNYWluUm93LmFwcGVuZENoaWxkKGVHcmlkQ2VsbCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZENsYXNzZXNUb1Jvdyhyb3dJbmRleDogYW55LCBub2RlOiBhbnksIGVSb3c6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3Nlc0xpc3QgPSBbXCJhZy1yb3dcIl07XHJcbiAgICAgICAgICAgIGNsYXNzZXNMaXN0LnB1c2gocm93SW5kZXggJSAyID09IDAgPyBcImFnLXJvdy1ldmVuXCIgOiBcImFnLXJvdy1vZGRcIik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25Db250cm9sbGVyLmlzTm9kZVNlbGVjdGVkKG5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzTGlzdC5wdXNoKFwiYWctcm93LXNlbGVjdGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBhIGdyb3VwLCBwdXQgdGhlIGxldmVsIG9mIHRoZSBncm91cCBpblxyXG4gICAgICAgICAgICAgICAgY2xhc3Nlc0xpc3QucHVzaChcImFnLXJvdy1sZXZlbC1cIiArIG5vZGUubGV2ZWwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgYSBsZWFmLCBhbmQgYSBwYXJlbnQgZXhpc3RzLCBwdXQgYSBsZXZlbCBvZiB0aGUgcGFyZW50LCBlbHNlIHB1dCBsZXZlbCBvZiAwIGZvciB0b3AgbGV2ZWwgaXRlbVxyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlc0xpc3QucHVzaChcImFnLXJvdy1sZXZlbC1cIiArIChub2RlLnBhcmVudC5sZXZlbCArIDEpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlc0xpc3QucHVzaChcImFnLXJvdy1sZXZlbC0wXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzTGlzdC5wdXNoKFwiYWctcm93LWdyb3VwXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwICYmICFub2RlLmZvb3RlciAmJiBub2RlLmV4cGFuZGVkKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzTGlzdC5wdXNoKFwiYWctcm93LWdyb3VwLWV4cGFuZGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwICYmICFub2RlLmZvb3RlciAmJiAhbm9kZS5leHBhbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgLy8gb3Bwb3NpdGUgb2YgZXhwYW5kZWQgaXMgY29udHJhY3RlZCBhY2NvcmRpbmcgdG8gdGhlIGludGVybmV0LlxyXG4gICAgICAgICAgICAgICAgY2xhc3Nlc0xpc3QucHVzaChcImFnLXJvdy1ncm91cC1jb250cmFjdGVkXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwICYmIG5vZGUuZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc2VzTGlzdC5wdXNoKFwiYWctcm93LWZvb3RlclwiKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGluIGV4dHJhIGNsYXNzZXMgcHJvdmlkZWQgYnkgdGhlIGNvbmZpZ1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Um93Q2xhc3MoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdyaWRPcHRpb25zUm93Q2xhc3MgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dDbGFzcygpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBjbGFzc1RvVXNlOiBhbnk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGdyaWRPcHRpb25zUm93Q2xhc3MgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBub2RlLmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29udGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1RvVXNlID0gZ3JpZE9wdGlvbnNSb3dDbGFzcyhwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1RvVXNlID0gZ3JpZE9wdGlvbnNSb3dDbGFzcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NUb1VzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY2xhc3NUb1VzZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlc0xpc3QucHVzaChjbGFzc1RvVXNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY2xhc3NUb1VzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NUb1VzZS5mb3JFYWNoKGZ1bmN0aW9uIChjbGFzc0l0ZW06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3Nlc0xpc3QucHVzaChjbGFzc0l0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjbGFzc2VzID0gY2xhc3Nlc0xpc3Quam9pbihcIiBcIik7XHJcblxyXG4gICAgICAgICAgICBlUm93LmNsYXNzTmFtZSA9IGNsYXNzZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVSb3dDb250YWluZXIocm93SW5kZXg6IGFueSwgbm9kZTogYW55LCBncm91cFJvdzogYW55LCAkc2NvcGU6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgZVJvdyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFkZENsYXNzZXNUb1Jvdyhyb3dJbmRleCwgbm9kZSwgZVJvdyk7XHJcblxyXG4gICAgICAgICAgICBlUm93LnNldEF0dHJpYnV0ZSgncm93Jywgcm93SW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgc2hvd2luZyBzY3JvbGxzLCBwb3NpdGlvbiBvbiB0aGUgY29udGFpbmVyXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNEb250VXNlU2Nyb2xscygpKSB7XHJcbiAgICAgICAgICAgICAgICBlUm93LnN0eWxlLnRvcCA9ICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dIZWlnaHQoKSAqIHJvd0luZGV4KSArIFwicHhcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlUm93LnN0eWxlLmhlaWdodCA9ICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dIZWlnaHQoKSkgKyBcInB4XCI7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Um93U3R5bGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNzc1RvVXNlOiBhbnk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcm93U3R5bGUgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRSb3dTdHlsZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByb3dTdHlsZSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXBpOiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRBcGkoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29udGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGU6ICRzY29wZVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgY3NzVG9Vc2UgPSByb3dTdHlsZShwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjc3NUb1VzZSA9IHJvd1N0eWxlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjc3NUb1VzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNzc1RvVXNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXk6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlUm93LnN0eWxlW2tleV0gPSBjc3NUb1VzZVtrZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBlUm93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIF90aGlzLmFuZ3VsYXJHcmlkLm9uUm93Q2xpY2tlZChldmVudCwgTnVtYmVyKHRoaXMuZ2V0QXR0cmlidXRlKFwicm93XCIpKSwgbm9kZSlcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZVJvdztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEluZGV4T2ZSZW5kZXJlZE5vZGUobm9kZTogYW55KTogbnVtYmVyIHtcclxuICAgICAgICAgICAgdmFyIHJlbmRlcmVkUm93cyA9IHRoaXMucmVuZGVyZWRSb3dzO1xyXG4gICAgICAgICAgICB2YXIga2V5czogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhyZW5kZXJlZFJvd3MpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXk6IHN0cmluZyA9IGtleXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocmVuZGVyZWRSb3dzW2tleV0ubm9kZSA9PT0gbm9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJlZFJvd3Nba2V5XS5yb3dJbmRleDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVHcm91cEVsZW1lbnQobm9kZTogYW55LCByb3dJbmRleDogYW55LCBwYWRkaW5nOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGVSb3c6IGFueTtcclxuICAgICAgICAgICAgLy8gcGFkZGluZyBtZWFucyB3ZSBhcmUgb24gdGhlIHJpZ2h0IGhhbmQgc2lkZSBvZiBhIHBpbm5lZCB0YWJsZSwgaWVcclxuICAgICAgICAgICAgLy8gaW4gdGhlIG1haW4gYm9keS5cclxuICAgICAgICAgICAgaWYgKHBhZGRpbmcpIHtcclxuICAgICAgICAgICAgICAgIGVSb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogbm9kZS5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbERlZjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjZWxsUmVuZGVyZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyOiAnZ3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXJSZW5kZXJlcjogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0R3JvdXBSb3dJbm5lclJlbmRlcmVyKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBlUm93ID0gdGhpcy5jZWxsUmVuZGVyZXJNYXBbJ2dyb3VwJ10ocGFyYW1zKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5vZGUuZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICBfLmFkZENzc0NsYXNzKGVSb3csICdhZy1mb290ZXItY2VsbC1lbnRpcmUtcm93Jyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBfLmFkZENzc0NsYXNzKGVSb3csICdhZy1ncm91cC1jZWxsLWVudGlyZS1yb3cnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVSb3c7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdXREYXRhSW50b0NlbGwoY29sdW1uOiBhbnksIHZhbHVlOiBhbnksIHZhbHVlR2V0dGVyOiBhbnksIG5vZGU6IGFueSwgJGNoaWxkU2NvcGU6IGFueSwgZVNwYW5XaXRoVmFsdWU6IGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZUdyaWRDZWxsOiBhbnksIHJvd0luZGV4OiBhbnksIHJlZnJlc2hDZWxsRnVuY3Rpb246IGFueSkge1xyXG4gICAgICAgICAgICAvLyB0ZW1wbGF0ZSBnZXRzIHByZWZlcmVuY2UsIHRoZW4gY2VsbFJlbmRlcmVyLCB0aGVuIGRvIGl0IG91cnNlbHZlc1xyXG4gICAgICAgICAgICB2YXIgY29sRGVmID0gY29sdW1uLmNvbERlZjtcclxuICAgICAgICAgICAgaWYgKGNvbERlZi50ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgZVNwYW5XaXRoVmFsdWUuaW5uZXJIVE1MID0gY29sRGVmLnRlbXBsYXRlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbERlZi50ZW1wbGF0ZVVybCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gdGhpcy50ZW1wbGF0ZVNlcnZpY2UuZ2V0VGVtcGxhdGUoY29sRGVmLnRlbXBsYXRlVXJsLCByZWZyZXNoQ2VsbEZ1bmN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVTcGFuV2l0aFZhbHVlLmlubmVySFRNTCA9IHRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNvbERlZi5jZWxsUmVuZGVyZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXNlQ2VsbFJlbmRlcmVyKGNvbHVtbiwgdmFsdWUsIG5vZGUsICRjaGlsZFNjb3BlLCBlU3BhbldpdGhWYWx1ZSwgcm93SW5kZXgsIHJlZnJlc2hDZWxsRnVuY3Rpb24sIHZhbHVlR2V0dGVyLCBlR3JpZENlbGwpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgaW5zZXJ0IHVuZGVmaW5lZCwgdGhlbiBpdCBkaXNwbGF5cyBhcyB0aGUgc3RyaW5nICd1bmRlZmluZWQnLCB1Z2x5IVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZVNwYW5XaXRoVmFsdWUuaW5uZXJIVE1MID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVzZUNlbGxSZW5kZXJlcihjb2x1bW46IGFueSwgdmFsdWU6IGFueSwgbm9kZTogYW55LCAkY2hpbGRTY29wZTogYW55LCBlU3BhbldpdGhWYWx1ZTogYW55LCByb3dJbmRleDogYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoQ2VsbEZ1bmN0aW9uOiBhbnksIHZhbHVlR2V0dGVyOiBhbnksIGVHcmlkQ2VsbDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2xEZWYgPSBjb2x1bW4uY29sRGVmO1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyZXJQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZUdldHRlcjogdmFsdWVHZXR0ZXIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBub2RlLmRhdGEsXHJcbiAgICAgICAgICAgICAgICBub2RlOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgY29sRGVmOiBjb2xEZWYsXHJcbiAgICAgICAgICAgICAgICBjb2x1bW46IGNvbHVtbixcclxuICAgICAgICAgICAgICAgICRzY29wZTogJGNoaWxkU2NvcGUsXHJcbiAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpLFxyXG4gICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29udGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgcmVmcmVzaENlbGw6IHJlZnJlc2hDZWxsRnVuY3Rpb24sXHJcbiAgICAgICAgICAgICAgICBlR3JpZENlbGw6IGVHcmlkQ2VsbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgY2VsbFJlbmRlcmVyOiBhbnk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sRGVmLmNlbGxSZW5kZXJlciA9PT0gJ29iamVjdCcgJiYgY29sRGVmLmNlbGxSZW5kZXJlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY2VsbFJlbmRlcmVyID0gdGhpcy5jZWxsUmVuZGVyZXJNYXBbY29sRGVmLmNlbGxSZW5kZXJlci5yZW5kZXJlcl07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNlbGxSZW5kZXJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdDZWxsIHJlbmRlcmVyICcgKyBjb2xEZWYuY2VsbFJlbmRlcmVyICsgJyBub3QgZm91bmQsIGF2YWlsYWJsZSBhcmUgJyArIE9iamVjdC5rZXlzKHRoaXMuY2VsbFJlbmRlcmVyTWFwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29sRGVmLmNlbGxSZW5kZXJlciA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgY2VsbFJlbmRlcmVyID0gY29sRGVmLmNlbGxSZW5kZXJlcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93ICdDZWxsIFJlbmRlcmVyIG11c3QgYmUgU3RyaW5nIG9yIEZ1bmN0aW9uJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmVzdWx0RnJvbVJlbmRlcmVyID0gY2VsbFJlbmRlcmVyKHJlbmRlcmVyUGFyYW1zKTtcclxuICAgICAgICAgICAgaWYgKF8uaXNOb2RlT3JFbGVtZW50KHJlc3VsdEZyb21SZW5kZXJlcikpIHtcclxuICAgICAgICAgICAgICAgIC8vIGEgZG9tIG5vZGUgb3IgZWxlbWVudCB3YXMgcmV0dXJuZWQsIHNvIGFkZCBjaGlsZFxyXG4gICAgICAgICAgICAgICAgZVNwYW5XaXRoVmFsdWUuYXBwZW5kQ2hpbGQocmVzdWx0RnJvbVJlbmRlcmVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIG90aGVyd2lzZSBhc3N1bWUgaXQgd2FzIGh0bWwsIHNvIGp1c3QgaW5zZXJ0XHJcbiAgICAgICAgICAgICAgICBlU3BhbldpdGhWYWx1ZS5pbm5lckhUTUwgPSByZXN1bHRGcm9tUmVuZGVyZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFN0eWxlc0Zyb21Db2xsRGVmKGNvbHVtbjogYW55LCB2YWx1ZTogYW55LCBub2RlOiBhbnksICRjaGlsZFNjb3BlOiBhbnksIGVHcmlkQ2VsbDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2xEZWYgPSBjb2x1bW4uY29sRGVmO1xyXG4gICAgICAgICAgICBpZiAoY29sRGVmLmNlbGxTdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNzc1RvVXNlOiBhbnk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbERlZi5jZWxsU3R5bGUgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbFN0eWxlUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sRGVmOiBjb2xEZWYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGU6ICRjaGlsZFNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRDb250ZXh0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaTogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0QXBpKClcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1RvVXNlID0gY29sRGVmLmNlbGxTdHlsZShjZWxsU3R5bGVQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjc3NUb1VzZSA9IGNvbERlZi5jZWxsU3R5bGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNzc1RvVXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hZGRTdHlsZXNUb0VsZW1lbnQoZUdyaWRDZWxsLCBjc3NUb1VzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZENsYXNzZXNGcm9tQ29sbERlZihjb2xEZWY6IGFueSwgdmFsdWU6IGFueSwgbm9kZTogYW55LCAkY2hpbGRTY29wZTogYW55LCBlR3JpZENlbGw6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoY29sRGVmLmNlbGxDbGFzcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzVG9Vc2U6IGFueTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29sRGVmLmNlbGxDbGFzcyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjZWxsQ2xhc3NQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogbm9kZS5kYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlOiBub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbERlZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlOiAkY2hpbGRTY29wZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29udGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1RvVXNlID0gY29sRGVmLmNlbGxDbGFzcyhjZWxsQ2xhc3NQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1RvVXNlID0gY29sRGVmLmNlbGxDbGFzcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNsYXNzVG9Vc2UgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgXy5hZGRDc3NDbGFzcyhlR3JpZENlbGwsIGNsYXNzVG9Vc2UpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KGNsYXNzVG9Vc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NUb1VzZS5mb3JFYWNoKGZ1bmN0aW9uIChjc3NDbGFzc0l0ZW06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFkZENzc0NsYXNzKGVHcmlkQ2VsbCwgY3NzQ2xhc3NJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkQ2xhc3Nlc1RvQ2VsbChjb2x1bW46IGFueSwgbm9kZTogYW55LCBlR3JpZENlbGw6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFsnYWctY2VsbCcsICdhZy1jZWxsLW5vLWZvY3VzJywgJ2NlbGwtY29sLScgKyBjb2x1bW4uaW5kZXhdO1xyXG4gICAgICAgICAgICBpZiAobm9kZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZm9vdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3Nlcy5wdXNoKCdhZy1mb290ZXItY2VsbCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc2VzLnB1c2goJ2FnLWdyb3VwLWNlbGwnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlR3JpZENlbGwuY2xhc3NOYW1lID0gY2xhc3Nlcy5qb2luKCcgJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRDbGFzc2VzRnJvbVJ1bGVzKGNvbERlZjogYW55LCBlR3JpZENlbGw6IGFueSwgdmFsdWU6IGFueSwgbm9kZTogYW55LCByb3dJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjbGFzc1J1bGVzID0gY29sRGVmLmNlbGxDbGFzc1J1bGVzO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGNsYXNzUnVsZXMgPT09ICdvYmplY3QnICYmIGNsYXNzUnVsZXMgIT09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBub2RlLmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbERlZixcclxuICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgYXBpOiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRBcGkoKSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRDb250ZXh0KClcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGNsYXNzTmFtZXMgPSBPYmplY3Qua2V5cyhjbGFzc1J1bGVzKTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xhc3NOYW1lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSBjbGFzc05hbWVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBydWxlID0gY2xhc3NSdWxlc1tjbGFzc05hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHRPZlJ1bGU6IGFueTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdE9mUnVsZSA9IHRoaXMuZXhwcmVzc2lvblNlcnZpY2UuZXZhbHVhdGUocnVsZSwgcGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBydWxlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdE9mUnVsZSA9IHJ1bGUocGFyYW1zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdE9mUnVsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLmFkZENzc0NsYXNzKGVHcmlkQ2VsbCwgY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnJlbW92ZUNzc0NsYXNzKGVHcmlkQ2VsbCwgY2xhc3NOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUNlbGwoaXNGaXJzdENvbHVtbjogYW55LCBjb2x1bW46IGFueSwgdmFsdWVHZXR0ZXI6IGFueSwgbm9kZTogYW55LCByb3dJbmRleDogYW55LCAkY2hpbGRTY29wZTogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGVHcmlkQ2VsbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgIGVHcmlkQ2VsbC5zZXRBdHRyaWJ1dGUoXCJjb2xcIiwgY29sdW1uLmluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIC8vIG9ubHkgc2V0IHRhYiBpbmRleCBpZiBjZWxsIHNlbGVjdGlvbiBpcyBlbmFibGVkXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNTdXBwcmVzc0NlbGxTZWxlY3Rpb24oKSkge1xyXG4gICAgICAgICAgICAgICAgZUdyaWRDZWxsLnNldEF0dHJpYnV0ZShcInRhYmluZGV4XCIsIFwiLTFcIik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZTogYW55O1xyXG4gICAgICAgICAgICBpZiAodmFsdWVHZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVHZXR0ZXIoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdGhlc2UgYXJlIHRoZSBncmlkIHN0eWxlcywgZG9uJ3QgY2hhbmdlIGJldHdlZW4gc29mdCByZWZyZXNoZXNcclxuICAgICAgICAgICAgdGhpcy5hZGRDbGFzc2VzVG9DZWxsKGNvbHVtbiwgbm9kZSwgZUdyaWRDZWxsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucG9wdWxhdGVBbmRTdHlsZUdyaWRDZWxsKHZhbHVlR2V0dGVyLCB2YWx1ZSwgZUdyaWRDZWxsLCBpc0ZpcnN0Q29sdW1uLCBub2RlLCBjb2x1bW4sIHJvd0luZGV4LCAkY2hpbGRTY29wZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFkZENlbGxDbGlja2VkSGFuZGxlcihlR3JpZENlbGwsIG5vZGUsIGNvbHVtbiwgdmFsdWUsIHJvd0luZGV4KTtcclxuICAgICAgICAgICAgdGhpcy5hZGRDZWxsRG91YmxlQ2xpY2tlZEhhbmRsZXIoZUdyaWRDZWxsLCBub2RlLCBjb2x1bW4sIHZhbHVlLCByb3dJbmRleCwgJGNoaWxkU2NvcGUsIGlzRmlyc3RDb2x1bW4sIHZhbHVlR2V0dGVyKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ2VsbE5hdmlnYXRpb25IYW5kbGVyKGVHcmlkQ2VsbCwgcm93SW5kZXgsIGNvbHVtbiwgbm9kZSk7XHJcblxyXG4gICAgICAgICAgICBlR3JpZENlbGwuc3R5bGUud2lkdGggPSBfLmZvcm1hdFdpZHRoKGNvbHVtbi5hY3R1YWxXaWR0aCk7XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgdGhlICdzdGFydCBlZGl0aW5nJyBjYWxsIHRvIHRoZSBjaGFpbiBvZiBlZGl0b3JzXHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZWRSb3dTdGFydEVkaXRpbmdMaXN0ZW5lcnNbcm93SW5kZXhdW2NvbHVtbi5jb2xJZF0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhhdC5pc0NlbGxFZGl0YWJsZShjb2x1bW4uY29sRGVmLCBub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3RhcnRFZGl0aW5nKGVHcmlkQ2VsbCwgY29sdW1uLCBub2RlLCAkY2hpbGRTY29wZSwgcm93SW5kZXgsIGlzRmlyc3RDb2x1bW4sIHZhbHVlR2V0dGVyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVHcmlkQ2VsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZENlbGxOYXZpZ2F0aW9uSGFuZGxlcihlR3JpZENlbGw6IGFueSwgcm93SW5kZXg6IGFueSwgY29sdW1uOiBhbnksIG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGVHcmlkQ2VsbC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGF0LmVkaXRpbmdDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gb25seSBpbnRlcmVzdGVkIG9uIGtleSBwcmVzc2VzIHRoYXQgYXJlIGRpcmVjdGx5IG9uIHRoaXMgZWxlbWVudCwgbm90IGFueSBjaGlsZHJlbiBlbGVtZW50cy4gdGhpc1xyXG4gICAgICAgICAgICAgICAgLy8gc3RvcHMgbmF2aWdhdGlvbiBpZiB0aGUgdXNlciBpcyBpbiwgZm9yIGV4YW1wbGUsIGEgdGV4dCBmaWVsZCBpbnNpZGUgdGhlIGNlbGwsIGFuZCB1c2VyIGhpdHNcclxuICAgICAgICAgICAgICAgIC8vIG9uIG9mIHRoZSBrZXlzIHdlIGFyZSBsb29raW5nIGZvci5cclxuICAgICAgICAgICAgICAgIGlmIChldmVudC50YXJnZXQgIT09IGVHcmlkQ2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gZXZlbnQud2hpY2ggfHwgZXZlbnQua2V5Q29kZTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnROYXZpZ2F0aW9uID0ga2V5ID09PSBDb25zdGFudHMuS0VZX0RPV04gfHwga2V5ID09PSBDb25zdGFudHMuS0VZX1VQXHJcbiAgICAgICAgICAgICAgICAgICAgfHwga2V5ID09PSBDb25zdGFudHMuS0VZX0xFRlQgfHwga2V5ID09PSBDb25zdGFudHMuS0VZX1JJR0hUO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0TmF2aWdhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5uYXZpZ2F0ZVRvTmV4dENlbGwoa2V5LCByb3dJbmRleCwgY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRFZGl0ID0ga2V5ID09PSBDb25zdGFudHMuS0VZX0VOVEVSO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0RWRpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGFydEVkaXRpbmdGdW5jID0gdGhhdC5yZW5kZXJlZFJvd1N0YXJ0RWRpdGluZ0xpc3RlbmVyc1tyb3dJbmRleF1bY29sdW1uLmNvbElkXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRFZGl0aW5nRnVuYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWRpdGluZ1N0YXJ0ZWQgPSBzdGFydEVkaXRpbmdGdW5jKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlZGl0aW5nU3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgZG9uJ3QgcHJldmVudCBkZWZhdWx0LCB0aGVuIHRoZSBlZGl0b3IgdGhhdCBnZXQgZGlzcGxheWVkIGFsc28gcGlja3MgdXAgdGhlICdlbnRlciBrZXknXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmVzcywgYW5kIHN0b3BzIGVkaXRpbmcgaW1tZWRpYXRlbHksIGhlbmNlIGdpdmluZyBoZSB1c2VyIGV4cGVyaWVuY2UgdGhhdCBub3RoaW5nIGhhcHBlbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RSb3cgPSBrZXkgPT09IENvbnN0YW50cy5LRVlfU1BBQ0U7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0Um93ICYmIHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93U2VsZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuaXNOb2RlU2VsZWN0ZWQobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0aW9uQ29udHJvbGxlci5kZXNlbGVjdE5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zZWxlY3Rpb25Db250cm9sbGVyLnNlbGVjdE5vZGUobm9kZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbi8vIHdlIHVzZSBpbmRleCBmb3Igcm93cywgYnV0IGNvbHVtbiBvYmplY3QgZm9yIGNvbHVtbnMsIGFzIHRoZSBuZXh0IGNvbHVtbiAoYnkgaW5kZXgpIG1pZ2h0IG5vdFxyXG4vLyBiZSB2aXNpYmxlIChoZWFkZXIgZ3JvdXBpbmcpIHNvIGl0J3Mgbm90IHJlbGlhYmxlLCBzbyB1c2luZyB0aGUgY29sdW1uIG9iamVjdCBpbnN0ZWFkLlxyXG4gICAgICAgIG5hdmlnYXRlVG9OZXh0Q2VsbChrZXk6IGFueSwgcm93SW5kZXg6IGFueSwgY29sdW1uOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjZWxsVG9Gb2N1cyA9IHtyb3dJbmRleDogcm93SW5kZXgsIGNvbHVtbjogY29sdW1ufTtcclxuICAgICAgICAgICAgdmFyIHJlbmRlcmVkUm93OiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBlQ2VsbDogYW55O1xyXG5cclxuICAgICAgICAgICAgLy8gd2Uga2VlcCBzZWFyY2hpbmcgZm9yIGEgbmV4dCBjZWxsIHVudGlsIHdlIGZpbmQgb25lLiB0aGlzIGlzIGhvdyB0aGUgZ3JvdXAgcm93cyBnZXQgc2tpcHBlZFxyXG4gICAgICAgICAgICB3aGlsZSAoIWVDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsVG9Gb2N1cyA9IHRoaXMuZ2V0TmV4dENlbGxUb0ZvY3VzKGtleSwgY2VsbFRvRm9jdXMpO1xyXG4gICAgICAgICAgICAgICAgLy8gbm8gbmV4dCBjZWxsIG1lYW5zIHdlIGhhdmUgcmVhY2hlZCBhIGdyaWQgYm91bmRhcnksIGVnIGxlZnQsIHJpZ2h0LCB0b3Agb3IgYm90dG9tIG9mIGdyaWRcclxuICAgICAgICAgICAgICAgIGlmICghY2VsbFRvRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBzZWUgaWYgdGhlIG5leHQgY2VsbCBpcyBzZWxlY3RhYmxlLCBpZiB5ZXMsIHVzZSBpdCwgaWYgbm90LCBza2lwIGl0XHJcbiAgICAgICAgICAgICAgICByZW5kZXJlZFJvdyA9IHRoaXMucmVuZGVyZWRSb3dzW2NlbGxUb0ZvY3VzLnJvd0luZGV4XTtcclxuICAgICAgICAgICAgICAgIGVDZWxsID0gcmVuZGVyZWRSb3cuZUNlbGxzW2NlbGxUb0ZvY3VzLmNvbHVtbi5jb2xJZF07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMgc2Nyb2xscyB0aGUgcm93IGludG8gdmlld1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5lbnN1cmVJbmRleFZpc2libGUocmVuZGVyZWRSb3cucm93SW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgLy8gdGhpcyBjaGFuZ2VzIHRoZSBjc3Mgb24gdGhlIGNlbGxcclxuICAgICAgICAgICAgdGhpcy5mb2N1c0NlbGwoZUNlbGwsIGNlbGxUb0ZvY3VzLnJvd0luZGV4LCBjZWxsVG9Gb2N1cy5jb2x1bW4uaW5kZXgsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0TmV4dENlbGxUb0ZvY3VzKGtleTogYW55LCBsYXN0Q2VsbFRvRm9jdXM6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgbGFzdFJvd0luZGV4ID0gbGFzdENlbGxUb0ZvY3VzLnJvd0luZGV4O1xyXG4gICAgICAgICAgICB2YXIgbGFzdENvbHVtbiA9IGxhc3RDZWxsVG9Gb2N1cy5jb2x1bW47XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV4dFJvd1RvRm9jdXM6IGFueTtcclxuICAgICAgICAgICAgdmFyIG5leHRDb2x1bW5Ub0ZvY3VzOiBhbnk7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5LRVlfVVAgOlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGFscmVhZHkgb24gdG9wIHJvdywgZG8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Um93SW5kZXggPT09IHRoaXMuZmlyc3RWaXJ0dWFsUmVuZGVyZWRSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRSb3dUb0ZvY3VzID0gbGFzdFJvd0luZGV4IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Q29sdW1uVG9Gb2N1cyA9IGxhc3RDb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5LRVlfRE9XTiA6XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYWxyZWFkeSBvbiBib3R0b20sIGRvIG5vdGhpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdFJvd0luZGV4ID09PSB0aGlzLmxhc3RWaXJ0dWFsUmVuZGVyZWRSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRSb3dUb0ZvY3VzID0gbGFzdFJvd0luZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBuZXh0Q29sdW1uVG9Gb2N1cyA9IGxhc3RDb2x1bW47XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENvbnN0YW50cy5LRVlfUklHSFQgOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xUb1JpZ2h0ID0gdGhpcy5jb2x1bW5Nb2RlbC5nZXRWaXNpYmxlQ29sQWZ0ZXIobGFzdENvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYWxyZWFkeSBvbiByaWdodCwgZG8gbm90aGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29sVG9SaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dFJvd1RvRm9jdXMgPSBsYXN0Um93SW5kZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dENvbHVtblRvRm9jdXMgPSBjb2xUb1JpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBDb25zdGFudHMuS0VZX0xFRlQgOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xUb0xlZnQgPSB0aGlzLmNvbHVtbk1vZGVsLmdldFZpc2libGVDb2xCZWZvcmUobGFzdENvbHVtbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgYWxyZWFkeSBvbiBsZWZ0LCBkbyBub3RoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb2xUb0xlZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRSb3dUb0ZvY3VzID0gbGFzdFJvd0luZGV4O1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRDb2x1bW5Ub0ZvY3VzID0gY29sVG9MZWZ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcm93SW5kZXg6IG5leHRSb3dUb0ZvY3VzLFxyXG4gICAgICAgICAgICAgICAgY29sdW1uOiBuZXh0Q29sdW1uVG9Gb2N1c1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbi8vIGNhbGxlZCBpbnRlcm5hbGx5XHJcbiAgICAgICAgZm9jdXNDZWxsKGVDZWxsOiBhbnksIHJvd0luZGV4OiBhbnksIGNvbEluZGV4OiBhbnksIGZvcmNlQnJvd3NlckZvY3VzOiBhbnkpIHtcclxuICAgICAgICAgICAgLy8gZG8gbm90aGluZyBpZiBjZWxsIHNlbGVjdGlvbiBpcyBvZmZcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzU3VwcHJlc3NDZWxsU2VsZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcmVtb3ZlIGFueSBwcmV2aW91cyBmb2N1c1xyXG4gICAgICAgICAgICBfLnF1ZXJ5U2VsZWN0b3JBbGxfcmVwbGFjZUNzc0NsYXNzKHRoaXMuZVBhcmVudE9mUm93cywgJy5hZy1jZWxsLWZvY3VzJywgJ2FnLWNlbGwtZm9jdXMnLCAnYWctY2VsbC1uby1mb2N1cycpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNlbGVjdG9yRm9yQ2VsbCA9ICdbcm93PVwiJyArIHJvd0luZGV4ICsgJ1wiXSBbY29sPVwiJyArIGNvbEluZGV4ICsgJ1wiXSc7XHJcbiAgICAgICAgICAgIF8ucXVlcnlTZWxlY3RvckFsbF9yZXBsYWNlQ3NzQ2xhc3ModGhpcy5lUGFyZW50T2ZSb3dzLCBzZWxlY3RvckZvckNlbGwsICdhZy1jZWxsLW5vLWZvY3VzJywgJ2FnLWNlbGwtZm9jdXMnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZENlbGwgPSB7cm93SW5kZXg6IHJvd0luZGV4LCBjb2xJbmRleDogY29sSW5kZXgsIG5vZGU6IHRoaXMucm93TW9kZWwuZ2V0VmlydHVhbFJvdyhyb3dJbmRleCl9O1xyXG5cclxuICAgICAgICAgICAgLy8gdGhpcyBwdXRzIHRoZSBicm93c2VyIGZvY3VzIG9uIHRoZSBjZWxsIChzbyBpdCBnZXRzIGtleSBwcmVzc2VzKVxyXG4gICAgICAgICAgICBpZiAoZm9yY2VCcm93c2VyRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgIGVDZWxsLmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q2VsbEZvY3VzZWQoKSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q2VsbEZvY3VzZWQoKSh0aGlzLmZvY3VzZWRDZWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbi8vIGZvciBBUElcclxuICAgICAgICBnZXRGb2N1c2VkQ2VsbCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXNlZENlbGw7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gY2FsbGVkIHZpYSBBUElcclxuICAgICAgICBzZXRGb2N1c2VkQ2VsbChyb3dJbmRleDogYW55LCBjb2xJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciByZW5kZXJlZFJvdyA9IHRoaXMucmVuZGVyZWRSb3dzW3Jvd0luZGV4XTtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuY29sdW1uTW9kZWwuZ2V0RGlzcGxheWVkQ29sdW1ucygpW2NvbEluZGV4XTtcclxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkUm93ICYmIGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVDZWxsID0gcmVuZGVyZWRSb3cuZUNlbGxzW2NvbHVtbi5jb2xJZF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzQ2VsbChlQ2VsbCwgcm93SW5kZXgsIGNvbEluZGV4LCB0cnVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcG9wdWxhdGVBbmRTdHlsZUdyaWRDZWxsKHZhbHVlR2V0dGVyOiBhbnksIHZhbHVlOiBhbnksIGVHcmlkQ2VsbDogYW55LCBpc0ZpcnN0Q29sdW1uOiBhbnksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IGFueSwgY29sdW1uOiBhbnksIHJvd0luZGV4OiBhbnksICRjaGlsZFNjb3BlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNvbERlZiA9IGNvbHVtbi5jb2xEZWY7XHJcblxyXG4gICAgICAgICAgICAvLyBwb3B1bGF0ZVxyXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlR3JpZENlbGwoZUdyaWRDZWxsLCBpc0ZpcnN0Q29sdW1uLCBub2RlLCBjb2x1bW4sIHJvd0luZGV4LCB2YWx1ZSwgdmFsdWVHZXR0ZXIsICRjaGlsZFNjb3BlKTtcclxuICAgICAgICAgICAgLy8gc3R5bGVcclxuICAgICAgICAgICAgdGhpcy5hZGRTdHlsZXNGcm9tQ29sbERlZihjb2x1bW4sIHZhbHVlLCBub2RlLCAkY2hpbGRTY29wZSwgZUdyaWRDZWxsKTtcclxuICAgICAgICAgICAgdGhpcy5hZGRDbGFzc2VzRnJvbUNvbGxEZWYoY29sRGVmLCB2YWx1ZSwgbm9kZSwgJGNoaWxkU2NvcGUsIGVHcmlkQ2VsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ2xhc3Nlc0Zyb21SdWxlcyhjb2xEZWYsIGVHcmlkQ2VsbCwgdmFsdWUsIG5vZGUsIHJvd0luZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBvcHVsYXRlR3JpZENlbGwoZUdyaWRDZWxsOiBhbnksIGlzRmlyc3RDb2x1bW46IGFueSwgbm9kZTogYW55LCBjb2x1bW46IGFueSwgcm93SW5kZXg6IGFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhbnksIHZhbHVlR2V0dGVyOiBhbnksICRjaGlsZFNjb3BlOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGVDZWxsV3JhcHBlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgXy5hZGRDc3NDbGFzcyhlQ2VsbFdyYXBwZXIsIFwiYWctY2VsbC13cmFwcGVyXCIpO1xyXG4gICAgICAgICAgICBlR3JpZENlbGwuYXBwZW5kQ2hpbGQoZUNlbGxXcmFwcGVyKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb2xEZWYgPSBjb2x1bW4uY29sRGVmO1xyXG4gICAgICAgICAgICBpZiAoY29sRGVmLmNoZWNrYm94U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZUNoZWNrYm94ID0gdGhpcy5zZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkuY3JlYXRlU2VsZWN0aW9uQ2hlY2tib3gobm9kZSwgcm93SW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgZUNlbGxXcmFwcGVyLmFwcGVuZENoaWxkKGVDaGVja2JveCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGV2ZW50dWFsbHkgd2UgY2FsbCBlU3BhbldpdGhWYWx1ZS5pbm5lckhUTUwgPSB4eHgsIHNvIGNhbm5vdCBpbmNsdWRlIHRoZSBjaGVja2JveCAoYWJvdmUpIGluIHRoaXMgc3BhblxyXG4gICAgICAgICAgICB2YXIgZVNwYW5XaXRoVmFsdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgXy5hZGRDc3NDbGFzcyhlU3BhbldpdGhWYWx1ZSwgXCJhZy1jZWxsLXZhbHVlXCIpO1xyXG5cclxuICAgICAgICAgICAgZUNlbGxXcmFwcGVyLmFwcGVuZENoaWxkKGVTcGFuV2l0aFZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIHJlZnJlc2hDZWxsRnVuY3Rpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNvZnRSZWZyZXNoQ2VsbChlR3JpZENlbGwsIGlzRmlyc3RDb2x1bW4sIG5vZGUsIGNvbHVtbiwgJGNoaWxkU2NvcGUsIHJvd0luZGV4KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucHV0RGF0YUludG9DZWxsKGNvbHVtbiwgdmFsdWUsIHZhbHVlR2V0dGVyLCBub2RlLCAkY2hpbGRTY29wZSwgZVNwYW5XaXRoVmFsdWUsIGVHcmlkQ2VsbCwgcm93SW5kZXgsIHJlZnJlc2hDZWxsRnVuY3Rpb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkQ2VsbERvdWJsZUNsaWNrZWRIYW5kbGVyKGVHcmlkQ2VsbDogYW55LCBub2RlOiBhbnksIGNvbHVtbjogYW55LCB2YWx1ZTogYW55LCByb3dJbmRleDogYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY2hpbGRTY29wZTogYW55LCBpc0ZpcnN0Q29sdW1uOiBhbnksIHZhbHVlR2V0dGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgY29sRGVmID0gY29sdW1uLmNvbERlZjtcclxuICAgICAgICAgICAgZUdyaWRDZWxsLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGF0LmdyaWRPcHRpb25zV3JhcHBlci5nZXRDZWxsRG91YmxlQ2xpY2tlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtc0ZvckdyaWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbERlZjogY29sRGVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmdyaWRPcHRpb25zV3JhcHBlci5nZXRDZWxsRG91YmxlQ2xpY2tlZCgpKHBhcmFtc0ZvckdyaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbERlZi5jZWxsRG91YmxlQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXNGb3JDb2xEZWYgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbERlZjogY29sRGVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xEZWYuY2VsbERvdWJsZUNsaWNrZWQocGFyYW1zRm9yQ29sRGVmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGF0LmlzQ2VsbEVkaXRhYmxlKGNvbERlZiwgbm9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnN0YXJ0RWRpdGluZyhlR3JpZENlbGwsIGNvbHVtbiwgbm9kZSwgJGNoaWxkU2NvcGUsIHJvd0luZGV4LCBpc0ZpcnN0Q29sdW1uLCB2YWx1ZUdldHRlcik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkQ2VsbENsaWNrZWRIYW5kbGVyKGVHcmlkQ2VsbDogYW55LCBub2RlOiBhbnksIGNvbHVtbjogYW55LCB2YWx1ZTogYW55LCByb3dJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2xEZWYgPSBjb2x1bW4uY29sRGVmO1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGVHcmlkQ2VsbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHdlIHBhc3MgZmFsc2UgdG8gZm9jdXNDZWxsLCBhcyB3ZSBkb24ndCB3YW50IHRoZSBjZWxsIHRvIGZvY3VzXHJcbiAgICAgICAgICAgICAgICAvLyBhbHNvIGdldCB0aGUgYnJvd3NlciBmb2N1cy4gaWYgd2UgZGlkLCB0aGVuIHRoZSBjZWxsUmVuZGVyZXIgY291bGRcclxuICAgICAgICAgICAgICAgIC8vIGhhdmUgYSB0ZXh0IGZpZWxkIGluIGl0LCBmb3IgZXhhbXBsZSwgYW5kIGFzIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGVcclxuICAgICAgICAgICAgICAgIC8vIHRleHQgZmllbGQsIHRoZSB0ZXh0IGZpZWxkLCB0aGUgZm9jdXMgZG9lc24ndCBnZXQgdG8gdGhlIHRleHRcclxuICAgICAgICAgICAgICAgIC8vIGZpZWxkLCBpbnN0ZWFkIHRvIGdvZXMgdG8gdGhlIGRpdiBiZWhpbmQsIG1ha2luZyBpdCBpbXBvc3NpYmxlIHRvXHJcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QgdGhlIHRleHQgZmllbGQuXHJcbiAgICAgICAgICAgICAgICB0aGF0LmZvY3VzQ2VsbChlR3JpZENlbGwsIHJvd0luZGV4LCBjb2x1bW4uaW5kZXgsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGF0LmdyaWRPcHRpb25zV3JhcHBlci5nZXRDZWxsQ2xpY2tlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmFtc0ZvckdyaWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbERlZjogY29sRGVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmdyaWRPcHRpb25zV3JhcHBlci5nZXRDZWxsQ2xpY2tlZCgpKHBhcmFtc0ZvckdyaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbERlZi5jZWxsQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXNGb3JDb2xEZWYgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUuZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbERlZjogY29sRGVmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjb2xEZWYuY2VsbENsaWNrZWQocGFyYW1zRm9yQ29sRGVmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc0NlbGxFZGl0YWJsZShjb2xEZWY6IGFueSwgbm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVkaXRpbmdDZWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG5ldmVyIGFsbG93IGVkaXRpbmcgb2YgZ3JvdXBzXHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGJvb2xlYW4gc2V0LCB0aGVuIGp1c3QgdXNlIGl0XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sRGVmLmVkaXRhYmxlID09PSAnYm9vbGVhbicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjb2xEZWYuZWRpdGFibGU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGZ1bmN0aW9uLCB0aGVuIGNhbGwgdGhlIGZ1bmN0aW9uIHRvIGZpbmQgb3V0XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sRGVmLmVkaXRhYmxlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzaG91bGQgY2hhbmdlIHRoaXMsIHNvIGl0IGdldHMgcGFzc2VkIHBhcmFtcyB3aXRoIG5pY2UgdXNlZnVsIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbERlZi5lZGl0YWJsZShub2RlLmRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdG9wRWRpdGluZyhlR3JpZENlbGw6IGFueSwgY29sdW1uOiBhbnksIG5vZGU6IGFueSwgJGNoaWxkU2NvcGU6IGFueSwgZUlucHV0OiBhbnksIGJsdXJMaXN0ZW5lcjogYW55LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiBhbnksIGlzRmlyc3RDb2x1bW46IGFueSwgdmFsdWVHZXR0ZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRpbmdDZWxsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGVJbnB1dC52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIGNvbERlZiA9IGNvbHVtbi5jb2xEZWY7XHJcblxyXG4gICAgICAgICAgICAvL0lmIHdlIGRvbid0IHJlbW92ZSB0aGUgYmx1ciBsaXN0ZW5lciBmaXJzdCwgd2UgZ2V0OlxyXG4gICAgICAgICAgICAvL1VuY2F1Z2h0IE5vdEZvdW5kRXJyb3I6IEZhaWxlZCB0byBleGVjdXRlICdyZW1vdmVDaGlsZCcgb24gJ05vZGUnOiBUaGUgbm9kZSB0byBiZSByZW1vdmVkIGlzIG5vIGxvbmdlciBhIGNoaWxkIG9mIHRoaXMgbm9kZS4gUGVyaGFwcyBpdCB3YXMgbW92ZWQgaW4gYSAnYmx1cicgZXZlbnQgaGFuZGxlcj9cclxuICAgICAgICAgICAgZUlucHV0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCBibHVyTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICAgICAgXy5yZW1vdmVBbGxDaGlsZHJlbihlR3JpZENlbGwpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBhcmFtc0ZvckNhbGxiYWNrcyA9IHtcclxuICAgICAgICAgICAgICAgIG5vZGU6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBub2RlLmRhdGEsXHJcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogbm9kZS5kYXRhW2NvbERlZi5maWVsZF0sXHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZTogbmV3VmFsdWUsXHJcbiAgICAgICAgICAgICAgICByb3dJbmRleDogcm93SW5kZXgsXHJcbiAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbERlZixcclxuICAgICAgICAgICAgICAgIGFwaTogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0QXBpKCksXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0OiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRDb250ZXh0KClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjb2xEZWYubmV3VmFsdWVIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xEZWYubmV3VmFsdWVIYW5kbGVyKHBhcmFtc0ZvckNhbGxiYWNrcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBub2RlLmRhdGFbY29sRGVmLmZpZWxkXSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCB0aGUgdmFsdWUgaGFzIGJlZW4gdXBkYXRlZFxyXG4gICAgICAgICAgICB2YXIgbmV3VmFsdWU6IGFueTtcclxuICAgICAgICAgICAgaWYgKHZhbHVlR2V0dGVyKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlR2V0dGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGFyYW1zRm9yQ2FsbGJhY2tzLm5ld1ZhbHVlID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29sRGVmLmNlbGxWYWx1ZUNoYW5nZWQgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIGNvbERlZi5jZWxsVmFsdWVDaGFuZ2VkKHBhcmFtc0ZvckNhbGxiYWNrcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRDZWxsVmFsdWVDaGFuZ2VkKCkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENlbGxWYWx1ZUNoYW5nZWQoKShwYXJhbXNGb3JDYWxsYmFja3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnBvcHVsYXRlQW5kU3R5bGVHcmlkQ2VsbCh2YWx1ZUdldHRlciwgbmV3VmFsdWUsIGVHcmlkQ2VsbCwgaXNGaXJzdENvbHVtbiwgbm9kZSwgY29sdW1uLCByb3dJbmRleCwgJGNoaWxkU2NvcGUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhcnRFZGl0aW5nKGVHcmlkQ2VsbDogYW55LCBjb2x1bW46IGFueSwgbm9kZTogYW55LCAkY2hpbGRTY29wZTogYW55LCByb3dJbmRleDogYW55LFxyXG4gICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0Q29sdW1uOiBhbnksIHZhbHVlR2V0dGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmVkaXRpbmdDZWxsID0gdHJ1ZTtcclxuICAgICAgICAgICAgXy5yZW1vdmVBbGxDaGlsZHJlbihlR3JpZENlbGwpO1xyXG4gICAgICAgICAgICB2YXIgZUlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKTtcclxuICAgICAgICAgICAgZUlucHV0LnR5cGUgPSAndGV4dCc7XHJcbiAgICAgICAgICAgIF8uYWRkQ3NzQ2xhc3MoZUlucHV0LCAnYWctY2VsbC1lZGl0LWlucHV0Jyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWVHZXR0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHZhbHVlR2V0dGVyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVJbnB1dC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlSW5wdXQuc3R5bGUud2lkdGggPSAoY29sdW1uLmFjdHVhbFdpZHRoIC0gMTQpICsgJ3B4JztcclxuICAgICAgICAgICAgZUdyaWRDZWxsLmFwcGVuZENoaWxkKGVJbnB1dCk7XHJcbiAgICAgICAgICAgIGVJbnB1dC5mb2N1cygpO1xyXG4gICAgICAgICAgICBlSW5wdXQuc2VsZWN0KCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgYmx1ckxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5zdG9wRWRpdGluZyhlR3JpZENlbGwsIGNvbHVtbiwgbm9kZSwgJGNoaWxkU2NvcGUsIGVJbnB1dCwgYmx1ckxpc3RlbmVyLCByb3dJbmRleCwgaXNGaXJzdENvbHVtbiwgdmFsdWVHZXR0ZXIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zdG9wIGVudGVyaW5nIGlmIHdlIGxvb3NlIGZvY3VzXHJcbiAgICAgICAgICAgIGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCBibHVyTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICAgICAgLy9zdG9wIGVkaXRpbmcgaWYgZW50ZXIgcHJlc3NlZFxyXG4gICAgICAgICAgICBlSW5wdXQuYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBmdW5jdGlvbiAoZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICAvLyAxMyBpcyBlbnRlclxyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSBDb25zdGFudHMuS0VZX0VOVEVSKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zdG9wRWRpdGluZyhlR3JpZENlbGwsIGNvbHVtbiwgbm9kZSwgJGNoaWxkU2NvcGUsIGVJbnB1dCwgYmx1ckxpc3RlbmVyLCByb3dJbmRleCwgaXNGaXJzdENvbHVtbiwgdmFsdWVHZXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZm9jdXNDZWxsKGVHcmlkQ2VsbCwgcm93SW5kZXgsIGNvbHVtbi5pbmRleCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gdGFiIGtleSBkb2Vzbid0IGdlbmVyYXRlIGtleXByZXNzLCBzbyBuZWVkIGtleWRvd24gdG8gbGlzdGVuIGZvciB0aGF0XHJcbiAgICAgICAgICAgIGVJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBldmVudC53aGljaCB8fCBldmVudC5rZXlDb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSA9PSBDb25zdGFudHMuS0VZX1RBQikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3RvcEVkaXRpbmcoZUdyaWRDZWxsLCBjb2x1bW4sIG5vZGUsICRjaGlsZFNjb3BlLCBlSW5wdXQsIGJsdXJMaXN0ZW5lciwgcm93SW5kZXgsIGlzRmlyc3RDb2x1bW4sIHZhbHVlR2V0dGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnN0YXJ0RWRpdGluZ05leHRDZWxsKHJvd0luZGV4LCBjb2x1bW4sIGV2ZW50LnNoaWZ0S2V5KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB3ZSBkb24ndCB3YW50IHRoZSBkZWZhdWx0IHRhYiBhY3Rpb24sIHNvIHJldHVybiBmYWxzZSwgdGhpcyBzdG9wcyB0aGUgZXZlbnQgZnJvbSBidWJibGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0YXJ0RWRpdGluZ05leHRDZWxsKHJvd0luZGV4OiBhbnksIGNvbHVtbjogYW55LCBzaGlmdEtleTogYW55KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlyc3RSb3dUb0NoZWNrID0gdGhpcy5maXJzdFZpcnR1YWxSZW5kZXJlZFJvdztcclxuICAgICAgICAgICAgdmFyIGxhc3RSb3dUb0NoZWNrID0gdGhpcy5sYXN0VmlydHVhbFJlbmRlcmVkUm93O1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudFJvd0luZGV4ID0gcm93SW5kZXg7XHJcblxyXG4gICAgICAgICAgICB2YXIgdmlzaWJsZUNvbHVtbnMgPSB0aGlzLmNvbHVtbk1vZGVsLmdldERpc3BsYXllZENvbHVtbnMoKTtcclxuICAgICAgICAgICAgdmFyIGN1cnJlbnRDb2wgPSBjb2x1bW47XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbmRleE9mQ3VycmVudENvbCA9IHZpc2libGVDb2x1bW5zLmluZGV4T2YoY3VycmVudENvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gbW92ZSBiYWNrd2FyZFxyXG4gICAgICAgICAgICAgICAgaWYgKHNoaWZ0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBhbG9uZyB0byB0aGUgcHJldmlvdXMgY2VsbFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2wgPSB2aXNpYmxlQ29sdW1uc1tpbmRleE9mQ3VycmVudENvbCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGVuZCBvZiB0aGUgcm93LCBhbmQgaWYgc28sIGdvIGJhY2sgYSByb3dcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbCA9IHZpc2libGVDb2x1bW5zW3Zpc2libGVDb2x1bW5zLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um93SW5kZXgtLTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGdvdCB0byBlbmQgb2YgcmVuZGVyZWQgcm93cywgdGhlbiBxdWl0IGxvb2tpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJvd0luZGV4IDwgZmlyc3RSb3dUb0NoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBmb3J3YXJkXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgYWxvbmcgdG8gdGhlIG5leHQgY2VsbFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRDb2wgPSB2aXNpYmxlQ29sdW1uc1tpbmRleE9mQ3VycmVudENvbCArIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGVuZCBvZiB0aGUgcm93LCBhbmQgaWYgc28sIGdvIGZvcndhcmQgYSByb3dcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudENvbCA9IHZpc2libGVDb2x1bW5zWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50Um93SW5kZXgrKztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIGdvdCB0byBlbmQgb2YgcmVuZGVyZWQgcm93cywgdGhlbiBxdWl0IGxvb2tpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFJvd0luZGV4ID4gbGFzdFJvd1RvQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV4dEZ1bmMgPSB0aGlzLnJlbmRlcmVkUm93U3RhcnRFZGl0aW5nTGlzdGVuZXJzW2N1cnJlbnRSb3dJbmRleF1bY3VycmVudENvbC5jb2xJZF07XHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dEZ1bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBzZWUgaWYgdGhlIG5leHQgY2VsbCBpcyBlZGl0YWJsZSwgYW5kIGlmIHNvLCB3ZSBoYXZlIGNvbWUgdG9cclxuICAgICAgICAgICAgICAgICAgICAvLyB0aGUgZW5kIG9mIG91ciBzZWFyY2gsIHNvIHN0b3AgbG9va2luZyBmb3IgdGhlIG5leHQgY2VsbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXh0Q2VsbEFjY2VwdGVkRWRpdCA9IG5leHRGdW5jKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRDZWxsQWNjZXB0ZWRFZGl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJ1dGlscy50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJjb25zdGFudHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwic3ZnRmFjdG9yeS50c1wiIC8+XHJcblxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciB1dGlscyA9IFV0aWxzO1xyXG4gICAgdmFyIGNvbnN0YW50cyA9IENvbnN0YW50cztcclxuICAgIHZhciBzdmdGYWN0b3J5ID0gU3ZnRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBIZWFkZXJSZW5kZXJlciB7XHJcblxyXG4gICAgICAgIGV4cHJlc3Npb25TZXJ2aWNlOiBhbnk7XHJcbiAgICAgICAgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgY29sdW1uTW9kZWw6IGFueTtcclxuICAgICAgICBjb2x1bW5Db250cm9sbGVyOiBhbnk7XHJcbiAgICAgICAgYW5ndWxhckdyaWQ6IGFueTtcclxuICAgICAgICBmaWx0ZXJNYW5hZ2VyOiBhbnk7XHJcbiAgICAgICAgJHNjb3BlOiBhbnk7XHJcbiAgICAgICAgJGNvbXBpbGU6IGFueTtcclxuICAgICAgICBlUGlubmVkSGVhZGVyOiBhbnk7XHJcbiAgICAgICAgZUhlYWRlckNvbnRhaW5lcjogYW55O1xyXG4gICAgICAgIGVIZWFkZXI6IGFueTtcclxuICAgICAgICBlUm9vdDogYW55O1xyXG4gICAgICAgIGNoaWxkU2NvcGVzOiBhbnk7XHJcbiAgICAgICAgZHJhZ1N0YXJ0WDogYW55O1xyXG5cclxuICAgICAgICBpbml0KGdyaWRPcHRpb25zV3JhcHBlcjogYW55LCBjb2x1bW5Db250cm9sbGVyOiBhbnksIGNvbHVtbk1vZGVsOiBhbnksIGdyaWRQYW5lbDogYW55LCBhbmd1bGFyR3JpZDogYW55LFxyXG4gICAgICAgICAgICAgZmlsdGVyTWFuYWdlcjogYW55LCAkc2NvcGU6IGFueSwgJGNvbXBpbGU6IGFueSwgZXhwcmVzc2lvblNlcnZpY2U6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25TZXJ2aWNlID0gZXhwcmVzc2lvblNlcnZpY2U7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyID0gZ3JpZE9wdGlvbnNXcmFwcGVyO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsID0gY29sdW1uTW9kZWw7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlciA9IGNvbHVtbkNvbnRyb2xsZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQgPSBhbmd1bGFyR3JpZDtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcclxuICAgICAgICAgICAgdGhpcy4kc2NvcGUgPSAkc2NvcGU7XHJcbiAgICAgICAgICAgIHRoaXMuJGNvbXBpbGUgPSAkY29tcGlsZTtcclxuICAgICAgICAgICAgdGhpcy5maW5kQWxsRWxlbWVudHMoZ3JpZFBhbmVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbmRBbGxFbGVtZW50cyhncmlkUGFuZWw6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmVQaW5uZWRIZWFkZXIgPSBncmlkUGFuZWwuZ2V0UGlubmVkSGVhZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZUhlYWRlckNvbnRhaW5lciA9IGdyaWRQYW5lbC5nZXRIZWFkZXJDb250YWluZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5lSGVhZGVyID0gZ3JpZFBhbmVsLmdldEhlYWRlcigpO1xyXG4gICAgICAgICAgICB0aGlzLmVSb290ID0gZ3JpZFBhbmVsLmdldFJvb3QoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlZnJlc2hIZWFkZXIoKSB7XHJcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUFsbENoaWxkcmVuKHRoaXMuZVBpbm5lZEhlYWRlcik7XHJcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUFsbENoaWxkcmVuKHRoaXMuZUhlYWRlckNvbnRhaW5lcik7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGlsZFNjb3Blcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZFNjb3Blcy5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZFNjb3BlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFNjb3BlLiRkZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNoaWxkU2NvcGVzID0gW107XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNHcm91cEhlYWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRIZWFkZXJzV2l0aEdyb3VwaW5nKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydEhlYWRlcnNXaXRob3V0R3JvdXBpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zZXJ0SGVhZGVyc1dpdGhHcm91cGluZygpIHtcclxuICAgICAgICAgICAgdmFyIGdyb3VwcyA9IHRoaXMuY29sdW1uTW9kZWwuZ2V0SGVhZGVyR3JvdXBzKCk7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgZ3JvdXBzLmZvckVhY2goZnVuY3Rpb24gKGdyb3VwOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlSGVhZGVyQ2VsbCA9IHRoYXQuY3JlYXRlR3JvdXBlZEhlYWRlckNlbGwoZ3JvdXApO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVDb250YWluZXJUb0FkZFRvID0gZ3JvdXAucGlubmVkID8gdGhhdC5lUGlubmVkSGVhZGVyIDogdGhhdC5lSGVhZGVyQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgZUNvbnRhaW5lclRvQWRkVG8uYXBwZW5kQ2hpbGQoZUhlYWRlckNlbGwpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUdyb3VwZWRIZWFkZXJDZWxsKGdyb3VwOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBlSGVhZGVyR3JvdXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgZUhlYWRlckdyb3VwLmNsYXNzTmFtZSA9ICdhZy1oZWFkZXItZ3JvdXAnO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVIZWFkZXJHcm91cENlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgZ3JvdXAuZUhlYWRlckdyb3VwQ2VsbCA9IGVIZWFkZXJHcm91cENlbGw7XHJcbiAgICAgICAgICAgIHZhciBjbGFzc05hbWVzID0gWydhZy1oZWFkZXItZ3JvdXAtY2VsbCddO1xyXG4gICAgICAgICAgICAvLyBoYXZpbmcgZGlmZmVyZW50IGNsYXNzZXMgYmVsb3cgYWxsb3dzIHRoZSBzdHlsZSB0byBub3QgaGF2ZSBhIGJvdHRvbSBib3JkZXJcclxuICAgICAgICAgICAgLy8gb24gdGhlIGdyb3VwIGhlYWRlciwgaWYgbm8gZ3JvdXAgaXMgc3BlY2lmaWVkXHJcbiAgICAgICAgICAgIGlmIChncm91cC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWVzLnB1c2goJ2FnLWhlYWRlci1ncm91cC1jZWxsLXdpdGgtZ3JvdXAnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZXMucHVzaCgnYWctaGVhZGVyLWdyb3VwLWNlbGwtbm8tZ3JvdXAnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlSGVhZGVyR3JvdXBDZWxsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZXMuam9pbignICcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzRW5hYmxlQ29sUmVzaXplKCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlSGVhZGVyQ2VsbFJlc2l6ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgICAgICAgICAgICBlSGVhZGVyQ2VsbFJlc2l6ZS5jbGFzc05hbWUgPSBcImFnLWhlYWRlci1jZWxsLXJlc2l6ZVwiO1xyXG4gICAgICAgICAgICAgICAgZUhlYWRlckdyb3VwQ2VsbC5hcHBlbmRDaGlsZChlSGVhZGVyQ2VsbFJlc2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBncm91cC5lSGVhZGVyQ2VsbFJlc2l6ZSA9IGVIZWFkZXJDZWxsUmVzaXplO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRyYWdDYWxsYmFjayA9IHRoaXMuZ3JvdXBEcmFnQ2FsbGJhY2tGYWN0b3J5KGdyb3VwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkRHJhZ0hhbmRsZXIoZUhlYWRlckNlbGxSZXNpemUsIGRyYWdDYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG5vIHJlbmRlcmVyLCBkZWZhdWx0IHRleHQgcmVuZGVyXHJcbiAgICAgICAgICAgIHZhciBncm91cE5hbWUgPSBncm91cC5uYW1lO1xyXG4gICAgICAgICAgICBpZiAoZ3JvdXBOYW1lICYmIGdyb3VwTmFtZSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlR3JvdXBDZWxsTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgZUdyb3VwQ2VsbExhYmVsLmNsYXNzTmFtZSA9ICdhZy1oZWFkZXItZ3JvdXAtY2VsbC1sYWJlbCc7XHJcbiAgICAgICAgICAgICAgICBlSGVhZGVyR3JvdXBDZWxsLmFwcGVuZENoaWxkKGVHcm91cENlbGxMYWJlbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGVJbm5lclRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgICAgIGVJbm5lclRleHQuY2xhc3NOYW1lID0gJ2FnLWhlYWRlci1ncm91cC10ZXh0JztcclxuICAgICAgICAgICAgICAgIGVJbm5lclRleHQuaW5uZXJIVE1MID0gZ3JvdXBOYW1lO1xyXG4gICAgICAgICAgICAgICAgZUdyb3VwQ2VsbExhYmVsLmFwcGVuZENoaWxkKGVJbm5lclRleHQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChncm91cC5leHBhbmRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRHcm91cEV4cGFuZEljb24oZ3JvdXAsIGVHcm91cENlbGxMYWJlbCwgZ3JvdXAuZXhwYW5kZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVIZWFkZXJHcm91cC5hcHBlbmRDaGlsZChlSGVhZGVyR3JvdXBDZWxsKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgZ3JvdXAuZGlzcGxheWVkQ29sdW1ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVIZWFkZXJDZWxsID0gdGhhdC5jcmVhdGVIZWFkZXJDZWxsKGNvbHVtbiwgdHJ1ZSwgZ3JvdXApO1xyXG4gICAgICAgICAgICAgICAgZUhlYWRlckdyb3VwLmFwcGVuZENoaWxkKGVIZWFkZXJDZWxsKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGF0LnNldFdpZHRoT2ZHcm91cEhlYWRlckNlbGwoZ3JvdXApO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVIZWFkZXJHcm91cDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZEdyb3VwRXhwYW5kSWNvbihncm91cDogYW55LCBlSGVhZGVyR3JvdXA6IGFueSwgZXhwYW5kZWQ6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgZUdyb3VwSWNvbjogYW55O1xyXG4gICAgICAgICAgICBpZiAoZXhwYW5kZWQpIHtcclxuICAgICAgICAgICAgICAgIGVHcm91cEljb24gPSB1dGlscy5jcmVhdGVJY29uKCdoZWFkZXJHcm91cE9wZW5lZCcsIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLCBudWxsLCBzdmdGYWN0b3J5LmNyZWF0ZUFycm93TGVmdFN2Zyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlR3JvdXBJY29uID0gdXRpbHMuY3JlYXRlSWNvbignaGVhZGVyR3JvdXBDbG9zZWQnLCB0aGlzLmdyaWRPcHRpb25zV3JhcHBlciwgbnVsbCwgc3ZnRmFjdG9yeS5jcmVhdGVBcnJvd1JpZ2h0U3ZnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlR3JvdXBJY29uLmNsYXNzTmFtZSA9ICdhZy1oZWFkZXItZXhwYW5kLWljb24nO1xyXG4gICAgICAgICAgICBlSGVhZGVyR3JvdXAuYXBwZW5kQ2hpbGQoZUdyb3VwSWNvbik7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGVHcm91cEljb24ub25jbGljayA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5Db250cm9sbGVyLmhlYWRlckdyb3VwT3BlbmVkKGdyb3VwKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZERyYWdIYW5kbGVyKGVEcmFnZ2FibGVFbGVtZW50OiBhbnksIGRyYWdDYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgZURyYWdnYWJsZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgZnVuY3Rpb24gKGRvd25FdmVudDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBkcmFnQ2FsbGJhY2sub25EcmFnU3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIHRoYXQuZVJvb3Quc3R5bGUuY3Vyc29yID0gXCJjb2wtcmVzaXplXCI7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmRyYWdTdGFydFggPSBkb3duRXZlbnQuY2xpZW50WDtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzVG9SZW1vdmUgPSA8YW55PiB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNUb1JlbW92ZS5tb3VzZW1vdmUgPSBmdW5jdGlvbiAobW92ZUV2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3WCA9IG1vdmVFdmVudC5jbGllbnRYO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFuZ2UgPSBuZXdYIC0gdGhhdC5kcmFnU3RhcnRYO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYWdDYWxsYmFjay5vbkRyYWdnaW5nKGNoYW5nZSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIGxpc3RlbmVyc1RvUmVtb3ZlLm1vdXNldXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zdG9wRHJhZ2dpbmcobGlzdGVuZXJzVG9SZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNUb1JlbW92ZS5tb3VzZWxlYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc3RvcERyYWdnaW5nKGxpc3RlbmVyc1RvUmVtb3ZlKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC5lUm9vdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBsaXN0ZW5lcnNUb1JlbW92ZS5tb3VzZW1vdmUpO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5lUm9vdC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgbGlzdGVuZXJzVG9SZW1vdmUubW91c2V1cCk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmVSb290LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBsaXN0ZW5lcnNUb1JlbW92ZS5tb3VzZWxlYXZlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRXaWR0aE9mR3JvdXBIZWFkZXJDZWxsKGhlYWRlckdyb3VwOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRvdGFsV2lkdGggPSAwO1xyXG4gICAgICAgICAgICBoZWFkZXJHcm91cC5kaXNwbGF5ZWRDb2x1bW5zLmZvckVhY2goZnVuY3Rpb24gKGNvbHVtbjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbFdpZHRoICs9IGNvbHVtbi5hY3R1YWxXaWR0aDtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGhlYWRlckdyb3VwLmVIZWFkZXJHcm91cENlbGwuc3R5bGUud2lkdGggPSB1dGlscy5mb3JtYXRXaWR0aCh0b3RhbFdpZHRoKTtcclxuICAgICAgICAgICAgaGVhZGVyR3JvdXAuYWN0dWFsV2lkdGggPSB0b3RhbFdpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW5zZXJ0SGVhZGVyc1dpdGhvdXRHcm91cGluZygpIHtcclxuICAgICAgICAgICAgdmFyIGVQaW5uZWRIZWFkZXIgPSB0aGlzLmVQaW5uZWRIZWFkZXI7XHJcbiAgICAgICAgICAgIHZhciBlSGVhZGVyQ29udGFpbmVyID0gdGhpcy5lSGVhZGVyQ29udGFpbmVyO1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsLmdldERpc3BsYXllZENvbHVtbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgLy8gb25seSBpbmNsdWRlIHRoZSBmaXJzdCB4IGNvbHNcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJDZWxsID0gdGhhdC5jcmVhdGVIZWFkZXJDZWxsKGNvbHVtbiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5waW5uZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlUGlubmVkSGVhZGVyLmFwcGVuZENoaWxkKGhlYWRlckNlbGwpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlSGVhZGVyQ29udGFpbmVyLmFwcGVuZENoaWxkKGhlYWRlckNlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNyZWF0ZUhlYWRlckNlbGwoY29sdW1uOiBhbnksIGdyb3VwZWQ6IGFueSwgaGVhZGVyR3JvdXA/OiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB2YXIgY29sRGVmID0gY29sdW1uLmNvbERlZjtcclxuICAgICAgICAgICAgdmFyIGVIZWFkZXJDZWxsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgLy8gc3RpY2sgdGhlIGhlYWRlciBjZWxsIGluIGNvbHVtbiwgYXMgd2UgYWNjZXNzIGl0IHdoZW4gZ3JvdXAgaXMgcmUtc2l6ZWRcclxuICAgICAgICAgICAgY29sdW1uLmVIZWFkZXJDZWxsID0gZUhlYWRlckNlbGw7XHJcblxyXG4gICAgICAgICAgICB2YXIgbmV3Q2hpbGRTY29wZTogYW55O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNBbmd1bGFyQ29tcGlsZUhlYWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRTY29wZSA9IHRoaXMuJHNjb3BlLiRuZXcoKTtcclxuICAgICAgICAgICAgICAgIG5ld0NoaWxkU2NvcGUuY29sRGVmID0gY29sRGVmO1xyXG4gICAgICAgICAgICAgICAgbmV3Q2hpbGRTY29wZS5jb2xJbmRleCA9IGNvbERlZi5pbmRleDtcclxuICAgICAgICAgICAgICAgIG5ld0NoaWxkU2NvcGUuY29sRGVmV3JhcHBlciA9IGNvbHVtbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRTY29wZXMucHVzaChuZXdDaGlsZFNjb3BlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGhlYWRlckNlbGxDbGFzc2VzID0gWydhZy1oZWFkZXItY2VsbCddO1xyXG4gICAgICAgICAgICBpZiAoZ3JvdXBlZCkge1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyQ2VsbENsYXNzZXMucHVzaCgnYWctaGVhZGVyLWNlbGwtZ3JvdXBlZCcpOyAvLyB0aGlzIHRha2VzIDUwJSBoZWlnaHRcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlckNlbGxDbGFzc2VzLnB1c2goJ2FnLWhlYWRlci1jZWxsLW5vdC1ncm91cGVkJyk7IC8vIHRoaXMgdGFrZXMgMTAwJSBoZWlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlSGVhZGVyQ2VsbC5jbGFzc05hbWUgPSBoZWFkZXJDZWxsQ2xhc3Nlcy5qb2luKCcgJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFkZEhlYWRlckNsYXNzZXNGcm9tQ29sbERlZihjb2xEZWYsIG5ld0NoaWxkU2NvcGUsIGVIZWFkZXJDZWxsKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCB0b29sdGlwIGlmIGV4aXN0c1xyXG4gICAgICAgICAgICBpZiAoY29sRGVmLmhlYWRlclRvb2x0aXApIHtcclxuICAgICAgICAgICAgICAgIGVIZWFkZXJDZWxsLnRpdGxlID0gY29sRGVmLmhlYWRlclRvb2x0aXA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZUNvbFJlc2l6ZSgpICYmICFjb2xEZWYuc3VwcHJlc3NSZXNpemUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoZWFkZXJDZWxsUmVzaXplID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgIGhlYWRlckNlbGxSZXNpemUuY2xhc3NOYW1lID0gXCJhZy1oZWFkZXItY2VsbC1yZXNpemVcIjtcclxuICAgICAgICAgICAgICAgIGVIZWFkZXJDZWxsLmFwcGVuZENoaWxkKGhlYWRlckNlbGxSZXNpemUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRyYWdDYWxsYmFjayA9IHRoaXMuaGVhZGVyRHJhZ0NhbGxiYWNrRmFjdG9yeShlSGVhZGVyQ2VsbCwgY29sdW1uLCBoZWFkZXJHcm91cCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZERyYWdIYW5kbGVyKGhlYWRlckNlbGxSZXNpemUsIGRyYWdDYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGZpbHRlciBidXR0b25cclxuICAgICAgICAgICAgdmFyIHNob3dNZW51ID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNFbmFibGVGaWx0ZXIoKSAmJiAhY29sRGVmLnN1cHByZXNzTWVudTtcclxuICAgICAgICAgICAgaWYgKHNob3dNZW51KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZU1lbnVCdXR0b24gPSB1dGlscy5jcmVhdGVJY29uKCdtZW51JywgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbiwgc3ZnRmFjdG9yeS5jcmVhdGVNZW51U3ZnKTtcclxuICAgICAgICAgICAgICAgIHV0aWxzLmFkZENzc0NsYXNzKGVNZW51QnV0dG9uLCAnYWctaGVhZGVyLWljb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlTWVudUJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImFnLWhlYWRlci1jZWxsLW1lbnUtYnV0dG9uXCIpO1xyXG4gICAgICAgICAgICAgICAgZU1lbnVCdXR0b24ub25jbGljayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmZpbHRlck1hbmFnZXIuc2hvd0ZpbHRlcihjb2x1bW4sIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVIZWFkZXJDZWxsLmFwcGVuZENoaWxkKGVNZW51QnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIGVIZWFkZXJDZWxsLm9ubW91c2VlbnRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlTWVudUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzEnO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVIZWFkZXJDZWxsLm9ubW91c2VsZWF2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlTWVudUJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVNZW51QnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMCc7XHJcbiAgICAgICAgICAgICAgICBlTWVudUJ1dHRvbi5zdHlsZVsndHJhbnNpdGlvbiddID0gJ29wYWNpdHkgMC41cywgYm9yZGVyIDAuMnMnO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0eWxlOiBhbnkgPSBlTWVudUJ1dHRvbi5zdHlsZTtcclxuICAgICAgICAgICAgICAgIHN0eWxlWyctd2Via2l0LXRyYW5zaXRpb24nXSA9ICdvcGFjaXR5IDAuNXMsIGJvcmRlciAwLjJzJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gbGFiZWwgZGl2XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJDZWxsTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICBoZWFkZXJDZWxsTGFiZWwuY2xhc3NOYW1lID0gXCJhZy1oZWFkZXItY2VsbC1sYWJlbFwiO1xyXG5cclxuICAgICAgICAgICAgLy8gYWRkIGluIHNvcnQgaWNvbnNcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzRW5hYmxlU29ydGluZygpICYmICFjb2xEZWYuc3VwcHJlc3NTb3J0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW4uZVNvcnRBc2MgPSB1dGlscy5jcmVhdGVJY29uKCdzb3J0QXNjZW5kaW5nJywgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbiwgc3ZnRmFjdG9yeS5jcmVhdGVBcnJvd1VwU3ZnKTtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5lU29ydERlc2MgPSB1dGlscy5jcmVhdGVJY29uKCdzb3J0RGVzY2VuZGluZycsIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLCBjb2x1bW4sIHN2Z0ZhY3RvcnkuY3JlYXRlQXJyb3dEb3duU3ZnKTtcclxuICAgICAgICAgICAgICAgIHV0aWxzLmFkZENzc0NsYXNzKGNvbHVtbi5lU29ydEFzYywgJ2FnLWhlYWRlci1pY29uIGFnLXNvcnQtYXNjZW5kaW5nLWljb24nKTtcclxuICAgICAgICAgICAgICAgIHV0aWxzLmFkZENzc0NsYXNzKGNvbHVtbi5lU29ydERlc2MsICdhZy1oZWFkZXItaWNvbiBhZy1zb3J0LWRlc2NlbmRpbmctaWNvbicpO1xyXG4gICAgICAgICAgICAgICAgaGVhZGVyQ2VsbExhYmVsLmFwcGVuZENoaWxkKGNvbHVtbi5lU29ydEFzYyk7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJDZWxsTGFiZWwuYXBwZW5kQ2hpbGQoY29sdW1uLmVTb3J0RGVzYyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gJ25vIHNvcnQnIGljb25cclxuICAgICAgICAgICAgICAgIGlmIChjb2xEZWYudW5Tb3J0SWNvbiB8fCB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc1VuU29ydEljb24oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5lU29ydE5vbmUgPSB1dGlscy5jcmVhdGVJY29uKCdzb3J0VW5Tb3J0JywgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbiwgc3ZnRmFjdG9yeS5jcmVhdGVBcnJvd1VwRG93blN2Zyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuYWRkQ3NzQ2xhc3MoY29sdW1uLmVTb3J0Tm9uZSwgJ2FnLWhlYWRlci1pY29uIGFnLXNvcnQtbm9uZS1pY29uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyQ2VsbExhYmVsLmFwcGVuZENoaWxkKGNvbHVtbi5lU29ydE5vbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbHVtbi5lU29ydEFzYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgY29sdW1uLmVTb3J0RGVzYy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTb3J0SGFuZGxpbmcoaGVhZGVyQ2VsbExhYmVsLCBjb2x1bW4pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhZGQgaW4gZmlsdGVyIGljb25cclxuICAgICAgICAgICAgY29sdW1uLmVGaWx0ZXJJY29uID0gdXRpbHMuY3JlYXRlSWNvbignZmlsdGVyJywgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbiwgc3ZnRmFjdG9yeS5jcmVhdGVGaWx0ZXJTdmcpO1xyXG4gICAgICAgICAgICB1dGlscy5hZGRDc3NDbGFzcyhjb2x1bW4uZUZpbHRlckljb24sICdhZy1oZWFkZXItaWNvbicpO1xyXG4gICAgICAgICAgICBoZWFkZXJDZWxsTGFiZWwuYXBwZW5kQ2hpbGQoY29sdW1uLmVGaWx0ZXJJY29uKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHJlbmRlciB0aGUgY2VsbCwgdXNlIGEgcmVuZGVyZXIgaWYgb25lIGlzIHByb3ZpZGVkXHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJDZWxsUmVuZGVyZXI6IGFueTtcclxuICAgICAgICAgICAgaWYgKGNvbERlZi5oZWFkZXJDZWxsUmVuZGVyZXIpIHsgLy8gZmlyc3QgbG9vayBmb3IgYSByZW5kZXJlciBpbiBjb2wgZGVmXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJDZWxsUmVuZGVyZXIgPSBjb2xEZWYuaGVhZGVyQ2VsbFJlbmRlcmVyO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEhlYWRlckNlbGxSZW5kZXJlcigpKSB7IC8vIHNlY29uZCBsb29rIGZvciBvbmUgaW4gZ3JpZCBvcHRpb25zXHJcbiAgICAgICAgICAgICAgICBoZWFkZXJDZWxsUmVuZGVyZXIgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRIZWFkZXJDZWxsUmVuZGVyZXIoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGhlYWRlck5hbWVWYWx1ZSA9IHRoaXMuY29sdW1uTW9kZWwuZ2V0RGlzcGxheU5hbWVGb3JDb2woY29sdW1uKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChoZWFkZXJDZWxsUmVuZGVyZXIpIHtcclxuICAgICAgICAgICAgICAgIC8vIHJlbmRlcmVyIHByb3ZpZGVkLCB1c2UgaXRcclxuICAgICAgICAgICAgICAgIHZhciBjZWxsUmVuZGVyZXJQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sRGVmOiBjb2xEZWYsXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlOiBuZXdDaGlsZFNjb3BlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbnRleHQoKSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaGVhZGVyTmFtZVZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFwaTogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0QXBpKClcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgY2VsbFJlbmRlcmVyUmVzdWx0ID0gaGVhZGVyQ2VsbFJlbmRlcmVyKGNlbGxSZW5kZXJlclBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2hpbGRUb0FwcGVuZDogYW55O1xyXG4gICAgICAgICAgICAgICAgaWYgKHV0aWxzLmlzTm9kZU9yRWxlbWVudChjZWxsUmVuZGVyZXJSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBkb20gbm9kZSBvciBlbGVtZW50IHdhcyByZXR1cm5lZCwgc28gYWRkIGNoaWxkXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRUb0FwcGVuZCA9IGNlbGxSZW5kZXJlclJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGFzc3VtZSBpdCB3YXMgaHRtbCwgc28ganVzdCBpbnNlcnRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZVRleHRTcGFuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZVRleHRTcGFuLmlubmVySFRNTCA9IGNlbGxSZW5kZXJlclJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZFRvQXBwZW5kID0gZVRleHRTcGFuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYW5ndWxhciBjb21waWxlIGhlYWRlciBpZiBvcHRpb24gaXMgdHVybmVkIG9uXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNBbmd1bGFyQ29tcGlsZUhlYWRlcnMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGlsZFRvQXBwZW5kQ29tcGlsZWQgPSB0aGlzLiRjb21waWxlKGNoaWxkVG9BcHBlbmQpKG5ld0NoaWxkU2NvcGUpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlckNlbGxMYWJlbC5hcHBlbmRDaGlsZChjaGlsZFRvQXBwZW5kQ29tcGlsZWQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkZXJDZWxsTGFiZWwuYXBwZW5kQ2hpbGQoY2hpbGRUb0FwcGVuZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBubyByZW5kZXJlciwgZGVmYXVsdCB0ZXh0IHJlbmRlclxyXG4gICAgICAgICAgICAgICAgdmFyIGVJbm5lclRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKTtcclxuICAgICAgICAgICAgICAgIGVJbm5lclRleHQuY2xhc3NOYW1lID0gJ2FnLWhlYWRlci1jZWxsLXRleHQnO1xyXG4gICAgICAgICAgICAgICAgZUlubmVyVGV4dC5pbm5lckhUTUwgPSBoZWFkZXJOYW1lVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBoZWFkZXJDZWxsTGFiZWwuYXBwZW5kQ2hpbGQoZUlubmVyVGV4dCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVIZWFkZXJDZWxsLmFwcGVuZENoaWxkKGhlYWRlckNlbGxMYWJlbCk7XHJcbiAgICAgICAgICAgIGVIZWFkZXJDZWxsLnN0eWxlLndpZHRoID0gdXRpbHMuZm9ybWF0V2lkdGgoY29sdW1uLmFjdHVhbFdpZHRoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlSGVhZGVyQ2VsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZEhlYWRlckNsYXNzZXNGcm9tQ29sbERlZihjb2xEZWY6IGFueSwgJGNoaWxkU2NvcGU6IGFueSwgZUhlYWRlckNlbGw6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoY29sRGVmLmhlYWRlckNsYXNzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2xhc3NUb1VzZTogYW55O1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb2xEZWYuaGVhZGVyQ2xhc3MgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbERlZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlOiAkY2hpbGRTY29wZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Q29udGV4dCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcGk6IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc1RvVXNlID0gY29sRGVmLmhlYWRlckNsYXNzKHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzVG9Vc2UgPSBjb2xEZWYuaGVhZGVyQ2xhc3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjbGFzc1RvVXNlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLmFkZENzc0NsYXNzKGVIZWFkZXJDZWxsLCBjbGFzc1RvVXNlKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjbGFzc1RvVXNlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzVG9Vc2UuZm9yRWFjaChmdW5jdGlvbiAoY3NzQ2xhc3NJdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbHMuYWRkQ3NzQ2xhc3MoZUhlYWRlckNlbGwsIGNzc0NsYXNzSXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldE5leHRTb3J0RGlyZWN0aW9uKGRpcmVjdGlvbjogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBzdXBwcmVzc1VuU29ydCA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzU3VwcHJlc3NVblNvcnQoKTtcclxuICAgICAgICAgICAgdmFyIHN1cHByZXNzRGVzY1NvcnQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc1N1cHByZXNzRGVzY1NvcnQoKTtcclxuXHJcbiAgICAgICAgICAgIHN3aXRjaCAoZGlyZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50cy5ERVNDOlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdXBwcmVzc1VuU29ydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzLkFTQztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50cy5BU0M6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1cHByZXNzVW5Tb3J0ICYmIHN1cHByZXNzRGVzY1NvcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnN0YW50cy5BU0M7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdXBwcmVzc0Rlc2NTb3J0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb25zdGFudHMuREVTQztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0IDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc3RhbnRzLkFTQztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkU29ydEhhbmRsaW5nKGhlYWRlckNlbGxMYWJlbDogYW55LCBjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBoZWFkZXJDZWxsTGFiZWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgc29ydCBvbiBjdXJyZW50IGNvbFxyXG4gICAgICAgICAgICAgICAgY29sdW1uLnNvcnQgPSB0aGF0LmdldE5leHRTb3J0RGlyZWN0aW9uKGNvbHVtbi5zb3J0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBzb3J0ZWRBdCB1c2VkIGZvciBrbm93aW5nIG9yZGVyIG9mIGNvbHMgd2hlbiBtdWx0aS1jb2wgc29ydFxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5zb3J0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnNvcnRlZEF0ID0gbmV3IERhdGUoKS52YWx1ZU9mKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zb3J0ZWRBdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRvaW5nTXVsdGlTb3J0ID0gIXRoYXQuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzU3VwcHJlc3NNdWx0aVNvcnQoKSAmJiBlLnNoaWZ0S2V5O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNsZWFyIHNvcnQgb24gYWxsIGNvbHVtbnMgZXhjZXB0IHRoaXMgb25lLCBhbmQgdXBkYXRlIHRoZSBpY29uc1xyXG4gICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5Nb2RlbC5nZXRBbGxDb2x1bW5zKCkuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uVG9DbGVhcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gRG8gbm90IGNsZWFyIGlmIGVpdGhlciBob2xkaW5nIHNoaWZ0LCBvciBpZiBjb2x1bW4gaW4gcXVlc3Rpb24gd2FzIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShkb2luZ011bHRpU29ydCB8fCBjb2x1bW5Ub0NsZWFyID09PSBjb2x1bW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtblRvQ2xlYXIuc29ydCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC5hbmd1bGFyR3JpZC5vblNvcnRpbmdDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXBkYXRlU29ydEljb25zKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsLmdldEFsbENvbHVtbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIHZpc2liaWxpdHkgb2YgaWNvbnNcclxuICAgICAgICAgICAgICAgIHZhciBzb3J0QXNjZW5kaW5nID0gY29sdW1uLnNvcnQgPT09IGNvbnN0YW50cy5BU0M7XHJcbiAgICAgICAgICAgICAgICB2YXIgc29ydERlc2NlbmRpbmcgPSBjb2x1bW4uc29ydCA9PT0gY29uc3RhbnRzLkRFU0M7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5Tb3J0ID0gY29sdW1uLnNvcnQgIT09IGNvbnN0YW50cy5ERVNDICYmIGNvbHVtbi5zb3J0ICE9PSBjb25zdGFudHMuQVNDO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uZVNvcnRBc2MpIHtcclxuICAgICAgICAgICAgICAgICAgICB1dGlscy5zZXRWaXNpYmxlKGNvbHVtbi5lU29ydEFzYywgc29ydEFzY2VuZGluZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uLmVTb3J0RGVzYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnNldFZpc2libGUoY29sdW1uLmVTb3J0RGVzYywgc29ydERlc2NlbmRpbmcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gVW5Tb3J0IEljb25cclxuICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uZVNvcnROb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMuc2V0VmlzaWJsZShjb2x1bW4uZVNvcnROb25lLCB1blNvcnQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdyb3VwRHJhZ0NhbGxiYWNrRmFjdG9yeShjdXJyZW50R3JvdXA6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGRpc3BsYXllZENvbHVtbnMgPSBjdXJyZW50R3JvdXAuZGlzcGxheWVkQ29sdW1ucztcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cFdpZHRoU3RhcnQgPSBjdXJyZW50R3JvdXAuYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbldpZHRoU3RhcnRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZENvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sRGVmV3JhcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY2hpbGRyZW5XaWR0aFN0YXJ0cy5wdXNoKGNvbERlZldyYXBwZXIuYWN0dWFsV2lkdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluV2lkdGggPSBkaXNwbGF5ZWRDb2x1bW5zLmxlbmd0aCAqIGNvbnN0YW50cy5NSU5fQ09MX1dJRFRIO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uRHJhZ2dpbmc6IGZ1bmN0aW9uIChkcmFnQ2hhbmdlOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gdGhpcy5ncm91cFdpZHRoU3RhcnQgKyBkcmFnQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdXaWR0aCA8IHRoaXMubWluV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3V2lkdGggPSB0aGlzLm1pbldpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBuZXcgd2lkdGggdG8gdGhlIGdyb3VwIGhlYWRlclxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuZXdXaWR0aFB4ID0gbmV3V2lkdGggKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLmVIZWFkZXJHcm91cENlbGwuc3R5bGUud2lkdGggPSBuZXdXaWR0aFB4O1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRHcm91cC5hY3R1YWxXaWR0aCA9IG5ld1dpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBkaXN0cmlidXRlIHRoZSBuZXcgd2lkdGggdG8gdGhlIGNoaWxkIGhlYWRlcnNcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhbmdlUmF0aW8gPSBuZXdXaWR0aCAvIHRoaXMuZ3JvdXBXaWR0aFN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgcGl4ZWxzIHVzZWQsIGFuZCBsYXN0IGNvbHVtbiBnZXRzIHRoZSByZW1haW5pbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gY2F0ZXIgZm9yIHJvdW5kaW5nIGVycm9ycywgYW5kIG1pbiB3aWR0aCBhZGp1c3RtZW50c1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwaXhlbHNUb0Rpc3RyaWJ1dGUgPSBuZXdXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLmRpc3BsYXllZENvbHVtbnMuZm9yRWFjaChmdW5jdGlvbiAoY29sRGVmV3JhcHBlcjogYW55LCBpbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3RMYXN0Q29sID0gaW5kZXggIT09IChkaXNwbGF5ZWRDb2x1bW5zLmxlbmd0aCAtIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3Q2hpbGRTaXplOiBhbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3RMYXN0Q29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiBub3QgdGhlIGxhc3QgY29sLCBjYWxjdWxhdGUgdGhlIGNvbHVtbiB3aWR0aCBhcyBub3JtYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGFydENoaWxkU2l6ZSA9IHRoYXQuY2hpbGRyZW5XaWR0aFN0YXJ0c1tpbmRleF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdDaGlsZFNpemUgPSBzdGFydENoaWxkU2l6ZSAqIGNoYW5nZVJhdGlvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0NoaWxkU2l6ZSA8IGNvbnN0YW50cy5NSU5fQ09MX1dJRFRIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q2hpbGRTaXplID0gY29uc3RhbnRzLk1JTl9DT0xfV0lEVEg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbHNUb0Rpc3RyaWJ1dGUgLT0gbmV3Q2hpbGRTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgbGFzdCBjb2wsIGdpdmUgaXQgdGhlIHJlbWFpbmluZyBwaXhlbHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NoaWxkU2l6ZSA9IHBpeGVsc1RvRGlzdHJpYnV0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZUhlYWRlckNlbGwgPSBkaXNwbGF5ZWRDb2x1bW5zW2luZGV4XS5lSGVhZGVyQ2VsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFkanVzdENvbHVtbldpZHRoKG5ld0NoaWxkU2l6ZSwgY29sRGVmV3JhcHBlciwgZUhlYWRlckNlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzaG91bGQgbm90IGJlIGNhbGxpbmcgdGhlc2UgaGVyZSwgc2hvdWxkIGRvIHNvbWV0aGluZyBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRHcm91cC5waW5uZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFuZ3VsYXJHcmlkLnVwZGF0ZVBpbm5lZENvbENvbnRhaW5lcldpZHRoQWZ0ZXJDb2xSZXNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYW5ndWxhckdyaWQudXBkYXRlQm9keUNvbnRhaW5lcldpZHRoQWZ0ZXJDb2xSZXNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGp1c3RDb2x1bW5XaWR0aChuZXdXaWR0aDogYW55LCBjb2x1bW46IGFueSwgZUhlYWRlckNlbGw6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgbmV3V2lkdGhQeCA9IG5ld1dpZHRoICsgXCJweFwiO1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3JGb3JBbGxDb2xzSW5DZWxsID0gXCIuY2VsbC1jb2wtXCIgKyBjb2x1bW4uaW5kZXg7XHJcbiAgICAgICAgICAgIHZhciBjZWxsc0ZvclRoaXNDb2wgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3JGb3JBbGxDb2xzSW5DZWxsKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjZWxsc0ZvclRoaXNDb2wubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNlbGxzRm9yVGhpc0NvbFtpXS5zdHlsZS53aWR0aCA9IG5ld1dpZHRoUHg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVIZWFkZXJDZWxsLnN0eWxlLndpZHRoID0gbmV3V2lkdGhQeDtcclxuICAgICAgICAgICAgY29sdW1uLmFjdHVhbFdpZHRoID0gbmV3V2lkdGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBnZXRzIGNhbGxlZCB3aGVuIGEgaGVhZGVyIChub3QgYSBoZWFkZXIgZ3JvdXApIGdldHMgcmVzaXplZFxyXG4gICAgICAgIGhlYWRlckRyYWdDYWxsYmFja0ZhY3RvcnkoaGVhZGVyQ2VsbDogYW55LCBjb2x1bW46IGFueSwgaGVhZGVyR3JvdXA6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG9uRHJhZ1N0YXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydFdpZHRoID0gY29sdW1uLmFjdHVhbFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uRHJhZ2dpbmc6IGZ1bmN0aW9uIChkcmFnQ2hhbmdlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmV3V2lkdGggPSB0aGlzLnN0YXJ0V2lkdGggKyBkcmFnQ2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdXaWR0aCA8IGNvbnN0YW50cy5NSU5fQ09MX1dJRFRIKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1dpZHRoID0gY29uc3RhbnRzLk1JTl9DT0xfV0lEVEg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYWRqdXN0Q29sdW1uV2lkdGgobmV3V2lkdGgsIGNvbHVtbiwgaGVhZGVyQ2VsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoZWFkZXJHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc2V0V2lkdGhPZkdyb3VwSGVhZGVyQ2VsbChoZWFkZXJHcm91cCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBzaG91bGQgbm90IGJlIGNhbGxpbmcgdGhlc2UgaGVyZSwgc2hvdWxkIGRvIHNvbWV0aGluZyBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5waW5uZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50LmFuZ3VsYXJHcmlkLnVwZGF0ZVBpbm5lZENvbENvbnRhaW5lcldpZHRoQWZ0ZXJDb2xSZXNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuYW5ndWxhckdyaWQudXBkYXRlQm9keUNvbnRhaW5lcldpZHRoQWZ0ZXJDb2xSZXNpemUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdG9wRHJhZ2dpbmcobGlzdGVuZXJzVG9SZW1vdmU6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmVSb290LnN0eWxlLmN1cnNvciA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdXRpbHMuaXRlcmF0ZU9iamVjdChsaXN0ZW5lcnNUb1JlbW92ZSwgZnVuY3Rpb24gKGtleTogYW55LCBsaXN0ZW5lcjogYW55KSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmVSb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoa2V5LCBsaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXBkYXRlRmlsdGVySWNvbnMoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5Nb2RlbC5nZXREaXNwbGF5ZWRDb2x1bW5zKCkuZm9yRWFjaChmdW5jdGlvbiAoY29sdW1uOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRvZG86IG5lZWQgdG8gY2hhbmdlIHRoaXMsIHNvIG9ubHkgdXBkYXRlcyBpZiBjb2x1bW4gaXMgdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5lRmlsdGVySWNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJQcmVzZW50ID0gdGhhdC5maWx0ZXJNYW5hZ2VyLmlzRmlsdGVyUHJlc2VudEZvckNvbChjb2x1bW4uY29sSWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkaXNwbGF5U3R5bGUgPSBmaWx0ZXJQcmVzZW50ID8gJ2lubGluZScgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLmVGaWx0ZXJJY29uLnN0eWxlLmRpc3BsYXkgPSBkaXNwbGF5U3R5bGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cInV0aWxzLnRzXCIvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgXyA9IFV0aWxzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBHcm91cENyZWF0b3Ige1xyXG5cclxuICAgICAgICBzdGF0aWMgdGhlSW5zdGFuY2U6IEdyb3VwQ3JlYXRvcjtcclxuXHJcbiAgICAgICAgc3RhdGljIGdldEluc3RhbmNlKCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGhlSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGhlSW5zdGFuY2UgPSBuZXcgR3JvdXBDcmVhdG9yKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhlSW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBncm91cChyb3dOb2RlczogYW55LCBncm91cGVkQ29sczogYW55LCBleHBhbmRCeURlZmF1bHQ6IGFueSwgZXhwcmVzc2lvblNlcnZpY2U6IEV4cHJlc3Npb25TZXJ2aWNlLFxyXG4gICAgICAgICAgICAgICAgYXBpOiBHcmlkQXBpLCBjb250ZXh0OiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB0b3BNb3N0R3JvdXAgPSB7XHJcbiAgICAgICAgICAgICAgICBsZXZlbDogLTEsXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogPGFueT5bXSxcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuTWFwOiA8YW55Pnt9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgYWxsR3JvdXBzID0gPGFueT5bXTtcclxuICAgICAgICAgICAgYWxsR3JvdXBzLnB1c2godG9wTW9zdEdyb3VwKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBsZXZlbFRvSW5zZXJ0Q2hpbGQgPSBncm91cGVkQ29scy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICB2YXIgaTogYW55O1xyXG4gICAgICAgICAgICB2YXIgY3VycmVudExldmVsOiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBub2RlOiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBkYXRhOiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBjdXJyZW50R3JvdXA6IGFueTtcclxuICAgICAgICAgICAgdmFyIGdyb3VwS2V5OiBhbnk7XHJcbiAgICAgICAgICAgIHZhciBuZXh0R3JvdXA6IGFueTtcclxuXHJcbiAgICAgICAgICAgIC8vIHN0YXJ0IGF0IC0xIGFuZCBnbyBiYWNrd2FyZHMsIGFzIGFsbCB0aGUgcG9zaXRpdmUgaW5kZXhlc1xyXG4gICAgICAgICAgICAvLyBhcmUgYWxyZWFkeSB1c2VkIGJ5IHRoZSBub2Rlcy5cclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gLTE7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm93Tm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIG5vZGUgPSByb3dOb2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBub2RlLmRhdGE7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWxsIGxlYWYgbm9kZXMgaGF2ZSB0aGUgc2FtZSBsZXZlbCBpbiB0aGlzIGdyb3VwaW5nLCB3aGljaCBpcyBvbmUgbGV2ZWwgYWZ0ZXIgdGhlIGxhc3QgZ3JvdXBcclxuICAgICAgICAgICAgICAgIG5vZGUubGV2ZWwgPSBsZXZlbFRvSW5zZXJ0Q2hpbGQgKyAxO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY3VycmVudExldmVsID0gMDsgY3VycmVudExldmVsIDwgZ3JvdXBlZENvbHMubGVuZ3RoOyBjdXJyZW50TGV2ZWwrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBncm91cENvbHVtbiA9IGdyb3VwZWRDb2xzW2N1cnJlbnRMZXZlbF07XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBLZXkgPSBfLmdldFZhbHVlKGV4cHJlc3Npb25TZXJ2aWNlLCBkYXRhLCBncm91cENvbHVtbi5jb2xEZWYsIG5vZGUsIGFwaSwgY29udGV4dCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAgPSB0b3BNb3N0R3JvdXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBncm91cCBkb2Vzbid0IGV4aXN0IHlldCwgY3JlYXRlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dEdyb3VwID0gY3VycmVudEdyb3VwLmNoaWxkcmVuTWFwW2dyb3VwS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHRHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0R3JvdXAgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkOiBncm91cENvbHVtbi5jb2xJZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpbmRleC0tLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBncm91cEtleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZGVkOiB0aGlzLmlzRXhwYW5kZWQoZXhwYW5kQnlEZWZhdWx0LCBjdXJyZW50TGV2ZWwpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIHRvcCBtb3N0IGxldmVsLCBwYXJlbnQgaXMgbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50OiBjdXJyZW50R3JvdXAgPT09IHRvcE1vc3RHcm91cCA/IG51bGwgOiBjdXJyZW50R3JvdXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDaGlsZHJlbkNvdW50OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV2ZWw6IGN1cnJlbnRHcm91cC5sZXZlbCArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbk1hcDoge30gLy90aGlzIGlzIGEgdGVtcG9yYXJ5IG1hcCwgd2UgcmVtb3ZlIGF0IHRoZSBlbmQgb2YgdGhpcyBtZXRob2RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLmNoaWxkcmVuTWFwW2dyb3VwS2V5XSA9IG5leHRHcm91cDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudEdyb3VwLmNoaWxkcmVuLnB1c2gobmV4dEdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsR3JvdXBzLnB1c2gobmV4dEdyb3VwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG5leHRHcm91cC5hbGxDaGlsZHJlbkNvdW50Kys7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50TGV2ZWwgPT0gbGV2ZWxUb0luc2VydENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50ID0gbmV4dEdyb3VwID09PSB0b3BNb3N0R3JvdXAgPyBudWxsIDogbmV4dEdyb3VwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0R3JvdXAuY2hpbGRyZW4ucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50R3JvdXAgPSBuZXh0R3JvdXA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9yZW1vdmUgdGhlIHRlbXBvcmFyeSBtYXBcclxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGFsbEdyb3Vwcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGFsbEdyb3Vwc1tpXS5jaGlsZHJlbk1hcDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRvcE1vc3RHcm91cC5jaGlsZHJlbjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzRXhwYW5kZWQoZXhwYW5kQnlEZWZhdWx0OiBhbnksIGxldmVsOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBleHBhbmRCeURlZmF1bHQgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGV2ZWwgPCBleHBhbmRCeURlZmF1bHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZXhwYW5kQnlEZWZhdWx0ID09PSB0cnVlIHx8IGV4cGFuZEJ5RGVmYXVsdCA9PT0gJ3RydWUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vY29uc3RhbnRzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2dyb3VwQ3JlYXRvci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9leHBhbmRDcmVhdG9yLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIHV0aWxzID0gVXRpbHM7XHJcbiAgICB2YXIgY29uc3RhbnRzID0gQ29uc3RhbnRzO1xyXG4gICAgdmFyIGdyb3VwQ3JlYXRvciA9IEdyb3VwQ3JlYXRvci5nZXRJbnN0YW5jZSgpO1xyXG4gICAgdmFyIGV4cGFuZENyZWF0b3IgPSBFeHBhbmRDcmVhdG9yLmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEluTWVtb3J5Um93Q29udHJvbGxlciB7XHJcblxyXG4gICAgICAgIGdyaWRPcHRpb25zV3JhcHBlcjogYW55O1xyXG4gICAgICAgIGNvbHVtbk1vZGVsOiBhbnk7XHJcbiAgICAgICAgYW5ndWxhckdyaWQ6IGFueTtcclxuICAgICAgICBmaWx0ZXJNYW5hZ2VyOiBhbnk7XHJcbiAgICAgICAgJHNjb3BlOiBhbnk7XHJcbiAgICAgICAgZXhwcmVzc2lvblNlcnZpY2U6IGFueTtcclxuXHJcbiAgICAgICAgYWxsUm93czogYW55O1xyXG4gICAgICAgIHJvd3NBZnRlckdyb3VwOiBhbnk7XHJcbiAgICAgICAgcm93c0FmdGVyRmlsdGVyOiBhbnk7XHJcbiAgICAgICAgcm93c0FmdGVyU29ydDogYW55O1xyXG4gICAgICAgIHJvd3NBZnRlck1hcDogYW55O1xyXG4gICAgICAgIG1vZGVsOiBhbnk7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZU1vZGVsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbml0KGdyaWRPcHRpb25zV3JhcHBlcjogYW55LCBjb2x1bW5Nb2RlbDogYW55LCBhbmd1bGFyR3JpZDogYW55LCBmaWx0ZXJNYW5hZ2VyOiBhbnksXHJcbiAgICAgICAgICAgICAkc2NvcGU6IGFueSwgZXhwcmVzc2lvblNlcnZpY2U6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRPcHRpb25zV3JhcHBlciA9IGdyaWRPcHRpb25zV3JhcHBlcjtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5Nb2RlbCA9IGNvbHVtbk1vZGVsO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ3VsYXJHcmlkID0gYW5ndWxhckdyaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XHJcbiAgICAgICAgICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xyXG4gICAgICAgICAgICB0aGlzLmV4cHJlc3Npb25TZXJ2aWNlID0gZXhwcmVzc2lvblNlcnZpY2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFsbFJvd3MgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnJvd3NBZnRlckdyb3VwID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5yb3dzQWZ0ZXJGaWx0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnJvd3NBZnRlclNvcnQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnJvd3NBZnRlck1hcCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHJpdmF0ZVxyXG4gICAgICAgIGNyZWF0ZU1vZGVsKCkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzIG1ldGhvZCBpcyBpbXBsZW1lbnRlZCBieSB0aGUgaW5NZW1vcnkgbW9kZWwgb25seSxcclxuICAgICAgICAgICAgICAgIC8vIGl0IGdpdmVzIHRoZSB0b3AgbGV2ZWwgb2YgdGhlIHNlbGVjdGlvbi4gdXNlZCBieSB0aGUgc2VsZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAvLyBjb250cm9sbGVyLCB3aGVuIGl0IG5lZWRzIHRvIGRvIGEgZnVsbCB0cmF2ZXJzYWxcclxuICAgICAgICAgICAgICAgIGdldFRvcExldmVsTm9kZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5yb3dzQWZ0ZXJHcm91cDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRWaXJ0dWFsUm93OiBmdW5jdGlvbiAoaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnJvd3NBZnRlck1hcFtpbmRleF07XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0VmlydHVhbFJvd0NvdW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQucm93c0FmdGVyTWFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnJvd3NBZnRlck1hcC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZvckVhY2hJbk1lbW9yeTogZnVuY3Rpb24gKGNhbGxiYWNrOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmZvckVhY2hJbk1lbW9yeShjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljXHJcbiAgICAgICAgZ2V0TW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbi8vIHB1YmxpY1xyXG4gICAgICAgIGZvckVhY2hJbk1lbW9yeShjYWxsYmFjazogYW55KSB7XHJcblxyXG4gICAgICAgICAgICAvLyBpdGVyYXRlcyB0aHJvdWdoIGVhY2ggaXRlbSBpbiBtZW1vcnksIGFuZCBjYWxscyB0aGUgY2FsbGJhY2sgZnVuY3Rpb25cclxuICAgICAgICAgICAgZnVuY3Rpb24gZG9DYWxsYmFjayhsaXN0OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpdGVtID0gbGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soaXRlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmdyb3VwICYmIGl0ZW0uZ3JvdXAuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvQ2FsbGJhY2soaXRlbS5ncm91cC5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvQ2FsbGJhY2sodGhpcy5yb3dzQWZ0ZXJHcm91cCk7XHJcbiAgICAgICAgfVxyXG5cclxuLy8gcHVibGljXHJcbiAgICAgICAgdXBkYXRlTW9kZWwoc3RlcDogYW55KSB7XHJcblxyXG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaCBpbiBiZWxvdyBzd2l0Y2ggaXMgb24gcHVycG9zZVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHN0ZXApIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLlNURVBfRVZFUllUSElORzpcclxuICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLlNURVBfRklMVEVSOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9GaWx0ZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvQWdncmVnYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIGNvbnN0YW50cy5TVEVQX1NPUlQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb1NvcnQoKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLlNURVBfTUFQOlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9Hcm91cE1hcHBpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRNb2RlbFVwZGF0ZWQoKSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0TW9kZWxVcGRhdGVkKCkoKTtcclxuICAgICAgICAgICAgICAgIHZhciAkc2NvcGUgPSB0aGlzLiRzY29wZTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbi8vIHByaXZhdGVcclxuICAgICAgICBkZWZhdWx0R3JvdXBBZ2dGdW5jdGlvbkZhY3RvcnkodmFsdWVDb2x1bW5zOiBhbnksIHZhbHVlS2V5czogYW55KSB7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZ3JvdXBBZ2dGdW5jdGlvbihyb3dzOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gPGFueT57fTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVLZXlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZUtleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlS2V5ID0gdmFsdWVLZXlzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhdCB0aGlzIHBvaW50LCBpZiBubyB2YWx1ZXMgd2VyZSBudW1iZXJzLCB0aGUgcmVzdWx0IGlzIG51bGwgKG5vdCB6ZXJvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRbdmFsdWVLZXldID0gYWdncmVnYXRlQ29sdW1uKHJvd3MsIGNvbnN0YW50cy5TVU0sIHZhbHVlS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlQ29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWVDb2x1bW5zLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZUNvbHVtbiA9IHZhbHVlQ29sdW1uc1tqXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbEtleSA9IHZhbHVlQ29sdW1uLmNvbERlZi5maWVsZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXQgdGhpcyBwb2ludCwgaWYgbm8gdmFsdWVzIHdlcmUgbnVtYmVycywgdGhlIHJlc3VsdCBpcyBudWxsIChub3QgemVybylcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2NvbEtleV0gPSBhZ2dyZWdhdGVDb2x1bW4ocm93cywgdmFsdWVDb2x1bW4uYWdnRnVuYywgY29sS2V5KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFnZ3JlZ2F0ZUNvbHVtbihyb3dzOiBhbnksIGFnZ0Z1bmM6IGFueSwgY29sS2V5OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHRGb3JDb2x1bW46IGFueSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gcm93c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0NvbHVtblZhbHVlID0gcm93LmRhdGFbY29sS2V5XTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGluY2x1ZGUgaWYgdGhlIHZhbHVlIGlzIGEgbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzQ29sdW1uVmFsdWUgPT09ICdudW1iZXInKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFnZ0Z1bmMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLlNVTSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Rm9yQ29sdW1uICs9IHRoaXNDb2x1bW5WYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLk1JTiA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEZvckNvbHVtbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRGb3JDb2x1bW4gPSB0aGlzQ29sdW1uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRGb3JDb2x1bW4gPiB0aGlzQ29sdW1uVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Rm9yQ29sdW1uID0gdGhpc0NvbHVtblZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgY29uc3RhbnRzLk1BWCA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdEZvckNvbHVtbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHRGb3JDb2x1bW4gPSB0aGlzQ29sdW1uVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyZXN1bHRGb3JDb2x1bW4gPCB0aGlzQ29sdW1uVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0Rm9yQ29sdW1uID0gdGhpc0NvbHVtblZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0Rm9yQ29sdW1uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgZ2V0VmFsdWUoZGF0YTogYW55LCBjb2xEZWY6IGFueSwgbm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBhcGkgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRBcGkoKTtcclxuICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgICAgIHJldHVybiB1dGlscy5nZXRWYWx1ZSh0aGlzLmV4cHJlc3Npb25TZXJ2aWNlLCBkYXRhLCBjb2xEZWYsIG5vZGUsIGFwaSwgY29udGV4dCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwdWJsaWMgLSBpdCdzIHBvc3NpYmxlIHRvIHJlY29tcHV0ZSB0aGUgYWdncmVnYXRlIHdpdGhvdXQgZG9pbmcgdGhlIG90aGVyIHBhcnRzXHJcbiAgICAgICAgZG9BZ2dyZWdhdGUoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZ3JvdXBBZ2dGdW5jdGlvbiA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEdyb3VwQWdnRnVuY3Rpb24oKTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBncm91cEFnZ0Z1bmN0aW9uID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5Q3JlYXRlQWdnRGF0YSh0aGlzLnJvd3NBZnRlckZpbHRlciwgZ3JvdXBBZ2dGdW5jdGlvbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUNvbHVtbnMgPSB0aGlzLmNvbHVtbk1vZGVsLmdldFZhbHVlQ29sdW1ucygpO1xyXG4gICAgICAgICAgICB2YXIgdmFsdWVLZXlzID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0R3JvdXBBZ2dGaWVsZHMoKTtcclxuICAgICAgICAgICAgaWYgKCh2YWx1ZUNvbHVtbnMgJiYgdmFsdWVDb2x1bW5zLmxlbmd0aCA+IDApIHx8ICh2YWx1ZUtleXMgJiYgdmFsdWVLZXlzLmxlbmd0aCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGVmYXVsdEFnZ0Z1bmN0aW9uID0gdGhpcy5kZWZhdWx0R3JvdXBBZ2dGdW5jdGlvbkZhY3RvcnkodmFsdWVDb2x1bW5zLCB2YWx1ZUtleXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWN1cnNpdmVseUNyZWF0ZUFnZ0RhdGEodGhpcy5yb3dzQWZ0ZXJGaWx0ZXIsIGRlZmF1bHRBZ2dGdW5jdGlvbik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBubyBhZ2cgZGF0YSwgbmVlZCB0byBjbGVhciBvdXQgYW55IHByZXZpb3VzIGl0ZW1zLCB3aGVuIGNhbiBiZSBsZWZ0IGJlaGluZFxyXG4gICAgICAgICAgICAgICAgLy8gaWYgdXNlIGlzIGNyZWF0aW5nIC8gcmVtb3ZpbmcgY29sdW1ucyB1c2luZyB0aGUgdG9vbCBwYW5lbC5cclxuICAgICAgICAgICAgICAgIC8vIG9uZSBleGNlcHRpb24gLSBkb24ndCBkbyB0aGlzIGlmIGFscmVhZHkgZ3JvdXBlZCwgYXMgdGhpcyBicmVha3MgdGhlIEZpbGUgRXhwbG9yZXIgZXhhbXBsZSEhXHJcbiAgICAgICAgICAgICAgICAvLyB0byBmaXggYW5vdGhlciBkYXkgLSBob3cgdG8gd2UgcmVzZXQgd2hlbiB0aGUgdXNlciBwcm92aWRlZCB0aGUgZGF0YT8/XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93c0FscmVhZHlHcm91cGVkKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5Q2xlYXJBZ2dEYXRhKHRoaXMucm93c0FmdGVyRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHVibGljXHJcbiAgICAgICAgZXhwYW5kT3JDb2xsYXBzZUFsbChleHBhbmQ6IGFueSwgcm93Tm9kZXM6IGFueSkge1xyXG4gICAgICAgICAgICAvLyBpZiBmaXJzdCBjYWxsIGluIHJlY3Vyc2lvbiwgd2Ugc2V0IGxpc3QgdG8gcGFyZW50IGxpc3RcclxuICAgICAgICAgICAgaWYgKHJvd05vZGVzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByb3dOb2RlcyA9IHRoaXMucm93c0FmdGVyR3JvdXA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghcm93Tm9kZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgcm93Tm9kZXMuZm9yRWFjaChmdW5jdGlvbiAobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZXhwYW5kZWQgPSBleHBhbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZXhwYW5kT3JDb2xsYXBzZUFsbChleHBhbmQsIG5vZGUuY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICByZWN1cnNpdmVseUNsZWFyQWdnRGF0YShub2RlczogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG5vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhZ2cgZnVuY3Rpb24gbmVlZHMgdG8gc3RhcnQgYXQgdGhlIGJvdHRvbSwgc28gdHJhdmVyc2UgZmlyc3RcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5Q2xlYXJBZ2dEYXRhKG5vZGUuY2hpbGRyZW5BZnRlckZpbHRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5kYXRhID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJpdmF0ZVxyXG4gICAgICAgIHJlY3Vyc2l2ZWx5Q3JlYXRlQWdnRGF0YShub2RlczogYW55LCBncm91cEFnZ0Z1bmN0aW9uOiBhbnkpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFnZyBmdW5jdGlvbiBuZWVkcyB0byBzdGFydCBhdCB0aGUgYm90dG9tLCBzbyB0cmF2ZXJzZSBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjdXJzaXZlbHlDcmVhdGVBZ2dEYXRhKG5vZGUuY2hpbGRyZW5BZnRlckZpbHRlciwgZ3JvdXBBZ2dGdW5jdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYWZ0ZXIgdHJhdmVyc2FsLCB3ZSBjYW4gbm93IGRvIHRoZSBhZ2cgYXQgdGhpcyBsZXZlbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhID0gZ3JvdXBBZ2dGdW5jdGlvbihub2RlLmNoaWxkcmVuQWZ0ZXJGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgd2UgYXJlIGdyb3VwaW5nLCB0aGVuIGl0J3MgcG9zc2libGUgdGhlcmUgaXMgYSBzaWJsaW5nIGZvb3RlclxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIHRoZSBncm91cCwgc28gdXBkYXRlIHRoZSBkYXRhIGhlcmUgYWxzbyBpZiB0aGVyZSBpcyBvbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5zaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2libGluZy5kYXRhID0gZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICBkb1NvcnQoKSB7XHJcbiAgICAgICAgICAgIHZhciBzb3J0aW5nOiBhbnk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiB0aGUgc29ydGluZyBpcyBhbHJlYWR5IGRvbmUgYnkgdGhlIHNlcnZlciwgdGhlbiB3ZSBzaG91bGQgbm90IGRvIGl0IGhlcmVcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzRW5hYmxlU2VydmVyU2lkZVNvcnRpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgc29ydGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9zZWUgaWYgdGhlcmUgaXMgYSBjb2wgd2UgYXJlIHNvcnRpbmcgYnlcclxuICAgICAgICAgICAgICAgIHZhciBzb3J0aW5nT3B0aW9ucyA9IDxhbnk+W107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsLmdldEFsbENvbHVtbnMoKS5mb3JFYWNoKGZ1bmN0aW9uIChjb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2x1bW4uc29ydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXNjZW5kaW5nID0gY29sdW1uLnNvcnQgPT09IGNvbnN0YW50cy5BU0M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRpbmdPcHRpb25zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW52ZXJ0ZXI6IGFzY2VuZGluZyA/IDEgOiAtMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRlZEF0OiBjb2x1bW4uc29ydGVkQXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xEZWY6IGNvbHVtbi5jb2xEZWZcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29ydGluZ09wdGlvbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNvcnRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcm93Tm9kZXNSZWFkeUZvclNvcnRpbmcgPSB0aGlzLnJvd3NBZnRlckZpbHRlciA/IHRoaXMucm93c0FmdGVyRmlsdGVyLnNsaWNlKDApIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIGlmIChzb3J0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBUaGUgY29sdW1ucyBhcmUgdG8gYmUgc29ydGVkIGluIHRoZSBvcmRlciB0aGF0IHRoZSB1c2VyIHNlbGVjdGVkIHRoZW06XHJcbiAgICAgICAgICAgICAgICBzb3J0aW5nT3B0aW9ucy5zb3J0KGZ1bmN0aW9uIChvcHRpb25BOiBhbnksIG9wdGlvbkI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25BLnNvcnRlZEF0IC0gb3B0aW9uQi5zb3J0ZWRBdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3J0TGlzdChyb3dOb2Rlc1JlYWR5Rm9yU29ydGluZywgc29ydGluZ09wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgbm8gc29ydGluZywgc2V0IGFsbCBncm91cCBjaGlsZHJlbiBhZnRlciBzb3J0IHRvIHRoZSBvcmlnaW5hbCBsaXN0LlxyXG4gICAgICAgICAgICAgICAgLy8gbm90ZTogaXQgaXMgaW1wb3J0YW50IHRvIGRvIHRoaXMsIGV2ZW4gaWYgZG9pbmcgc2VydmVyIHNpZGUgc29ydGluZyxcclxuICAgICAgICAgICAgICAgIC8vIHRvIGFsbG93IHRoZSByb3dzIHRvIHBhc3MgdG8gdGhlIG5leHQgc3RhZ2UgKGllIHNldCB0aGUgbm9kZSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgLy8gY2hpbGRyZW5BZnRlclNvcnQpXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5UmVzZXRTb3J0KHJvd05vZGVzUmVhZHlGb3JTb3J0aW5nKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yb3dzQWZ0ZXJTb3J0ID0gcm93Tm9kZXNSZWFkeUZvclNvcnRpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgcmVjdXJzaXZlbHlSZXNldFNvcnQocm93Tm9kZXM6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoIXJvd05vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSByb3dOb2Rlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBpdGVtID0gcm93Tm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5ncm91cCAmJiBpdGVtLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5jaGlsZHJlbkFmdGVyU29ydCA9IGl0ZW0uY2hpbGRyZW5BZnRlckZpbHRlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5UmVzZXRTb3J0KGl0ZW0uY2hpbGRyZW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgc29ydExpc3Qobm9kZXM6IGFueSwgc29ydE9wdGlvbnM6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgLy8gc29ydCBhbnkgZ3JvdXBzIHJlY3Vyc2l2ZWx5XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7IC8vIGNyaXRpY2FsIHNlY3Rpb24sIG5vIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmdcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCAmJiBub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5jaGlsZHJlbkFmdGVyU29ydCA9IG5vZGUuY2hpbGRyZW5BZnRlckZpbHRlci5zbGljZSgwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvcnRMaXN0KG5vZGUuY2hpbGRyZW5BZnRlclNvcnQsIHNvcnRPcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGFyZShvYmpBOiBhbnksIG9iakI6IGFueSwgY29sRGVmOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZUEgPSB0aGF0LmdldFZhbHVlKG9iakEuZGF0YSwgY29sRGVmLCBvYmpBKTtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZUIgPSB0aGF0LmdldFZhbHVlKG9iakIuZGF0YSwgY29sRGVmLCBvYmpCKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb2xEZWYuY29tcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgY29tcGFyYXRvciBwcm92aWRlZCwgdXNlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbERlZi5jb21wYXJhdG9yKHZhbHVlQSwgdmFsdWVCLCBvYmpBLCBvYmpCKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vdGhlcndpc2UgZG8gb3VyIG93biBjb21wYXJpc29uXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWxzLmRlZmF1bHRDb21wYXJhdG9yKHZhbHVlQSwgdmFsdWVCKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbm9kZXMuc29ydChmdW5jdGlvbiAob2JqQTogYW55LCBvYmpCOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgY29sdW1ucywgcmV0dXJuIHRoZSBmaXJzdCB0aGF0IGRvZXNuJ3QgbWF0Y2hcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBzb3J0T3B0aW9ucy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzb3J0T3B0aW9uID0gc29ydE9wdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBhcmVkID0gY29tcGFyZShvYmpBLCBvYmpCLCBzb3J0T3B0aW9uLmNvbERlZik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wYXJlZCAqIHNvcnRPcHRpb24uaW52ZXJ0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gQWxsIG1hdGNoZWQsIHRoZXNlIGFyZSBpZGVudGljYWwgYXMgZmFyIGFzIHRoZSBzb3J0IGlzIGNvbmNlcm5lZDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICBkb0dyb3VwaW5nKCkge1xyXG4gICAgICAgICAgICB2YXIgcm93c0FmdGVyR3JvdXA6IGFueTtcclxuICAgICAgICAgICAgdmFyIGdyb3VwZWRDb2xzID0gdGhpcy5jb2x1bW5Nb2RlbC5nZXRHcm91cGVkQ29sdW1ucygpO1xyXG4gICAgICAgICAgICB2YXIgcm93c0FscmVhZHlHcm91cGVkID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNSb3dzQWxyZWFkeUdyb3VwZWQoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBkb2luZ0dyb3VwaW5nID0gIXJvd3NBbHJlYWR5R3JvdXBlZCAmJiBncm91cGVkQ29scy5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRvaW5nR3JvdXBpbmcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBleHBhbmRCeURlZmF1bHQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRHcm91cERlZmF1bHRFeHBhbmRlZCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwaSA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFwaSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRDb250ZXh0KCk7XHJcbiAgICAgICAgICAgICAgICByb3dzQWZ0ZXJHcm91cCA9IGdyb3VwQ3JlYXRvci5ncm91cCh0aGlzLmFsbFJvd3MsIGdyb3VwZWRDb2xzLCBleHBhbmRCeURlZmF1bHQsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHByZXNzaW9uU2VydmljZSwgYXBpLCBjb250ZXh0KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJvd3NBZnRlckdyb3VwID0gdGhpcy5hbGxSb3dzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucm93c0FmdGVyR3JvdXAgPSByb3dzQWZ0ZXJHcm91cDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICBkb0V4cGFuZGluZygpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzRG9JbnRlcm5hbEV4cGFuZGluZygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93c0FscmVhZHlFeHBhbmRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzOiBhbnlbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgKHRoaXMuYWxsUm93c3x8W10pLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdGhpcy5hbGxSb3dzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogbm9kZS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldmVsOiBub2RlLmxldmVsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWxsUm93cyA9IG5vZGVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdyaWRPcHRpb25zLnJvd3NBbHJlYWR5R3JvdXBlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd3NBZnRlckdyb3VwID0gZXhwYW5kQ3JlYXRvci5ncm91cCh0aGlzLmFsbFJvd3MsIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEV4cGFuZGVkUm93c0RlZmF1bHQoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICBkb0ZpbHRlcigpIHtcclxuICAgICAgICAgICAgdmFyIGRvaW5nRmlsdGVyOiBhbnk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNFbmFibGVTZXJ2ZXJTaWRlRmlsdGVyKCkpIHtcclxuICAgICAgICAgICAgICAgIGRvaW5nRmlsdGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcXVpY2tGaWx0ZXJQcmVzZW50ID0gdGhpcy5hbmd1bGFyR3JpZC5nZXRRdWlja0ZpbHRlcigpICE9PSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFkdmFuY2VkRmlsdGVyUHJlc2VudCA9IHRoaXMuZmlsdGVyTWFuYWdlci5pc0ZpbHRlclByZXNlbnQoKTtcclxuICAgICAgICAgICAgICAgIGRvaW5nRmlsdGVyID0gcXVpY2tGaWx0ZXJQcmVzZW50IHx8IGFkdmFuY2VkRmlsdGVyUHJlc2VudDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHJvd3NBZnRlckZpbHRlcjogYW55O1xyXG4gICAgICAgICAgICBpZiAoZG9pbmdGaWx0ZXIpIHtcclxuICAgICAgICAgICAgICAgIHJvd3NBZnRlckZpbHRlciA9IHRoaXMuZmlsdGVySXRlbXModGhpcy5yb3dzQWZ0ZXJHcm91cCwgcXVpY2tGaWx0ZXJQcmVzZW50LCBhZHZhbmNlZEZpbHRlclByZXNlbnQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gZG8gaXQgaGVyZVxyXG4gICAgICAgICAgICAgICAgcm93c0FmdGVyRmlsdGVyID0gdGhpcy5yb3dzQWZ0ZXJHcm91cDtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVjdXJzaXZlbHlSZXNldEZpbHRlcih0aGlzLnJvd3NBZnRlckdyb3VwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnJvd3NBZnRlckZpbHRlciA9IHJvd3NBZnRlckZpbHRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICBmaWx0ZXJJdGVtcyhyb3dOb2RlczogYW55LCBxdWlja0ZpbHRlclByZXNlbnQ6IGFueSwgYWR2YW5jZWRGaWx0ZXJQcmVzZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IDxhbnk+W107XHJcblxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHJvd05vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSByb3dOb2Rlc1tpXTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRlYWwgd2l0aCBncm91cFxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRyZW5BZnRlckZpbHRlciA9IHRoaXMuZmlsdGVySXRlbXMobm9kZS5jaGlsZHJlbiwgcXVpY2tGaWx0ZXJQcmVzZW50LCBhZHZhbmNlZEZpbHRlclByZXNlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChub2RlLmNoaWxkcmVuQWZ0ZXJGaWx0ZXIubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFsbENoaWxkcmVuQ291bnQgPSB0aGlzLmdldFRvdGFsQ2hpbGRDb3VudChub2RlLmNoaWxkcmVuQWZ0ZXJGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvZXNSb3dQYXNzRmlsdGVyKG5vZGUsIHF1aWNrRmlsdGVyUHJlc2VudCwgYWR2YW5jZWRGaWx0ZXJQcmVzZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgcmVjdXJzaXZlbHlSZXNldEZpbHRlcihub2RlczogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghbm9kZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG5vZGVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChub2RlLmdyb3VwICYmIG5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLmNoaWxkcmVuQWZ0ZXJGaWx0ZXIgPSBub2RlLmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVjdXJzaXZlbHlSZXNldEZpbHRlcihub2RlLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLmFsbENoaWxkcmVuQ291bnQgPSB0aGlzLmdldFRvdGFsQ2hpbGRDb3VudChub2RlLmNoaWxkcmVuQWZ0ZXJGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgLy8gcm93czogdGhlIHJvd3MgdG8gcHV0IGludG8gdGhlIG1vZGVsXHJcbiAgICAgICAgLy8gZmlyc3RJZDogdGhlIGZpcnN0IGlkIHRvIHVzZSwgdXNlZCBmb3IgcGFnaW5nLCB3aGVyZSB3ZSBhcmUgbm90IG9uIHRoZSBmaXJzdCBwYWdlXHJcbiAgICAgICAgc2V0QWxsUm93cyhyb3dzOiBhbnksIGZpcnN0SWQ/OiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIG5vZGVzOiBhbnk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc1Jvd3NBbHJlYWR5R3JvdXBlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICBub2RlcyA9IHJvd3M7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5Q2hlY2tVc2VyUHJvdmlkZWROb2Rlcyhub2RlcywgbnVsbCwgMCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBwbGFjZSBlYWNoIHJvdyBpbnRvIGEgd3JhcHBlclxyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gPGFueT5bXTtcclxuICAgICAgICAgICAgICAgIGlmIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7IC8vIGNvdWxkIGJlIGxvdHMgb2Ygcm93cywgZG9uJ3QgdXNlIGZ1bmN0aW9uYWwgcHJvZ3JhbW1pbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByb3dzW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgZmlyc3RJZCBwcm92aWRlZCwgdXNlIGl0LCBvdGhlcndpc2Ugc3RhcnQgYXQgMFxyXG4gICAgICAgICAgICB2YXIgZmlyc3RJZFRvVXNlID0gZmlyc3RJZCA/IGZpcnN0SWQgOiAwO1xyXG4gICAgICAgICAgICB0aGlzLnJlY3Vyc2l2ZWx5QWRkSWRUb05vZGVzKG5vZGVzLCBmaXJzdElkVG9Vc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmFsbFJvd3MgPSBub2RlcztcclxuXHJcbiAgICAgICAgICAgIC8vIGFnZ3JlZ2F0ZSBoZXJlLCBzbyBmaWx0ZXJzIGhhdmUgdGhlIGFnZyBkYXRhIHJlYWR5XHJcbiAgICAgICAgICAgIHRoaXMuZG9Hcm91cGluZygpO1xyXG4gICAgICAgICAgICAvLyBwcm9jZXNzIGhlcmUgdGhlIGV4cGFuZGVkXHJcbiAgICAgICAgICAgIHRoaXMuZG9FeHBhbmRpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGFkZCBpbiBpbmRleCAtIHRoaXMgaXMgdXNlZCBieSB0aGUgc2VsZWN0aW9uQ29udHJvbGxlciAtIHNvIHF1aWNrXHJcbiAgICAgICAgLy8gdG8gbG9vayB1cCBzZWxlY3RlZCByb3dzXHJcbiAgICAgICAgcmVjdXJzaXZlbHlBZGRJZFRvTm9kZXMobm9kZXM6IGFueSwgaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoIW5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlc1tpXTtcclxuICAgICAgICAgICAgICAgIG5vZGUuaWQgPSBpbmRleCsrO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXAgJiYgbm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gdGhpcy5yZWN1cnNpdmVseUFkZElkVG9Ob2Rlcyhub2RlLmNoaWxkcmVuLCBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gYWRkIGluIGluZGV4IC0gdGhpcyBpcyB1c2VkIGJ5IHRoZSBzZWxlY3Rpb25Db250cm9sbGVyIC0gc28gcXVpY2tcclxuICAgICAgICAvLyB0byBsb29rIHVwIHNlbGVjdGVkIHJvd3NcclxuICAgICAgICByZWN1cnNpdmVseUNoZWNrVXNlclByb3ZpZGVkTm9kZXMobm9kZXM6IGFueSwgcGFyZW50OiBhbnksIGxldmVsOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCFub2Rlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBub2RlID0gbm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBub2RlLmxldmVsID0gbGV2ZWw7XHJcbiAgICAgICAgICAgICAgICBpZiAobm9kZS5ncm91cCAmJiBub2RlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWN1cnNpdmVseUNoZWNrVXNlclByb3ZpZGVkTm9kZXMobm9kZS5jaGlsZHJlbiwgbm9kZSwgbGV2ZWwgKyAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJpdmF0ZVxyXG4gICAgICAgIGdldFRvdGFsQ2hpbGRDb3VudChyb3dOb2RlczogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gcm93Tm9kZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHJvd05vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3VudCArPSBpdGVtLmFsbENoaWxkcmVuQ291bnQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvdW50Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNvdW50O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJpdmF0ZVxyXG4gICAgICAgIGRvR3JvdXBNYXBwaW5nKCkge1xyXG4gICAgICAgICAgICAvLyBldmVuIGlmIG5vdCBkb2luZyBncm91cGluZywgd2UgZG8gdGhlIG1hcHBpbmcsIGFzIHRoZSBjbGllbnQgbWlnaHRcclxuICAgICAgICAgICAgLy8gb2YgcGFzc2VkIGluIGRhdGEgdGhhdCBhbHJlYWR5IGhhcyBhIGdyb3VwaW5nIGluIGl0IHNvbWV3aGVyZVxyXG4gICAgICAgICAgICB2YXIgcm93c0FmdGVyTWFwID0gPGFueT5bXTtcclxuICAgICAgICAgICAgdGhpcy5hZGRUb01hcChyb3dzQWZ0ZXJNYXAsIHRoaXMucm93c0FmdGVyU29ydCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93c0FmdGVyTWFwID0gcm93c0FmdGVyTWFwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJpdmF0ZVxyXG4gICAgICAgIGFkZFRvTWFwKG1hcHBlZERhdGE6IGFueSwgb3JpZ2luYWxOb2RlczogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghb3JpZ2luYWxOb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb3JpZ2luYWxOb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBvcmlnaW5hbE5vZGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgbWFwcGVkRGF0YS5wdXNoKG5vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuZ3JvdXAgJiYgbm9kZS5leHBhbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVG9NYXAobWFwcGVkRGF0YSwgbm9kZS5jaGlsZHJlbkFmdGVyU29ydCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHB1dCBhIGZvb3RlciBpbiBpZiB1c2VyIGlzIGxvb2tpbmcgZm9yIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzR3JvdXBJbmNsdWRlRm9vdGVyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvb3Rlck5vZGUgPSB0aGlzLmNyZWF0ZUZvb3Rlck5vZGUobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBlZERhdGEucHVzaChmb290ZXJOb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByaXZhdGVcclxuICAgICAgICBjcmVhdGVGb290ZXJOb2RlKGdyb3VwTm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBmb290ZXJOb2RlID0gPGFueT57fTtcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoZ3JvdXBOb2RlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgIGZvb3Rlck5vZGVba2V5XSA9IGdyb3VwTm9kZVtrZXldO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZm9vdGVyTm9kZS5mb290ZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAvLyBnZXQgYm90aCBoZWFkZXIgYW5kIGZvb3RlciB0byByZWZlcmVuY2UgZWFjaCBvdGhlciBhcyBzaWJsaW5ncy4gdGhpcyBpcyBuZXZlciB1bmRvbmUsXHJcbiAgICAgICAgICAgIC8vIG9ubHkgb3ZlcndyaXR0ZW4uIHNvIGlmIGEgZ3JvdXAgaXMgZXhwYW5kZWQsIHRoZW4gY29udHJhY3RlZCwgaXQgd2lsbCBoYXZlIGEgZ2hvc3RcclxuICAgICAgICAgICAgLy8gc2libGluZyAtIGJ1dCB0aGF0J3MgZmluZSwgYXMgd2UgY2FuIGlnbm9yZSB0aGlzIGlmIHRoZSBoZWFkZXIgaXMgY29udHJhY3RlZC5cclxuICAgICAgICAgICAgZm9vdGVyTm9kZS5zaWJsaW5nID0gZ3JvdXBOb2RlO1xyXG4gICAgICAgICAgICBncm91cE5vZGUuc2libGluZyA9IGZvb3Rlck5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBmb290ZXJOb2RlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJpdmF0ZVxyXG4gICAgICAgIGRvZXNSb3dQYXNzRmlsdGVyKG5vZGU6IGFueSwgcXVpY2tGaWx0ZXJQcmVzZW50OiBhbnksIGFkdmFuY2VkRmlsdGVyUHJlc2VudDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vZmlyc3QgdXAsIGNoZWNrIHF1aWNrIGZpbHRlclxyXG4gICAgICAgICAgICBpZiAocXVpY2tGaWx0ZXJQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUucXVpY2tGaWx0ZXJBZ2dyZWdhdGVUZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZ2dyZWdhdGVSb3dGb3JRdWlja0ZpbHRlcihub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChub2RlLnF1aWNrRmlsdGVyQWdncmVnYXRlVGV4dC5pbmRleE9mKHRoaXMuYW5ndWxhckdyaWQuZ2V0UXVpY2tGaWx0ZXIoKSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9xdWljayBmaWx0ZXIgZmFpbHMsIHNvIHNraXAgaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9zZWNvbmQsIGNoZWNrIGFkdmFuY2VkIGZpbHRlclxyXG4gICAgICAgICAgICBpZiAoYWR2YW5jZWRGaWx0ZXJQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZmlsdGVyTWFuYWdlci5kb2VzRmlsdGVyUGFzcyhub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9nb3QgdGhpcyBmYXIsIGFsbCBmaWx0ZXJzIHBhc3NcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBwcml2YXRlXHJcbiAgICAgICAgYWdncmVnYXRlUm93Rm9yUXVpY2tGaWx0ZXIobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBhZ2dyZWdhdGVkVGV4dCA9ICcnO1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uTW9kZWwuZ2V0QWxsQ29sdW1ucygpLmZvckVhY2goZnVuY3Rpb24gKGNvbERlZldyYXBwZXI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGEgPSBub2RlLmRhdGE7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGF0LmdldFZhbHVlKGRhdGEsICBjb2xEZWZXcmFwcGVyLmNvbERlZiwgbm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRlZFRleHQgPSBhZ2dyZWdhdGVkVGV4dCArIHZhbHVlLnRvU3RyaW5nKCkudG9VcHBlckNhc2UoKSArIFwiX1wiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbm9kZS5xdWlja0ZpbHRlckFnZ3JlZ2F0ZVRleHQgPSBhZ2dyZWdhdGVkVGV4dDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuXHJcbi8qXHJcbiAqIFRoaXMgcm93IGNvbnRyb2xsZXIgaXMgdXNlZCBmb3IgaW5maW5pdGUgc2Nyb2xsaW5nIG9ubHkuIEZvciBub3JtYWwgJ2luIG1lbW9yeScgdGFibGUsXHJcbiAqIG9yIHN0YW5kYXJkIHBhZ2luYXRpb24sIHRoZSBpbk1lbW9yeVJvd0NvbnRyb2xsZXIgaXMgdXNlZC5cclxuICovXHJcblxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciB1dGlscyA9IFV0aWxzO1xyXG4gICAgdmFyIGxvZ2dpbmcgPSBmYWxzZTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVmlydHVhbFBhZ2VSb3dDb250cm9sbGVyIHtcclxuXHJcbiAgICAgICAgcm93UmVuZGVyZXI6IGFueTtcclxuICAgICAgICBkYXRhc291cmNlVmVyc2lvbjogYW55O1xyXG4gICAgICAgIGdyaWRPcHRpb25zV3JhcHBlcjogYW55O1xyXG4gICAgICAgIGFuZ3VsYXJHcmlkOiBhbnk7XHJcbiAgICAgICAgZGF0YXNvdXJjZTogYW55O1xyXG4gICAgICAgIHZpcnR1YWxSb3dDb3VudDogYW55O1xyXG4gICAgICAgIGZvdW5kTWF4Um93OiBhbnk7XHJcblxyXG4gICAgICAgIHBhZ2VDYWNoZTogYW55O1xyXG4gICAgICAgIHBhZ2VDYWNoZVNpemU6IGFueTtcclxuXHJcbiAgICAgICAgcGFnZUxvYWRzSW5Qcm9ncmVzczogYW55O1xyXG4gICAgICAgIHBhZ2VMb2Fkc1F1ZXVlZDogYW55O1xyXG4gICAgICAgIHBhZ2VBY2Nlc3NUaW1lczogYW55O1xyXG4gICAgICAgIGFjY2Vzc1RpbWU6IGFueTtcclxuXHJcbiAgICAgICAgbWF4Q29uY3VycmVudERhdGFzb3VyY2VSZXF1ZXN0czogYW55O1xyXG4gICAgICAgIG1heFBhZ2VzSW5DYWNoZTogYW55O1xyXG4gICAgICAgIHBhZ2VTaXplOiBhbnk7XHJcbiAgICAgICAgb3ZlcmZsb3dTaXplOiBhbnk7XHJcblxyXG4gICAgICAgIGluaXQocm93UmVuZGVyZXI6IGFueSwgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnksIGFuZ3VsYXJHcmlkOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dSZW5kZXJlciA9IHJvd1JlbmRlcmVyO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGFzb3VyY2VWZXJzaW9uID0gMDtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQgPSBhbmd1bGFyR3JpZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldERhdGFzb3VyY2UoZGF0YXNvdXJjZTogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YXNvdXJjZSA9IGRhdGFzb3VyY2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWRhdGFzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIG9ubHkgY29udGludWUgaWYgd2UgaGF2ZSBhIHZhbGlkIGRhdGFzb3VyY2UgdG8gd29ya2luZyB3aXRoXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlc2V0KCkge1xyXG4gICAgICAgICAgICAvLyBzZWUgaWYgZGF0YXNvdXJjZSBrbm93cyBob3cgbWFueSByb3dzIHRoZXJlIGFyZVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YXNvdXJjZS5yb3dDb3VudCA9PT0gJ251bWJlcicgJiYgdGhpcy5kYXRhc291cmNlLnJvd0NvdW50ID49IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlydHVhbFJvd0NvdW50ID0gdGhpcy5kYXRhc291cmNlLnJvd0NvdW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3VuZE1heFJvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpcnR1YWxSb3dDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvdW5kTWF4Um93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGluIGNhc2UgYW55IGRhZW1vbiByZXF1ZXN0cyBjb21pbmcgZnJvbSBkYXRhc291cmNlLCB3ZSBrbm93IGl0IGlnbm9yZSB0aGVtXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YXNvdXJjZVZlcnNpb24rKztcclxuXHJcbiAgICAgICAgICAgIC8vIG1hcCBvZiBwYWdlIG51bWJlcnMgdG8gcm93cyBpbiB0aGF0IHBhZ2VcclxuICAgICAgICAgICAgdGhpcy5wYWdlQ2FjaGUgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5wYWdlQ2FjaGVTaXplID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vIGlmIGEgbnVtYmVyIGlzIGluIHRoaXMgYXJyYXksIGl0IG1lYW5zIHdlIGFyZSBwZW5kaW5nIGEgbG9hZCBmcm9tIGl0XHJcbiAgICAgICAgICAgIHRoaXMucGFnZUxvYWRzSW5Qcm9ncmVzcyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VMb2Fkc1F1ZXVlZCA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VBY2Nlc3NUaW1lcyA9IHt9OyAvLyBrZWVwcyBhIHJlY29yZCBvZiB3aGVuIGVhY2ggcGFnZSB3YXMgbGFzdCB2aWV3ZWQsIHVzZWQgZm9yIExSVSBjYWNoZVxyXG4gICAgICAgICAgICB0aGlzLmFjY2Vzc1RpbWUgPSAwOyAvLyByYXRoZXIgdGhhbiB1c2luZyB0aGUgY2xvY2ssIHdlIHVzZSB0aGlzIGNvdW50ZXJcclxuXHJcbiAgICAgICAgICAgIC8vIHRoZSBudW1iZXIgb2YgY29uY3VycmVudCBsb2FkcyB3ZSBhcmUgYWxsb3dlZCB0byB0aGUgc2VydmVyXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhc291cmNlLm1heENvbmN1cnJlbnRSZXF1ZXN0cyA9PT0gJ251bWJlcicgJiYgdGhpcy5kYXRhc291cmNlLm1heENvbmN1cnJlbnRSZXF1ZXN0cyA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWF4Q29uY3VycmVudERhdGFzb3VyY2VSZXF1ZXN0cyA9IHRoaXMuZGF0YXNvdXJjZS5tYXhDb25jdXJyZW50UmVxdWVzdHM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heENvbmN1cnJlbnREYXRhc291cmNlUmVxdWVzdHMgPSAyO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB0aGUgbnVtYmVyIG9mIHBhZ2VzIHRvIGtlZXAgaW4gYnJvd3NlciBjYWNoZVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZGF0YXNvdXJjZS5tYXhQYWdlc0luQ2FjaGUgPT09ICdudW1iZXInICYmIHRoaXMuZGF0YXNvdXJjZS5tYXhQYWdlc0luQ2FjaGUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1heFBhZ2VzSW5DYWNoZSA9IHRoaXMuZGF0YXNvdXJjZS5tYXhQYWdlc0luQ2FjaGU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBudWxsIGlzIGRlZmF1bHQsIG1lYW5zIGRvbid0ICBoYXZlIGFueSBtYXggc2l6ZSBvbiB0aGUgY2FjaGVcclxuICAgICAgICAgICAgICAgIHRoaXMubWF4UGFnZXNJbkNhY2hlID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wYWdlU2l6ZSA9IHRoaXMuZGF0YXNvdXJjZS5wYWdlU2l6ZTsgLy8gdGFrZSBhIGNvcHkgb2YgcGFnZSBzaXplLCB3ZSBkb24ndCB3YW50IGl0IGNoYW5naW5nXHJcbiAgICAgICAgICAgIHRoaXMub3ZlcmZsb3dTaXplID0gdGhpcy5kYXRhc291cmNlLm92ZXJmbG93U2l6ZTsgLy8gdGFrZSBhIGNvcHkgb2YgcGFnZSBzaXplLCB3ZSBkb24ndCB3YW50IGl0IGNoYW5naW5nXHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvTG9hZE9yUXVldWUoMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVOb2Rlc0Zyb21Sb3dzKHBhZ2VOdW1iZXI6IGFueSwgcm93czogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBub2RlczogYW55ID0gW107XHJcbiAgICAgICAgICAgIGlmIChyb3dzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgaiA9IHJvd3MubGVuZ3RoOyBpIDwgajsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZpcnR1YWxSb3dJbmRleCA9IChwYWdlTnVtYmVyICogdGhpcy5wYWdlU2l6ZSkgKyBpO1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByb3dzW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdmlydHVhbFJvd0luZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVtb3ZlRnJvbUxvYWRpbmcocGFnZU51bWJlcjogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMucGFnZUxvYWRzSW5Qcm9ncmVzcy5pbmRleE9mKHBhZ2VOdW1iZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2VMb2Fkc0luUHJvZ3Jlc3Muc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHBhZ2VMb2FkRmFpbGVkKHBhZ2VOdW1iZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUZyb21Mb2FkaW5nKHBhZ2VOdW1iZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrUXVldWVGb3JOZXh0TG9hZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFnZUxvYWRlZChwYWdlTnVtYmVyOiBhbnksIHJvd3M6IGFueSwgbGFzdFJvdzogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMucHV0UGFnZUludG9DYWNoZUFuZFB1cmdlKHBhZ2VOdW1iZXIsIHJvd3MpO1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrTWF4Um93QW5kSW5mb3JtUm93UmVuZGVyZXIocGFnZU51bWJlciwgbGFzdFJvdyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlRnJvbUxvYWRpbmcocGFnZU51bWJlcik7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tRdWV1ZUZvck5leHRMb2FkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwdXRQYWdlSW50b0NhY2hlQW5kUHVyZ2UocGFnZU51bWJlcjogYW55LCByb3dzOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdlQ2FjaGVbcGFnZU51bWJlcl0gPSB0aGlzLmNyZWF0ZU5vZGVzRnJvbVJvd3MocGFnZU51bWJlciwgcm93cyk7XHJcbiAgICAgICAgICAgIHRoaXMucGFnZUNhY2hlU2l6ZSsrO1xyXG4gICAgICAgICAgICBpZiAobG9nZ2luZykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FkZGluZyBwYWdlICcgKyBwYWdlTnVtYmVyKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIG5lZWRUb1B1cmdlID0gdGhpcy5tYXhQYWdlc0luQ2FjaGUgJiYgdGhpcy5tYXhQYWdlc0luQ2FjaGUgPCB0aGlzLnBhZ2VDYWNoZVNpemU7XHJcbiAgICAgICAgICAgIGlmIChuZWVkVG9QdXJnZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gZmluZCB0aGUgTFJVIHBhZ2VcclxuICAgICAgICAgICAgICAgIHZhciB5b3VuZ2VzdFBhZ2VJbmRleCA9IHRoaXMuZmluZExlYXN0UmVjZW50bHlBY2Nlc3NlZFBhZ2UoT2JqZWN0LmtleXModGhpcy5wYWdlQ2FjaGUpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobG9nZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwdXJnaW5nIHBhZ2UgJyArIHlvdW5nZXN0UGFnZUluZGV4ICsgJyBmcm9tIGNhY2hlICcgKyBPYmplY3Qua2V5cyh0aGlzLnBhZ2VDYWNoZSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucGFnZUNhY2hlW3lvdW5nZXN0UGFnZUluZGV4XTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFnZUNhY2hlU2l6ZS0tO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2hlY2tNYXhSb3dBbmRJbmZvcm1Sb3dSZW5kZXJlcihwYWdlTnVtYmVyOiBhbnksIGxhc3RSb3c6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZm91bmRNYXhSb3cpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHdlIGtub3cgdGhlIGxhc3Qgcm93LCB1c2UgaWZcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGFzdFJvdyA9PT0gJ251bWJlcicgJiYgbGFzdFJvdyA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsUm93Q291bnQgPSBsYXN0Um93O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm91bmRNYXhSb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UsIHNlZSBpZiB3ZSBuZWVkIHRvIGFkZCBzb21lIHZpcnR1YWwgcm93c1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzUGFnZVBsdXNCdWZmZXIgPSAoKHBhZ2VOdW1iZXIgKyAxKSAqIHRoaXMucGFnZVNpemUpICsgdGhpcy5vdmVyZmxvd1NpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmlydHVhbFJvd0NvdW50IDwgdGhpc1BhZ2VQbHVzQnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlydHVhbFJvd0NvdW50ID0gdGhpc1BhZ2VQbHVzQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGlmIHJvd0NvdW50IGNoYW5nZXMsIHJlZnJlc2hWaWV3LCBvdGhlcndpc2UganVzdCByZWZyZXNoQWxsVmlydHVhbFJvd3NcclxuICAgICAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIucmVmcmVzaFZpZXcoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIucmVmcmVzaEFsbFZpcnR1YWxSb3dzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzUGFnZUFscmVhZHlMb2FkaW5nKHBhZ2VOdW1iZXI6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5wYWdlTG9hZHNJblByb2dyZXNzLmluZGV4T2YocGFnZU51bWJlcikgPj0gMCB8fCB0aGlzLnBhZ2VMb2Fkc1F1ZXVlZC5pbmRleE9mKHBhZ2VOdW1iZXIpID49IDA7XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkb0xvYWRPclF1ZXVlKHBhZ2VOdW1iZXI6IGFueSkge1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBhbHJlYWR5IHRyaWVkIHRvIGxvYWQgdGhpcyBwYWdlLCB0aGVuIGlnbm9yZSB0aGUgcmVxdWVzdCxcclxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIHNlcnZlciB3b3VsZCBiZSBoaXQgNTAgdGltZXMganVzdCB0byBkaXNwbGF5IG9uZSBwYWdlLCB0aGVcclxuICAgICAgICAgICAgLy8gZmlyc3Qgcm93IHRvIGZpbmQgdGhlIHBhZ2UgbWlzc2luZyBpcyBlbm91Z2guXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUGFnZUFscmVhZHlMb2FkaW5nKHBhZ2VOdW1iZXIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHRyeSB0aGUgcGFnZSBsb2FkIC0gaWYgbm90IGFscmVhZHkgZG9pbmcgYSBsb2FkLCB0aGVuIHdlIGNhbiBnbyBhaGVhZFxyXG4gICAgICAgICAgICBpZiAodGhpcy5wYWdlTG9hZHNJblByb2dyZXNzLmxlbmd0aCA8IHRoaXMubWF4Q29uY3VycmVudERhdGFzb3VyY2VSZXF1ZXN0cykge1xyXG4gICAgICAgICAgICAgICAgLy8gZ28gYWhlYWQsIGxvYWQgdGhlIHBhZ2VcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFBhZ2UocGFnZU51bWJlcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBvdGhlcndpc2UsIHF1ZXVlIHRoZSByZXF1ZXN0XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFRvUXVldWVBbmRQdXJnZVF1ZXVlKHBhZ2VOdW1iZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRUb1F1ZXVlQW5kUHVyZ2VRdWV1ZShwYWdlTnVtYmVyOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGxvZ2dpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdxdWV1ZWluZyAnICsgcGFnZU51bWJlciArICcgLSAnICsgdGhpcy5wYWdlTG9hZHNRdWV1ZWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGFnZUxvYWRzUXVldWVkLnB1c2gocGFnZU51bWJlcik7XHJcblxyXG4gICAgICAgICAgICAvLyBzZWUgaWYgdGhlcmUgYXJlIG1vcmUgcGFnZXMgcXVldWVkIHRoYXQgYXJlIGFjdHVhbGx5IGluIG91ciBjYWNoZSwgaWYgc28gdGhlcmUgaXNcclxuICAgICAgICAgICAgLy8gbm8gcG9pbnQgaW4gbG9hZGluZyB0aGVtIGFsbCBhcyBzb21lIHdpbGwgYmUgcHVyZ2VkIGFzIHNvb24gYXMgbG9hZGVkXHJcbiAgICAgICAgICAgIHZhciBuZWVkVG9QdXJnZSA9IHRoaXMubWF4UGFnZXNJbkNhY2hlICYmIHRoaXMubWF4UGFnZXNJbkNhY2hlIDwgdGhpcy5wYWdlTG9hZHNRdWV1ZWQubGVuZ3RoO1xyXG4gICAgICAgICAgICBpZiAobmVlZFRvUHVyZ2UpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZpbmQgdGhlIExSVSBwYWdlXHJcbiAgICAgICAgICAgICAgICB2YXIgeW91bmdlc3RQYWdlSW5kZXggPSB0aGlzLmZpbmRMZWFzdFJlY2VudGx5QWNjZXNzZWRQYWdlKHRoaXMucGFnZUxvYWRzUXVldWVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobG9nZ2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkZS1xdWV1ZWluZyAnICsgcGFnZU51bWJlciArICcgLSAnICsgdGhpcy5wYWdlTG9hZHNRdWV1ZWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBpbmRleFRvUmVtb3ZlID0gdGhpcy5wYWdlTG9hZHNRdWV1ZWQuaW5kZXhPZih5b3VuZ2VzdFBhZ2VJbmRleCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2VMb2Fkc1F1ZXVlZC5zcGxpY2UoaW5kZXhUb1JlbW92ZSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbmRMZWFzdFJlY2VudGx5QWNjZXNzZWRQYWdlKHBhZ2VJbmRleGVzOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHlvdW5nZXN0UGFnZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgIHZhciB5b3VuZ2VzdFBhZ2VBY2Nlc3NUaW1lID0gTnVtYmVyLk1BWF9WQUxVRTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICAgICAgcGFnZUluZGV4ZXMuZm9yRWFjaChmdW5jdGlvbiAocGFnZUluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhY2Nlc3NUaW1lVGhpc1BhZ2UgPSB0aGF0LnBhZ2VBY2Nlc3NUaW1lc1twYWdlSW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjY2Vzc1RpbWVUaGlzUGFnZSA8IHlvdW5nZXN0UGFnZUFjY2Vzc1RpbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB5b3VuZ2VzdFBhZ2VBY2Nlc3NUaW1lID0gYWNjZXNzVGltZVRoaXNQYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHlvdW5nZXN0UGFnZUluZGV4ID0gcGFnZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB5b3VuZ2VzdFBhZ2VJbmRleDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNoZWNrUXVldWVGb3JOZXh0TG9hZCgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucGFnZUxvYWRzUXVldWVkLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIHRha2UgZnJvbSB0aGUgZnJvbnQgb2YgdGhlIHF1ZXVlXHJcbiAgICAgICAgICAgICAgICB2YXIgcGFnZVRvTG9hZCA9IHRoaXMucGFnZUxvYWRzUXVldWVkWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWdlTG9hZHNRdWV1ZWQuc3BsaWNlKDAsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChsb2dnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2RlcXVldWVpbmcgJyArIHBhZ2VUb0xvYWQgKyAnIC0gJyArIHRoaXMucGFnZUxvYWRzUXVldWVkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvYWRQYWdlKHBhZ2VUb0xvYWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsb2FkUGFnZShwYWdlTnVtYmVyOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucGFnZUxvYWRzSW5Qcm9ncmVzcy5wdXNoKHBhZ2VOdW1iZXIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHN0YXJ0Um93ID0gcGFnZU51bWJlciAqIHRoaXMucGFnZVNpemU7XHJcbiAgICAgICAgICAgIHZhciBlbmRSb3cgPSAocGFnZU51bWJlciArIDEpICogdGhpcy5wYWdlU2l6ZTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGRhdGFzb3VyY2VWZXJzaW9uQ29weSA9IHRoaXMuZGF0YXNvdXJjZVZlcnNpb247XHJcblxyXG4gICAgICAgICAgICB2YXIgc29ydE1vZGVsOiBhbnk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZVNlcnZlclNpZGVTb3J0aW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHNvcnRNb2RlbCA9IHRoaXMuYW5ndWxhckdyaWQuZ2V0U29ydE1vZGVsKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJNb2RlbDogYW55O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNFbmFibGVTZXJ2ZXJTaWRlRmlsdGVyKCkpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlck1vZGVsID0gdGhpcy5hbmd1bGFyR3JpZC5nZXRGaWx0ZXJNb2RlbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRSb3c6IHN0YXJ0Um93LFxyXG4gICAgICAgICAgICAgICAgZW5kUm93OiBlbmRSb3csXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IHN1Y2Nlc3NDYWxsYmFjayxcclxuICAgICAgICAgICAgICAgIGZhaWxDYWxsYmFjazogZmFpbENhbGxiYWNrLFxyXG4gICAgICAgICAgICAgICAgc29ydE1vZGVsOiBzb3J0TW9kZWwsXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJNb2RlbDogZmlsdGVyTW9kZWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG9sZCB2ZXJzaW9uIG9mIGRhdGFzb3VyY2UgdXNlZFxyXG4gICAgICAgICAgICB2YXIgZ2V0Um93c1BhcmFtcyA9IHV0aWxzLmdldEZ1bmN0aW9uUGFyYW1ldGVycyh0aGlzLmRhdGFzb3VyY2UuZ2V0Um93cyk7XHJcbiAgICAgICAgICAgIGlmIChnZXRSb3dzUGFyYW1zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYWctZ3JpZDogSXQgbG9va3MgbGlrZSB5b3VyIHBhZ2luZyBkYXRhc291cmNlIGlzIG9mIHRoZSBvbGQgdHlwZSwgdGFraW5nIG1vcmUgdGhhbiBvbmUgcGFyYW1ldGVyLicpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhZy1ncmlkOiBGcm9tIGFnLWdyaWQgMS45LjAsIG5vdyB0aGUgZ2V0Um93cyB0YWtlcyBvbmUgcGFyYW1ldGVyLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YXNvdXJjZS5nZXRSb3dzKHBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socm93czogYW55LCBsYXN0Um93SW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQucmVxdWVzdElzRGFlbW9uKGRhdGFzb3VyY2VWZXJzaW9uQ29weSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGF0LnBhZ2VMb2FkZWQocGFnZU51bWJlciwgcm93cywgbGFzdFJvd0luZGV4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmFpbENhbGxiYWNrKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQucmVxdWVzdElzRGFlbW9uKGRhdGFzb3VyY2VWZXJzaW9uQ29weSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGF0LnBhZ2VMb2FkRmFpbGVkKHBhZ2VOdW1iZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuLy8gY2hlY2sgdGhhdCB0aGUgZGF0YXNvdXJjZSBoYXMgbm90IGNoYW5nZWQgc2luY2UgdGhlIGxhdHMgdGltZSB3ZSBkaWQgYSByZXF1ZXN0XHJcbiAgICAgICAgcmVxdWVzdElzRGFlbW9uKGRhdGFzb3VyY2VWZXJzaW9uQ29weTogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFzb3VyY2VWZXJzaW9uICE9PSBkYXRhc291cmNlVmVyc2lvbkNvcHk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRWaXJ0dWFsUm93KHJvd0luZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHJvd0luZGV4ID4gdGhpcy52aXJ0dWFsUm93Q291bnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFnZU51bWJlciA9IE1hdGguZmxvb3Iocm93SW5kZXggLyB0aGlzLnBhZ2VTaXplKTtcclxuICAgICAgICAgICAgdmFyIHBhZ2UgPSB0aGlzLnBhZ2VDYWNoZVtwYWdlTnVtYmVyXTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZvciBMUlUgY2FjaGUsIHRyYWNrIHdoZW4gdGhpcyBwYWdlIHdhcyBsYXN0IGhpdFxyXG4gICAgICAgICAgICB0aGlzLnBhZ2VBY2Nlc3NUaW1lc1twYWdlTnVtYmVyXSA9IHRoaXMuYWNjZXNzVGltZSsrO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFwYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvTG9hZE9yUXVldWUocGFnZU51bWJlcik7XHJcbiAgICAgICAgICAgICAgICAvLyByZXR1cm4gYmFjayBhbiBlbXB0eSByb3csIHNvIHRhYmxlIGNhbiBhdCBsZWFzdCByZW5kZXIgZW1wdHkgY2VsbHNcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge30sXHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHJvd0luZGV4XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4SW5UaGlzUGFnZSA9IHJvd0luZGV4ICUgdGhpcy5wYWdlU2l6ZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYWdlW2luZGV4SW5UaGlzUGFnZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvckVhY2hJbk1lbW9yeShjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBwYWdlS2V5cyA9IE9iamVjdC5rZXlzKHRoaXMucGFnZUNhY2hlKTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWdlS2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBhZ2VLZXkgPSBwYWdlS2V5c1tpXTtcclxuICAgICAgICAgICAgICAgIHZhciBwYWdlID0gdGhpcy5wYWdlQ2FjaGVbcGFnZUtleV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhZ2UubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHBhZ2Vbal07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldE1vZGVsKCkge1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBnZXRWaXJ0dWFsUm93OiBmdW5jdGlvbiAoaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmdldFZpcnR1YWxSb3coaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldFZpcnR1YWxSb3dDb3VudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnZpcnR1YWxSb3dDb3VudDtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBmb3JFYWNoSW5NZW1vcnk6IGZ1bmN0aW9uIChjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5mb3JFYWNoSW5NZW1vcnkoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIHV0aWxzID0gVXRpbHM7XHJcblxyXG4gICAgdmFyIHRlbXBsYXRlID1cclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1wYWdpbmctcGFuZWxcIj4nK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGlkPVwicGFnZVJvd1N1bW1hcnlQYW5lbFwiIGNsYXNzPVwiYWctcGFnaW5nLXJvdy1zdW1tYXJ5LXBhbmVsXCI+JytcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gaWQ9XCJmaXJzdFJvd09uUGFnZVwiPjwvc3Bhbj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICcgW1RPXSAnK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBpZD1cImxhc3RSb3dPblBhZ2VcIj48L3NwYW4+JytcclxuICAgICAgICAgICAgICAgICAgICAnIFtPRl0gJytcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gaWQ9XCJyZWNvcmRDb3VudFwiPjwvc3Bhbj4nK1xyXG4gICAgICAgICAgICAgICAgJzwvc3Bhbj4nK1xyXG4gICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPVwiYWctcGFnaW5nLXBhZ2Utc3VtbWFyeS1wYW5lbFwiPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJhZy1wYWdpbmctYnV0dG9uXCIgaWQ9XCJidEZpcnN0XCI+W0ZJUlNUXTwvYnV0dG9uPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gY2xhc3M9XCJhZy1wYWdpbmctYnV0dG9uXCIgaWQ9XCJidFByZXZpb3VzXCI+W1BSRVZJT1VTXTwvYnV0dG9uPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJ1tQQUdFXSAnK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBpZD1cImN1cnJlbnRcIj48L3NwYW4+JytcclxuICAgICAgICAgICAgICAgICAgICAnIFtPRl0gJytcclxuICAgICAgICAgICAgICAgICAgICAnPHNwYW4gaWQ9XCJ0b3RhbFwiPjwvc3Bhbj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIGNsYXNzPVwiYWctcGFnaW5nLWJ1dHRvblwiIGlkPVwiYnROZXh0XCI+W05FWFRdPC9idXR0b24+JytcclxuICAgICAgICAgICAgICAgICAgICAnPGJ1dHRvbiBjbGFzcz1cImFnLXBhZ2luZy1idXR0b25cIiBpZD1cImJ0TGFzdFwiPltMQVNUXTwvYnV0dG9uPicrXHJcbiAgICAgICAgICAgICAgICAnPC9zcGFuPicrXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uQ29udHJvbGxlciB7XHJcblxyXG4gICAgICAgIGVHdWk6IGFueTtcclxuICAgICAgICBidE5leHQ6IGFueTtcclxuICAgICAgICBidFByZXZpb3VzOiBhbnk7XHJcbiAgICAgICAgYnRGaXJzdDogYW55O1xyXG4gICAgICAgIGJ0TGFzdDogYW55O1xyXG4gICAgICAgIGxiQ3VycmVudDogYW55O1xyXG4gICAgICAgIGxiVG90YWw6IGFueTtcclxuXHJcbiAgICAgICAgbGJSZWNvcmRDb3VudDogYW55O1xyXG4gICAgICAgIGxiRmlyc3RSb3dPblBhZ2U6IGFueTtcclxuICAgICAgICBsYkxhc3RSb3dPblBhZ2U6IGFueTtcclxuICAgICAgICBlUGFnZVJvd1N1bW1hcnlQYW5lbDogYW55O1xyXG5cclxuICAgICAgICBhbmd1bGFyR3JpZDogYW55O1xyXG4gICAgICAgIGNhbGxWZXJzaW9uOiBhbnk7XHJcbiAgICAgICAgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgZGF0YXNvdXJjZTogYW55O1xyXG4gICAgICAgIHBhZ2VTaXplOiBhbnk7XHJcbiAgICAgICAgcm93Q291bnQ6IGFueTtcclxuICAgICAgICBmb3VuZE1heFJvdzogYW55O1xyXG4gICAgICAgIHRvdGFsUGFnZXM6IGFueTtcclxuICAgICAgICBjdXJyZW50UGFnZTogYW55O1xyXG5cclxuICAgICAgICBpbml0KGFuZ3VsYXJHcmlkOiBhbnksIGdyaWRPcHRpb25zV3JhcHBlcjogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyID0gZ3JpZE9wdGlvbnNXcmFwcGVyO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ3VsYXJHcmlkID0gYW5ndWxhckdyaWQ7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBDb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbFZlcnNpb24gPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0RGF0YXNvdXJjZShkYXRhc291cmNlOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhc291cmNlID0gZGF0YXNvdXJjZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghZGF0YXNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gb25seSBjb250aW51ZSBpZiB3ZSBoYXZlIGEgdmFsaWQgZGF0YXNvdXJjZSB0byB3b3JrIHdpdGhcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVzZXQoKSB7XHJcbiAgICAgICAgICAgIC8vIGNvcHkgcGFnZVNpemUsIHRvIGd1YXJkIGFnYWluc3QgaXQgY2hhbmdpbmcgdGhlIHRoZSBkYXRhc291cmNlIGJldHdlZW4gY2FsbHNcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YXNvdXJjZS5wYWdlU2l6ZSAmJiB0eXBlb2YgdGhpcy5kYXRhc291cmNlLnBhZ2VTaXplICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdkYXRhc291cmNlLnBhZ2VTaXplIHNob3VsZCBiZSBhIG51bWJlcicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucGFnZVNpemUgPSB0aGlzLmRhdGFzb3VyY2UucGFnZVNpemU7XHJcbiAgICAgICAgICAgIC8vIHNlZSBpZiB3ZSBrbm93IHRoZSB0b3RhbCBudW1iZXIgb2YgcGFnZXMsIG9yIGlmIGl0J3MgJ3RvIGJlIGRlY2lkZWQnXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5kYXRhc291cmNlLnJvd0NvdW50ID09PSAnbnVtYmVyJyAmJiB0aGlzLmRhdGFzb3VyY2Uucm93Q291bnQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3dDb3VudCA9IHRoaXMuZGF0YXNvdXJjZS5yb3dDb3VudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm91bmRNYXhSb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVUb3RhbFBhZ2VzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd0NvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm91bmRNYXhSb3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG90YWxQYWdlcyA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy8gaGlkZSB0aGUgc3VtbWFyeSBwYW5lbCB1bnRpbCBzb21ldGhpbmcgaXMgbG9hZGVkXHJcbiAgICAgICAgICAgIHRoaXMuZVBhZ2VSb3dTdW1tYXJ5UGFuZWwuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXRUb3RhbExhYmVscygpO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRQYWdlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUb3RhbExhYmVscygpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm91bmRNYXhSb3cpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGJUb3RhbC5pbm5lckhUTUwgPSB0aGlzLnRvdGFsUGFnZXMudG9Mb2NhbGVTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGJSZWNvcmRDb3VudC5pbm5lckhUTUwgPSB0aGlzLnJvd0NvdW50LnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9yZVRleHQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRMb2NhbGVUZXh0RnVuYygpKCdtb3JlJywgJ21vcmUnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGJUb3RhbC5pbm5lckhUTUwgPSBtb3JlVGV4dDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGJSZWNvcmRDb3VudC5pbm5lckhUTUwgPSBtb3JlVGV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2FsY3VsYXRlVG90YWxQYWdlcygpIHtcclxuICAgICAgICAgICAgdGhpcy50b3RhbFBhZ2VzID0gTWF0aC5mbG9vcigodGhpcy5yb3dDb3VudCAtIDEpIC8gdGhpcy5wYWdlU2l6ZSkgKyAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFnZUxvYWRlZChyb3dzOiBhbnksIGxhc3RSb3dJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBmaXJzdElkID0gdGhpcy5jdXJyZW50UGFnZSAqIHRoaXMucGFnZVNpemU7XHJcbiAgICAgICAgICAgIHRoaXMuYW5ndWxhckdyaWQuc2V0Um93cyhyb3dzLCBmaXJzdElkKTtcclxuICAgICAgICAgICAgLy8gc2VlIGlmIHdlIGhpdCB0aGUgbGFzdCByb3dcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZvdW5kTWF4Um93ICYmIHR5cGVvZiBsYXN0Um93SW5kZXggPT09ICdudW1iZXInICYmIGxhc3RSb3dJbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvdW5kTWF4Um93ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucm93Q291bnQgPSBsYXN0Um93SW5kZXg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGN1bGF0ZVRvdGFsUGFnZXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VG90YWxMYWJlbHMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpZiBvdmVyc2hvdCBwYWdlcywgZ28gYmFja1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPiB0aGlzLnRvdGFsUGFnZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy50b3RhbFBhZ2VzIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRQYWdlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lbmFibGVPckRpc2FibGVCdXR0b25zKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlUm93TGFiZWxzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGVSb3dMYWJlbHMoKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFJvdzogYW55O1xyXG4gICAgICAgICAgICB2YXIgZW5kUm93OiBhbnk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzWmVyb1BhZ2VzVG9EaXNwbGF5KCkpIHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0Um93ID0gMDtcclxuICAgICAgICAgICAgICAgIGVuZFJvdyA9IDA7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydFJvdyA9ICh0aGlzLnBhZ2VTaXplICogdGhpcy5jdXJyZW50UGFnZSkgKyAxO1xyXG4gICAgICAgICAgICAgICAgZW5kUm93ID0gc3RhcnRSb3cgKyB0aGlzLnBhZ2VTaXplIC0gMTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZvdW5kTWF4Um93ICYmIGVuZFJvdyA+IHRoaXMucm93Q291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbmRSb3cgPSB0aGlzLnJvd0NvdW50O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMubGJGaXJzdFJvd09uUGFnZS5pbm5lckhUTUwgPSAoc3RhcnRSb3cpLnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIHRoaXMubGJMYXN0Um93T25QYWdlLmlubmVySFRNTCA9IChlbmRSb3cpLnRvTG9jYWxlU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBzaG93IHRoZSBzdW1tYXJ5IHBhbmVsLCB3aGVuIGZpcnN0IHNob3duLCB0aGlzIGlzIGJsYW5rXHJcbiAgICAgICAgICAgIHRoaXMuZVBhZ2VSb3dTdW1tYXJ5UGFuZWwuc3R5bGUudmlzaWJpbGl0eSA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsb2FkUGFnZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5lbmFibGVPckRpc2FibGVCdXR0b25zKCk7XHJcbiAgICAgICAgICAgIHZhciBzdGFydFJvdyA9IHRoaXMuY3VycmVudFBhZ2UgKiB0aGlzLmRhdGFzb3VyY2UucGFnZVNpemU7XHJcbiAgICAgICAgICAgIHZhciBlbmRSb3cgPSAodGhpcy5jdXJyZW50UGFnZSArIDEpICogdGhpcy5kYXRhc291cmNlLnBhZ2VTaXplO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sYkN1cnJlbnQuaW5uZXJIVE1MID0gKHRoaXMuY3VycmVudFBhZ2UgKyAxKS50b0xvY2FsZVN0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jYWxsVmVyc2lvbisrO1xyXG4gICAgICAgICAgICB2YXIgY2FsbFZlcnNpb25Db3B5ID0gdGhpcy5jYWxsVmVyc2lvbjtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmFuZ3VsYXJHcmlkLnNob3dMb2FkaW5nUGFuZWwodHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc29ydE1vZGVsOiBhbnk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZVNlcnZlclNpZGVTb3J0aW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIHNvcnRNb2RlbCA9IHRoaXMuYW5ndWxhckdyaWQuZ2V0U29ydE1vZGVsKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJNb2RlbDogYW55O1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNFbmFibGVTZXJ2ZXJTaWRlRmlsdGVyKCkpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlck1vZGVsID0gdGhpcy5hbmd1bGFyR3JpZC5nZXRGaWx0ZXJNb2RlbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRSb3c6IHN0YXJ0Um93LFxyXG4gICAgICAgICAgICAgICAgZW5kUm93OiBlbmRSb3csXHJcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ2FsbGJhY2s6IHN1Y2Nlc3NDYWxsYmFjayxcclxuICAgICAgICAgICAgICAgIGZhaWxDYWxsYmFjazogZmFpbENhbGxiYWNrLFxyXG4gICAgICAgICAgICAgICAgc29ydE1vZGVsOiBzb3J0TW9kZWwsXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJNb2RlbDogZmlsdGVyTW9kZWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIG9sZCB2ZXJzaW9uIG9mIGRhdGFzb3VyY2UgdXNlZFxyXG4gICAgICAgICAgICB2YXIgZ2V0Um93c1BhcmFtcyA9IHV0aWxzLmdldEZ1bmN0aW9uUGFyYW1ldGVycyh0aGlzLmRhdGFzb3VyY2UuZ2V0Um93cyk7XHJcbiAgICAgICAgICAgIGlmIChnZXRSb3dzUGFyYW1zLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYWctZ3JpZDogSXQgbG9va3MgbGlrZSB5b3VyIHBhZ2luZyBkYXRhc291cmNlIGlzIG9mIHRoZSBvbGQgdHlwZSwgdGFraW5nIG1vcmUgdGhhbiBvbmUgcGFyYW1ldGVyLicpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhZy1ncmlkOiBGcm9tIGFnLWdyaWQgMS45LjAsIG5vdyB0aGUgZ2V0Um93cyB0YWtlcyBvbmUgcGFyYW1ldGVyLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIGRldGFpbHMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZGF0YXNvdXJjZS5nZXRSb3dzKHBhcmFtcyk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzQ2FsbGJhY2socm93czogYW55LCBsYXN0Um93SW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuaXNDYWxsRGFlbW9uKGNhbGxWZXJzaW9uQ29weSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGF0LnBhZ2VMb2FkZWQocm93cywgbGFzdFJvd0luZGV4KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmFpbENhbGxiYWNrKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuaXNDYWxsRGFlbW9uKGNhbGxWZXJzaW9uQ29weSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBzZXQgaW4gYW4gZW1wdHkgc2V0IG9mIHJvd3MsIHRoaXMgd2lsbCBhdFxyXG4gICAgICAgICAgICAgICAgLy8gbGVhc3QgZ2V0IHJpZCBvZiB0aGUgbG9hZGluZyBwYW5lbCwgYW5kXHJcbiAgICAgICAgICAgICAgICAvLyBzdG9wIGJsb2NraW5nIHRoaW5nc1xyXG4gICAgICAgICAgICAgICAgdGhhdC5hbmd1bGFyR3JpZC5zZXRSb3dzKFtdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXNDYWxsRGFlbW9uKHZlcnNpb25Db3B5OiBhbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZlcnNpb25Db3B5ICE9PSB0aGlzLmNhbGxWZXJzaW9uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25CdE5leHQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UrKztcclxuICAgICAgICAgICAgdGhpcy5sb2FkUGFnZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25CdFByZXZpb3VzKCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLS07XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFBhZ2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uQnRGaXJzdCgpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMubG9hZFBhZ2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uQnRMYXN0KCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gdGhpcy50b3RhbFBhZ2VzIC0gMTtcclxuICAgICAgICAgICAgdGhpcy5sb2FkUGFnZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXNaZXJvUGFnZXNUb0Rpc3BsYXkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kTWF4Um93ICYmIHRoaXMudG90YWxQYWdlcyA9PT0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVuYWJsZU9yRGlzYWJsZUJ1dHRvbnMoKSB7XHJcbiAgICAgICAgICAgIHZhciBkaXNhYmxlUHJldmlvdXNBbmRGaXJzdCA9IHRoaXMuY3VycmVudFBhZ2UgPT09IDA7XHJcbiAgICAgICAgICAgIHRoaXMuYnRQcmV2aW91cy5kaXNhYmxlZCA9IGRpc2FibGVQcmV2aW91c0FuZEZpcnN0O1xyXG4gICAgICAgICAgICB0aGlzLmJ0Rmlyc3QuZGlzYWJsZWQgPSBkaXNhYmxlUHJldmlvdXNBbmRGaXJzdDtcclxuXHJcbiAgICAgICAgICAgIHZhciB6ZXJvUGFnZXNUb0Rpc3BsYXkgPSB0aGlzLmlzWmVyb1BhZ2VzVG9EaXNwbGF5KCk7XHJcbiAgICAgICAgICAgIHZhciBvbkxhc3RQYWdlID0gdGhpcy5mb3VuZE1heFJvdyAmJiB0aGlzLmN1cnJlbnRQYWdlID09PSAodGhpcy50b3RhbFBhZ2VzIC0gMSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZGlzYWJsZU5leHQgPSBvbkxhc3RQYWdlIHx8IHplcm9QYWdlc1RvRGlzcGxheTtcclxuICAgICAgICAgICAgdGhpcy5idE5leHQuZGlzYWJsZWQgPSBkaXNhYmxlTmV4dDtcclxuXHJcbiAgICAgICAgICAgIHZhciBkaXNhYmxlTGFzdCA9ICF0aGlzLmZvdW5kTWF4Um93IHx8IHplcm9QYWdlc1RvRGlzcGxheSB8fCB0aGlzLmN1cnJlbnRQYWdlID09PSAodGhpcy50b3RhbFBhZ2VzIC0gMSk7XHJcbiAgICAgICAgICAgIHRoaXMuYnRMYXN0LmRpc2FibGVkID0gZGlzYWJsZUxhc3Q7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjcmVhdGVUZW1wbGF0ZSgpIHtcclxuICAgICAgICAgICAgdmFyIGxvY2FsZVRleHRGdW5jID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0TG9jYWxlVGV4dEZ1bmMoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnW1BBR0VdJywgbG9jYWxlVGV4dEZ1bmMoJ3BhZ2UnLCAnUGFnZScpKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1tUT10nLCBsb2NhbGVUZXh0RnVuYygndG8nLCAndG8nKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbT0ZdJywgbG9jYWxlVGV4dEZ1bmMoJ29mJywgJ29mJykpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnW09GXScsIGxvY2FsZVRleHRGdW5jKCdvZicsICdvZicpKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1tGSVJTVF0nLCBsb2NhbGVUZXh0RnVuYygnZmlyc3QnLCAnRmlyc3QnKSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKCdbUFJFVklPVVNdJywgbG9jYWxlVGV4dEZ1bmMoJ3ByZXZpb3VzJywgJ1ByZXZpb3VzJykpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgnW05FWFRdJywgbG9jYWxlVGV4dEZ1bmMoJ25leHQnLCAnTmV4dCcpKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoJ1tMQVNUXScsIGxvY2FsZVRleHRGdW5jKCdsYXN0JywgJ0xhc3QnKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRHdWkoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVHdWk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXR1cENvbXBvbmVudHMoKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVHdWkgPSB1dGlscy5sb2FkVGVtcGxhdGUodGhpcy5jcmVhdGVUZW1wbGF0ZSgpKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnROZXh0ID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNidE5leHQnKTtcclxuICAgICAgICAgICAgdGhpcy5idFByZXZpb3VzID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNidFByZXZpb3VzJyk7XHJcbiAgICAgICAgICAgIHRoaXMuYnRGaXJzdCA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjYnRGaXJzdCcpO1xyXG4gICAgICAgICAgICB0aGlzLmJ0TGFzdCA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjYnRMYXN0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMubGJDdXJyZW50ID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNjdXJyZW50Jyk7XHJcbiAgICAgICAgICAgIHRoaXMubGJUb3RhbCA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjdG90YWwnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGJSZWNvcmRDb3VudCA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjcmVjb3JkQ291bnQnKTtcclxuICAgICAgICAgICAgdGhpcy5sYkZpcnN0Um93T25QYWdlID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNmaXJzdFJvd09uUGFnZScpO1xyXG4gICAgICAgICAgICB0aGlzLmxiTGFzdFJvd09uUGFnZSA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjbGFzdFJvd09uUGFnZScpO1xyXG4gICAgICAgICAgICB0aGlzLmVQYWdlUm93U3VtbWFyeVBhbmVsID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNwYWdlUm93U3VtbWFyeVBhbmVsJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ0TmV4dC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQub25CdE5leHQoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmJ0UHJldmlvdXMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Lm9uQnRQcmV2aW91cygpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYnRGaXJzdC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQub25CdEZpcnN0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5idExhc3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0Lm9uQnRMYXN0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIFRlbXBsYXRlU2VydmljZSB7XHJcblxyXG4gICAgICAgIHRlbXBsYXRlQ2FjaGU6YW55ID0ge307XHJcbiAgICAgICAgd2FpdGluZ0NhbGxiYWNrczphbnkgPSB7fTtcclxuICAgICAgICAkc2NvcGU6IGFueTtcclxuXHJcbiAgICAgICAgaW5pdCgkc2NvcGU6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLiRzY29wZSA9ICRzY29wZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJldHVybnMgdGhlIHRlbXBsYXRlIGlmIGl0IGlzIGxvYWRlZCwgb3IgbnVsbCBpZiBpdCBpcyBub3QgbG9hZGVkXHJcbiAgICAgICAgLy8gYnV0IHdpbGwgY2FsbCB0aGUgY2FsbGJhY2sgd2hlbiBpdCBpcyBsb2FkZWRcclxuICAgICAgICBnZXRUZW1wbGF0ZSh1cmw6IGFueSwgY2FsbGJhY2s6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlRnJvbUNhY2hlID0gdGhpcy50ZW1wbGF0ZUNhY2hlW3VybF07XHJcbiAgICAgICAgICAgIGlmICh0ZW1wbGF0ZUZyb21DYWNoZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRlbXBsYXRlRnJvbUNhY2hlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tMaXN0ID0gdGhpcy53YWl0aW5nQ2FsbGJhY2tzW3VybF07XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKCFjYWxsYmFja0xpc3QpIHtcclxuICAgICAgICAgICAgICAgIC8vIGZpcnN0IHRpbWUgdGhpcyB3YXMgY2FsbGVkLCBzbyBuZWVkIGEgbmV3IGxpc3QgZm9yIGNhbGxiYWNrc1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLndhaXRpbmdDYWxsYmFja3NbdXJsXSA9IGNhbGxiYWNrTGlzdDtcclxuICAgICAgICAgICAgICAgIC8vIGFuZCBhbHNvIG5lZWQgdG8gZG8gdGhlIGh0dHAgcmVxdWVzdFxyXG4gICAgICAgICAgICAgICAgdmFyIGNsaWVudCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG4gICAgICAgICAgICAgICAgY2xpZW50Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmhhbmRsZUh0dHBSZXN1bHQodGhpcywgdXJsKTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjbGllbnQub3BlbihcIkdFVFwiLCB1cmwpO1xyXG4gICAgICAgICAgICAgICAgY2xpZW50LnNlbmQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gYWRkIHRoaXMgY2FsbGJhY2tcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFja0xpc3QucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGNhbGxlciBuZWVkcyB0byB3YWl0IGZvciB0ZW1wbGF0ZSB0byBsb2FkLCBzbyByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhhbmRsZUh0dHBSZXN1bHQoaHR0cFJlc3VsdDogYW55LCB1cmw6IGFueSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGh0dHBSZXN1bHQuc3RhdHVzICE9PSAyMDAgfHwgaHR0cFJlc3VsdC5yZXNwb25zZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdVbmFibGUgdG8gZ2V0IHRlbXBsYXRlIGVycm9yICcgKyBodHRwUmVzdWx0LnN0YXR1cyArICcgLSAnICsgdXJsKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcmVzcG9uc2Ugc3VjY2Vzcywgc28gcHJvY2VzcyBpdFxyXG4gICAgICAgICAgICB0aGlzLnRlbXBsYXRlQ2FjaGVbdXJsXSA9IGh0dHBSZXN1bHQucmVzcG9uc2U7XHJcblxyXG4gICAgICAgICAgICAvLyBpbmZvcm0gYWxsIGxpc3RlbmVycyB0aGF0IHRoaXMgaXMgbm93IGluIHRoZSBjYWNoZVxyXG4gICAgICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy53YWl0aW5nQ2FsbGJhY2tzW3VybF07XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2FsbGJhY2tzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FsbGJhY2sgPSBjYWxsYmFja3NbaV07XHJcbiAgICAgICAgICAgICAgICAvLyB3ZSBjb3VsZCBwYXNzIHRoZSBjYWxsYmFjayB0aGUgcmVzcG9uc2UsIGhvd2V2ZXIgd2Uga25vdyB0aGUgY2xpZW50IG9mIHRoaXMgY29kZVxyXG4gICAgICAgICAgICAgICAgLy8gaXMgdGhlIGNlbGwgcmVuZGVyZXIsIGFuZCBpdCBwYXNzZXMgdGhlICdjZWxsUmVmcmVzaCcgbWV0aG9kIGluIGFzIHRoZSBjYWxsYmFja1xyXG4gICAgICAgICAgICAgICAgLy8gd2hpY2ggZG9lc24ndCB0YWtlIGFueSBwYXJhbWV0ZXJzLlxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuJHNjb3BlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LiRzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgXyA9IFV0aWxzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBCb3JkZXJMYXlvdXQge1xyXG5cclxuICAgICAgICBlTm9ydGhXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgZVNvdXRoV3JhcHBlcjogYW55O1xyXG4gICAgICAgIGVFYXN0V3JhcHBlcjogYW55O1xyXG4gICAgICAgIGVXZXN0V3JhcHBlcjogYW55O1xyXG4gICAgICAgIGVDZW50ZXJXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgZU92ZXJsYXlXcmFwcGVyOiBhbnk7XHJcbiAgICAgICAgZUNlbnRlclJvdzogYW55O1xyXG5cclxuICAgICAgICBlTm9ydGhDaGlsZExheW91dDogYW55O1xyXG4gICAgICAgIGVTb3V0aENoaWxkTGF5b3V0OiBhbnk7XHJcbiAgICAgICAgZUVhc3RDaGlsZExheW91dDogYW55O1xyXG4gICAgICAgIGVXZXN0Q2hpbGRMYXlvdXQ6IGFueTtcclxuICAgICAgICBlQ2VudGVyQ2hpbGRMYXlvdXQ6IGFueTtcclxuXHJcbiAgICAgICAgaXNMYXlvdXRQYW5lbDogYW55O1xyXG4gICAgICAgIGZ1bGxIZWlnaHQ6IGFueTtcclxuICAgICAgICBsYXlvdXRBY3RpdmU6IGFueTtcclxuXHJcbiAgICAgICAgZUd1aTogYW55O1xyXG4gICAgICAgIGlkOiBhbnk7XHJcbiAgICAgICAgY2hpbGRQYW5lbHM6IGFueTtcclxuICAgICAgICBjZW50ZXJIZWlnaHRMYXN0VGltZTogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihwYXJhbXM6YW55KSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmlzTGF5b3V0UGFuZWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5mdWxsSGVpZ2h0ID0gIXBhcmFtcy5ub3J0aCAmJiAhcGFyYW1zLnNvdXRoO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlOiBhbnk7XHJcbiAgICAgICAgICAgIGlmICghcGFyYW1zLmRvbnRGaWxsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mdWxsSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBzdHlsZT1cImhlaWdodDogMTAwJTsgb3ZlcmZsb3c6IGF1dG87IHBvc2l0aW9uOiByZWxhdGl2ZTtcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJ3ZXN0XCIgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7IGZsb2F0OiBsZWZ0O1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cImVhc3RcIiBzdHlsZT1cImhlaWdodDogMTAwJTsgZmxvYXQ6IHJpZ2h0O1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cImNlbnRlclwiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlO1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIm92ZXJsYXlcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTsgdG9wOiAwcHg7IGxlZnQ6IDBweDtcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7IHBvc2l0aW9uOiByZWxhdGl2ZTtcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJub3J0aFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cImNlbnRlclJvd1wiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlOyBvdmVyZmxvdzogaGlkZGVuO1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIndlc3RcIiBzdHlsZT1cImhlaWdodDogMTAwJTsgZmxvYXQ6IGxlZnQ7XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiZWFzdFwiIHN0eWxlPVwiaGVpZ2h0OiAxMDAlOyBmbG9hdDogcmlnaHQ7XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiY2VudGVyXCIgc3R5bGU9XCJoZWlnaHQ6IDEwMCU7XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJzb3V0aFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBpZD1cIm92ZXJsYXlcIiBzdHlsZT1cInBvc2l0aW9uOiBhYnNvbHV0ZTsgaGVpZ2h0OiAxMDAlOyB3aWR0aDogMTAwJTsgdG9wOiAwcHg7IGxlZnQ6IDBweDtcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzwvZGl2Pic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxheW91dEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgc3R5bGU9XCJwb3NpdGlvbjogcmVsYXRpdmU7XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJub3J0aFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwiY2VudGVyUm93XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJ3ZXN0XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJlYXN0XCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJjZW50ZXJcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgaWQ9XCJzb3V0aFwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGlkPVwib3ZlcmxheVwiIHN0eWxlPVwicG9zaXRpb246IGFic29sdXRlOyBoZWlnaHQ6IDEwMCU7IHdpZHRoOiAxMDAlOyB0b3A6IDBweDsgbGVmdDogMHB4O1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXlvdXRBY3RpdmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5lR3VpID0gXy5sb2FkVGVtcGxhdGUodGVtcGxhdGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pZCA9ICdib3JkZXJMYXlvdXQnO1xyXG4gICAgICAgICAgICBpZiAocGFyYW1zLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWQgKz0gJ18nICsgcGFyYW1zLm5hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lR3VpLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmlkKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZFBhbmVscyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXR1cFBhbmVscyhwYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldE92ZXJsYXlWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldHVwUGFuZWxzKHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZU5vcnRoV3JhcHBlciA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjbm9ydGgnKTtcclxuICAgICAgICAgICAgdGhpcy5lU291dGhXcmFwcGVyID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNzb3V0aCcpO1xyXG4gICAgICAgICAgICB0aGlzLmVFYXN0V3JhcHBlciA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjZWFzdCcpO1xyXG4gICAgICAgICAgICB0aGlzLmVXZXN0V3JhcHBlciA9IHRoaXMuZUd1aS5xdWVyeVNlbGVjdG9yKCcjd2VzdCcpO1xyXG4gICAgICAgICAgICB0aGlzLmVDZW50ZXJXcmFwcGVyID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNjZW50ZXInKTtcclxuICAgICAgICAgICAgdGhpcy5lT3ZlcmxheVdyYXBwZXIgPSB0aGlzLmVHdWkucXVlcnlTZWxlY3RvcignI292ZXJsYXknKTtcclxuICAgICAgICAgICAgdGhpcy5lQ2VudGVyUm93ID0gdGhpcy5lR3VpLnF1ZXJ5U2VsZWN0b3IoJyNjZW50ZXJSb3cnKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZU5vcnRoQ2hpbGRMYXlvdXQgPSB0aGlzLnNldHVwUGFuZWwocGFyYW1zLm5vcnRoLCB0aGlzLmVOb3J0aFdyYXBwZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmVTb3V0aENoaWxkTGF5b3V0ID0gdGhpcy5zZXR1cFBhbmVsKHBhcmFtcy5zb3V0aCwgdGhpcy5lU291dGhXcmFwcGVyKTtcclxuICAgICAgICAgICAgdGhpcy5lRWFzdENoaWxkTGF5b3V0ID0gdGhpcy5zZXR1cFBhbmVsKHBhcmFtcy5lYXN0LCB0aGlzLmVFYXN0V3JhcHBlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZVdlc3RDaGlsZExheW91dCA9IHRoaXMuc2V0dXBQYW5lbChwYXJhbXMud2VzdCwgdGhpcy5lV2VzdFdyYXBwZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmVDZW50ZXJDaGlsZExheW91dCA9IHRoaXMuc2V0dXBQYW5lbChwYXJhbXMuY2VudGVyLCB0aGlzLmVDZW50ZXJXcmFwcGVyKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBQYW5lbChwYXJhbXMub3ZlcmxheSwgdGhpcy5lT3ZlcmxheVdyYXBwZXIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dXBQYW5lbChjb250ZW50OiBhbnksIGVQYW5lbDogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghZVBhbmVsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50LmlzTGF5b3V0UGFuZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkUGFuZWxzLnB1c2goY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZVBhbmVsLmFwcGVuZENoaWxkKGNvbnRlbnQuZ2V0R3VpKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb250ZW50O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlUGFuZWwuYXBwZW5kQ2hpbGQoY29udGVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlUGFuZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlUGFuZWwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEd1aSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZUd1aTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBhbnkgaXRlbSBjaGFuZ2VkIHNpemUsIG90aGVyd2lzZSByZXR1cm5zIGZhbHNlXHJcbiAgICAgICAgZG9MYXlvdXQoKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV8uaXNWaXNpYmxlKHRoaXMuZUd1aSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGF0TGVhc3RPbmVDaGFuZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB2YXIgY2hpbGRMYXlvdXRzID0gW3RoaXMuZU5vcnRoQ2hpbGRMYXlvdXQsIHRoaXMuZVNvdXRoQ2hpbGRMYXlvdXQsIHRoaXMuZUVhc3RDaGlsZExheW91dCwgdGhpcy5lV2VzdENoaWxkTGF5b3V0XTtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBfLmZvckVhY2goY2hpbGRMYXlvdXRzLCBmdW5jdGlvbiAoY2hpbGRMYXlvdXQ6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNoaWxkQ2hhbmdlZFNpemUgPSB0aGF0LmxheW91dENoaWxkKGNoaWxkTGF5b3V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChjaGlsZENoYW5nZWRTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXRMZWFzdE9uZUNoYW5nZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxheW91dEFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG91ckhlaWdodENoYW5nZWQgPSB0aGlzLmxheW91dEhlaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG91cldpZHRoQ2hhbmdlZCA9IHRoaXMubGF5b3V0V2lkdGgoKTtcclxuICAgICAgICAgICAgICAgIGlmIChvdXJIZWlnaHRDaGFuZ2VkIHx8IG91cldpZHRoQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0TGVhc3RPbmVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIGNlbnRlckNoYW5nZWQgPSB0aGlzLmxheW91dENoaWxkKHRoaXMuZUNlbnRlckNoaWxkTGF5b3V0KTtcclxuICAgICAgICAgICAgaWYgKGNlbnRlckNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgIGF0TGVhc3RPbmVDaGFuZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gYXRMZWFzdE9uZUNoYW5nZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsYXlvdXRDaGlsZChjaGlsZFBhbmVsOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKGNoaWxkUGFuZWwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjaGlsZFBhbmVsLmRvTGF5b3V0KCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxheW91dEhlaWdodCgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZnVsbEhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdG90YWxIZWlnaHQgPSBfLm9mZnNldEhlaWdodCh0aGlzLmVHdWkpO1xyXG4gICAgICAgICAgICB2YXIgbm9ydGhIZWlnaHQgPSBfLm9mZnNldEhlaWdodCh0aGlzLmVOb3J0aFdyYXBwZXIpO1xyXG4gICAgICAgICAgICB2YXIgc291dGhIZWlnaHQgPSBfLm9mZnNldEhlaWdodCh0aGlzLmVTb3V0aFdyYXBwZXIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbnRlckhlaWdodCA9IHRvdGFsSGVpZ2h0IC0gbm9ydGhIZWlnaHQgLSBzb3V0aEhlaWdodDtcclxuICAgICAgICAgICAgaWYgKGNlbnRlckhlaWdodCA8IDApIHtcclxuICAgICAgICAgICAgICAgIGNlbnRlckhlaWdodCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNlbnRlckhlaWdodExhc3RUaW1lICE9PSBjZW50ZXJIZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUNlbnRlclJvdy5zdHlsZS5oZWlnaHQgPSBjZW50ZXJIZWlnaHQgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZW50ZXJIZWlnaHRMYXN0VGltZSA9IGNlbnRlckhlaWdodDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOyAvLyByZXR1cm4gdHJ1ZSBiZWNhdXNlIHRoZXJlIHdhcyBhIGNoYW5nZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsYXlvdXRXaWR0aCgpIHtcclxuICAgICAgICAgICAgdmFyIHRvdGFsV2lkdGggPSBfLm9mZnNldFdpZHRoKHRoaXMuZUd1aSk7XHJcbiAgICAgICAgICAgIHZhciBlYXN0V2lkdGggPSBfLm9mZnNldFdpZHRoKHRoaXMuZUVhc3RXcmFwcGVyKTtcclxuICAgICAgICAgICAgdmFyIHdlc3RXaWR0aCA9IF8ub2Zmc2V0V2lkdGgodGhpcy5lV2VzdFdyYXBwZXIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbnRlcldpZHRoID0gdG90YWxXaWR0aCAtIGVhc3RXaWR0aCAtIHdlc3RXaWR0aDtcclxuICAgICAgICAgICAgaWYgKGNlbnRlcldpZHRoIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgY2VudGVyV2lkdGggPSAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVDZW50ZXJXcmFwcGVyLnN0eWxlLndpZHRoID0gY2VudGVyV2lkdGggKyAncHgnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0RWFzdFZpc2libGUodmlzaWJsZTogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVFYXN0V3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lRWFzdFdyYXBwZXIuc3R5bGUuZGlzcGxheSA9IHZpc2libGUgPyAnJyA6ICdub25lJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRvTGF5b3V0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRPdmVybGF5VmlzaWJsZSh2aXNpYmxlOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZU92ZXJsYXlXcmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVPdmVybGF5V3JhcHBlci5zdHlsZS5kaXNwbGF5ID0gdmlzaWJsZSA/ICcnIDogJ25vbmUnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZG9MYXlvdXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFNvdXRoVmlzaWJsZSh2aXNpYmxlOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZVNvdXRoV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lU291dGhXcmFwcGVyLnN0eWxlLmRpc3BsYXkgPSB2aXNpYmxlID8gJycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kb0xheW91dCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2xheW91dC9ib3JkZXJMYXlvdXQudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgZ3JpZEh0bWwgPVxyXG4gICAgICAgICAgICAnPGRpdj4nK1xyXG4gICAgICAgICAgICAgICAgJzwhLS0gaGVhZGVyIC0tPicrXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWhlYWRlclwiPicrXHJcbiAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1waW5uZWQtaGVhZGVyXCI+PC9kaXY+PGRpdiBjbGFzcz1cImFnLWhlYWRlci12aWV3cG9ydFwiPjxkaXYgY2xhc3M9XCJhZy1oZWFkZXItY29udGFpbmVyXCI+PC9kaXY+PC9kaXY+JytcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgJzwhLS0gYm9keSAtLT4nK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1ib2R5XCI+JytcclxuICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLXBpbm5lZC1jb2xzLXZpZXdwb3J0XCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1waW5uZWQtY29scy1jb250YWluZXJcIj48L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYWctYm9keS12aWV3cG9ydC13cmFwcGVyXCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1ib2R5LXZpZXdwb3J0XCI+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiYWctYm9keS1jb250YWluZXJcIj48L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAgICAgICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAgICAgICAgICc8L2Rpdj4nK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuXHJcbiAgICB2YXIgZ3JpZE5vU2Nyb2xsc0h0bWwgPVxyXG4gICAgICAgICAgICAnPGRpdj4nK1xyXG4gICAgICAgICAgICAgICAgJzwhLS0gaGVhZGVyIC0tPicrXHJcbiAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWhlYWRlci1jb250YWluZXJcIj48L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgJzwhLS0gYm9keSAtLT4nK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1ib2R5LWNvbnRhaW5lclwiPjwvZGl2PicrXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgIC8vIHdyYXBwaW5nIGluIG91dGVyIGRpdiwgYW5kIHdyYXBwZXIsIGlzIG5lZWRlZCB0byBjZW50ZXIgdGhlIGxvYWRpbmcgaWNvblxyXG4gICAgLy8gVGhlIGlkZWEgZm9yIGNlbnRlcmluZyBjYW1lIGZyb20gaGVyZTogaHR0cDovL3d3dy52YW5zZW9kZXNpZ24uY29tL2Nzcy92ZXJ0aWNhbC1jZW50ZXJpbmcvXHJcbiAgICB2YXIgbG9hZGluZ0h0bWwgPVxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWxvYWRpbmctcGFuZWxcIj4nK1xyXG4gICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJhZy1sb2FkaW5nLXdyYXBwZXJcIj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImFnLWxvYWRpbmctY2VudGVyXCI+TG9hZGluZy4uLjwvc3Bhbj4nK1xyXG4gICAgICAgICAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgICAgICc8L2Rpdj4nO1xyXG5cclxuICAgIHZhciB1dGlscyA9IFV0aWxzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBHcmlkUGFuZWwge1xyXG5cclxuICAgICAgICBncmlkT3B0aW9uc1dyYXBwZXI6IGFueTtcclxuICAgICAgICBmb3JQcmludDogYW55O1xyXG4gICAgICAgIHNjcm9sbFdpZHRoOiBhbnk7XHJcbiAgICAgICAgZVJvb3Q6IGFueTtcclxuICAgICAgICBsYXlvdXQ6IGFueTtcclxuICAgICAgICByb3dNb2RlbDogYW55O1xyXG4gICAgICAgIGVCb2R5Vmlld3BvcnQ6IGFueTtcclxuICAgICAgICBjb2x1bW5Nb2RlbDogYW55O1xyXG4gICAgICAgIGVCb2R5OiBhbnk7XHJcbiAgICAgICAgcm93UmVuZGVyZXI6IGFueTtcclxuXHJcbiAgICAgICAgZUJvZHlDb250YWluZXI6IGFueTtcclxuICAgICAgICBlUGlubmVkQ29sc0NvbnRhaW5lcjogYW55O1xyXG4gICAgICAgIGVIZWFkZXJDb250YWluZXI6IGFueTtcclxuICAgICAgICBlUGlubmVkSGVhZGVyOiBhbnk7XHJcbiAgICAgICAgZUhlYWRlcjogYW55O1xyXG4gICAgICAgIGVQYXJlbnRPZlJvd3M6IGFueTtcclxuICAgICAgICBlQm9keVZpZXdwb3J0V3JhcHBlcjogYW55O1xyXG4gICAgICAgIGVQaW5uZWRDb2xzVmlld3BvcnQ6IGFueTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIC8vIG1ha2VzIGNvZGUgYmVsb3cgbW9yZSByZWFkYWJsZSBpZiB3ZSBwdWxsICdmb3JQcmludCcgb3V0XHJcbiAgICAgICAgICAgIHRoaXMuZm9yUHJpbnQgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0RvbnRVc2VTY3JvbGxzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBDb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsV2lkdGggPSB1dGlscy5nZXRTY3JvbGxiYXJXaWR0aCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dXBDb21wb25lbnRzKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9yUHJpbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZVJvb3QgPSB1dGlscy5sb2FkVGVtcGxhdGUoZ3JpZE5vU2Nyb2xsc0h0bWwpO1xyXG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkQ3NzQ2xhc3ModGhpcy5lUm9vdCwgJ2FnLXJvb3QgYWctbm8tc2Nyb2xscycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lUm9vdCA9IHV0aWxzLmxvYWRUZW1wbGF0ZShncmlkSHRtbCk7XHJcbiAgICAgICAgICAgICAgICB1dGlscy5hZGRDc3NDbGFzcyh0aGlzLmVSb290LCAnYWctcm9vdCBhZy1zY3JvbGxzJyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmluZEVsZW1lbnRzKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxheW91dCA9IG5ldyBCb3JkZXJMYXlvdXQoe1xyXG4gICAgICAgICAgICAgICAgb3ZlcmxheTogdXRpbHMubG9hZFRlbXBsYXRlKGxvYWRpbmdIdG1sKSxcclxuICAgICAgICAgICAgICAgIGNlbnRlcjogdGhpcy5lUm9vdCxcclxuICAgICAgICAgICAgICAgIGRvbnRGaWxsOiB0aGlzLmZvclByaW50LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJ2VHcmlkUGFuZWwnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRTY3JvbGxMaXN0ZW5lcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5zdXJlSW5kZXhWaXNpYmxlKGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGxhc3RSb3cgPSB0aGlzLnJvd01vZGVsLmdldFZpcnR1YWxSb3dDb3VudCgpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGluZGV4ICE9PSAnbnVtYmVyJyB8fCBpbmRleCA8IDAgfHwgaW5kZXggPj0gbGFzdFJvdykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdpbnZhbGlkIHJvdyBpbmRleCBmb3IgZW5zdXJlSW5kZXhWaXNpYmxlOiAnICsgaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcm93SGVpZ2h0ID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0Um93SGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHZhciByb3dUb3BQaXhlbCA9IHJvd0hlaWdodCAqIGluZGV4O1xyXG4gICAgICAgICAgICB2YXIgcm93Qm90dG9tUGl4ZWwgPSByb3dUb3BQaXhlbCArIHJvd0hlaWdodDtcclxuXHJcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydFRvcFBpeGVsID0gdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgdmFyIHZpZXdwb3J0SGVpZ2h0ID0gdGhpcy5lQm9keVZpZXdwb3J0Lm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgdmFyIHNjcm9sbFNob3dpbmcgPSB0aGlzLmVCb2R5Vmlld3BvcnQuY2xpZW50V2lkdGggPCB0aGlzLmVCb2R5Vmlld3BvcnQuc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgICAgIGlmIChzY3JvbGxTaG93aW5nKSB7XHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydEhlaWdodCAtPSB0aGlzLnNjcm9sbFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydEJvdHRvbVBpeGVsID0gdmlld3BvcnRUb3BQaXhlbCArIHZpZXdwb3J0SGVpZ2h0O1xyXG5cclxuICAgICAgICAgICAgdmFyIHZpZXdwb3J0U2Nyb2xsZWRQYXN0Um93ID0gdmlld3BvcnRUb3BQaXhlbCA+IHJvd1RvcFBpeGVsO1xyXG4gICAgICAgICAgICB2YXIgdmlld3BvcnRTY3JvbGxlZEJlZm9yZVJvdyA9IHZpZXdwb3J0Qm90dG9tUGl4ZWwgPCByb3dCb3R0b21QaXhlbDtcclxuXHJcbiAgICAgICAgICAgIGlmICh2aWV3cG9ydFNjcm9sbGVkUGFzdFJvdykge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgcm93IGlzIGJlZm9yZSwgc2Nyb2xsIHVwIHdpdGggcm93IGF0IHRvcFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbFRvcCA9IHJvd1RvcFBpeGVsO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHZpZXdwb3J0U2Nyb2xsZWRCZWZvcmVSb3cpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHJvdyBpcyBiZWxvdywgc2Nyb2xsIGRvd24gd2l0aCByb3cgYXQgYm90dG9tXHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3U2Nyb2xsUG9zaXRpb24gPSByb3dCb3R0b21QaXhlbCAtIHZpZXdwb3J0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbFRvcCA9IG5ld1Njcm9sbFBvc2l0aW9uO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSwgcm93IGlzIGFscmVhZHkgaW4gdmlldywgc28gZG8gbm90aGluZ1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5zdXJlQ29sSW5kZXhWaXNpYmxlKGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpbmRleCAhPT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY29sIGluZGV4IG11c3QgYmUgYSBudW1iZXI6ICcgKyBpbmRleCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjb2x1bW5zID0gdGhpcy5jb2x1bW5Nb2RlbC5nZXREaXNwbGF5ZWRDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5kZXggIT09ICdudW1iZXInIHx8IGluZGV4IDwgMCB8fCBpbmRleCA+PSBjb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdpbnZhbGlkIGNvbCBpbmRleCBmb3IgZW5zdXJlQ29sSW5kZXhWaXNpYmxlOiAnICsgaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICArICcsIHNob3VsZCBiZSBiZXR3ZWVuIDAgYW5kICcgKyAoY29sdW1ucy5sZW5ndGggLSAxKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSBjb2x1bW5zW2luZGV4XTtcclxuICAgICAgICAgICAgdmFyIHBpbm5lZENvbENvdW50ID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0UGlubmVkQ29sQ291bnQoKTtcclxuICAgICAgICAgICAgaWYgKGluZGV4IDwgcGlubmVkQ29sQ291bnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignaW52YWxpZCBjb2wgaW5kZXggZm9yIGVuc3VyZUNvbEluZGV4VmlzaWJsZTogJyArIGluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgKyAnLCBzY3JvbGxpbmcgdG8gYSBwaW5uZWQgY29sIG1ha2VzIG5vIHNlbnNlJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHN1bSB1cCBhbGwgY29sIHdpZHRoIHRvIHRoZSBsZXQgdG8gZ2V0IHRoZSBzdGFydCBwaXhlbFxyXG4gICAgICAgICAgICB2YXIgY29sTGVmdFBpeGVsID0gMDtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IHBpbm5lZENvbENvdW50OyBpIDwgaW5kZXg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgY29sTGVmdFBpeGVsICs9IGNvbHVtbnNbaV0uYWN0dWFsV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBjb2xSaWdodFBpeGVsID0gY29sTGVmdFBpeGVsICsgY29sdW1uLmFjdHVhbFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgdmFyIHZpZXdwb3J0TGVmdFBpeGVsID0gdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydFdpZHRoID0gdGhpcy5lQm9keVZpZXdwb3J0Lm9mZnNldFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgdmFyIHNjcm9sbFNob3dpbmcgPSB0aGlzLmVCb2R5Vmlld3BvcnQuY2xpZW50SGVpZ2h0IDwgdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbEhlaWdodDtcclxuICAgICAgICAgICAgaWYgKHNjcm9sbFNob3dpbmcpIHtcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0V2lkdGggLT0gdGhpcy5zY3JvbGxXaWR0aDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHZpZXdwb3J0UmlnaHRQaXhlbCA9IHZpZXdwb3J0TGVmdFBpeGVsICsgdmlld3BvcnRXaWR0aDtcclxuXHJcbiAgICAgICAgICAgIHZhciB2aWV3cG9ydFNjcm9sbGVkUGFzdENvbCA9IHZpZXdwb3J0TGVmdFBpeGVsID4gY29sTGVmdFBpeGVsO1xyXG4gICAgICAgICAgICB2YXIgdmlld3BvcnRTY3JvbGxlZEJlZm9yZUNvbCA9IHZpZXdwb3J0UmlnaHRQaXhlbCA8IGNvbFJpZ2h0UGl4ZWw7XHJcblxyXG4gICAgICAgICAgICBpZiAodmlld3BvcnRTY3JvbGxlZFBhc3RDb2wpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHZpZXdwb3J0J3MgbGVmdCBzaWRlIGlzIGFmdGVyIGNvbCdzIGxlZnQgc2lkZSwgc2Nyb2xsIHJpZ2h0IHRvIHB1bGwgY29sIGludG8gdmlld3BvcnQgYXQgbGVmdFxyXG4gICAgICAgICAgICAgICAgdGhpcy5lQm9keVZpZXdwb3J0LnNjcm9sbExlZnQgPSBjb2xMZWZ0UGl4ZWw7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmlld3BvcnRTY3JvbGxlZEJlZm9yZUNvbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgdmlld3BvcnQncyByaWdodCBzaWRlIGlzIGJlZm9yZSBjb2wncyByaWdodCBzaWRlLCBzY3JvbGwgbGVmdCB0byBwdWxsIGNvbCBpbnRvIHZpZXdwb3J0IGF0IHJpZ2h0XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3U2Nyb2xsUG9zaXRpb24gPSBjb2xSaWdodFBpeGVsIC0gdmlld3BvcnRXaWR0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUJvZHlWaWV3cG9ydC5zY3JvbGxMZWZ0ID0gbmV3U2Nyb2xsUG9zaXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlLCBjb2wgaXMgYWxyZWFkeSBpbiB2aWV3LCBzbyBkbyBub3RoaW5nXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaG93TG9hZGluZyhsb2FkaW5nOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXlvdXQuc2V0T3ZlcmxheVZpc2libGUobG9hZGluZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRXaWR0aEZvclNpemVDb2xzVG9GaXQoKSB7XHJcbiAgICAgICAgICAgIHZhciBhdmFpbGFibGVXaWR0aCA9IHRoaXMuZUJvZHkuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxTaG93aW5nID0gdGhpcy5lQm9keVZpZXdwb3J0LmNsaWVudEhlaWdodCA8IHRoaXMuZUJvZHlWaWV3cG9ydC5zY3JvbGxIZWlnaHQ7XHJcbiAgICAgICAgICAgIGlmIChzY3JvbGxTaG93aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBhdmFpbGFibGVXaWR0aCAtPSB0aGlzLnNjcm9sbFdpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhdmFpbGFibGVXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXQoY29sdW1uTW9kZWw6IGFueSwgcm93UmVuZGVyZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsID0gY29sdW1uTW9kZWw7XHJcbiAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIgPSByb3dSZW5kZXJlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFJvd01vZGVsKHJvd01vZGVsOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dNb2RlbCA9IHJvd01vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Qm9keUNvbnRhaW5lcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZUJvZHlDb250YWluZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRCb2R5Vmlld3BvcnQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVCb2R5Vmlld3BvcnQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRQaW5uZWRDb2xzQ29udGFpbmVyKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lUGlubmVkQ29sc0NvbnRhaW5lcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEhlYWRlckNvbnRhaW5lcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZUhlYWRlckNvbnRhaW5lcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFJvb3QoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVSb290O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0UGlubmVkSGVhZGVyKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lUGlubmVkSGVhZGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0SGVhZGVyKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lSGVhZGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Um93c1BhcmVudCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZVBhcmVudE9mUm93cztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZpbmRFbGVtZW50cygpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9yUHJpbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUhlYWRlckNvbnRhaW5lciA9IHRoaXMuZVJvb3QucXVlcnlTZWxlY3RvcihcIi5hZy1oZWFkZXItY29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lQm9keUNvbnRhaW5lciA9IHRoaXMuZVJvb3QucXVlcnlTZWxlY3RvcihcIi5hZy1ib2R5LWNvbnRhaW5lclwiKTtcclxuICAgICAgICAgICAgICAgIC8vIGZvciBuby1zY3JvbGxzLCBhbGwgcm93cyBsaXZlIGluIHRoZSBib2R5IGNvbnRhaW5lclxyXG4gICAgICAgICAgICAgICAgdGhpcy5lUGFyZW50T2ZSb3dzID0gdGhpcy5lQm9keUNvbnRhaW5lcjtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUJvZHkgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctYm9keVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUJvZHlDb250YWluZXIgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctYm9keS1jb250YWluZXJcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVCb2R5Vmlld3BvcnQgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctYm9keS12aWV3cG9ydFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUJvZHlWaWV3cG9ydFdyYXBwZXIgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctYm9keS12aWV3cG9ydC13cmFwcGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lUGlubmVkQ29sc0NvbnRhaW5lciA9IHRoaXMuZVJvb3QucXVlcnlTZWxlY3RvcihcIi5hZy1waW5uZWQtY29scy1jb250YWluZXJcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVQaW5uZWRDb2xzVmlld3BvcnQgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctcGlubmVkLWNvbHMtdmlld3BvcnRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVQaW5uZWRIZWFkZXIgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctcGlubmVkLWhlYWRlclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUhlYWRlciA9IHRoaXMuZVJvb3QucXVlcnlTZWxlY3RvcihcIi5hZy1oZWFkZXJcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVIZWFkZXJDb250YWluZXIgPSB0aGlzLmVSb290LnF1ZXJ5U2VsZWN0b3IoXCIuYWctaGVhZGVyLWNvbnRhaW5lclwiKTtcclxuICAgICAgICAgICAgICAgIC8vIGZvciBzY3JvbGxzLCBhbGwgcm93cyBsaXZlIGluIGVCb2R5IChjb250YWluaW5nIHBpbm5lZCBhbmQgbm9ybWFsIGJvZHkpXHJcbiAgICAgICAgICAgICAgICB0aGlzLmVQYXJlbnRPZlJvd3MgPSB0aGlzLmVCb2R5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRCb2R5Q29udGFpbmVyV2lkdGgoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYWluUm93V2lkdGggPSB0aGlzLmNvbHVtbk1vZGVsLmdldEJvZHlDb250YWluZXJXaWR0aCgpICsgXCJweFwiO1xyXG4gICAgICAgICAgICB0aGlzLmVCb2R5Q29udGFpbmVyLnN0eWxlLndpZHRoID0gbWFpblJvd1dpZHRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0UGlubmVkQ29sQ29udGFpbmVyV2lkdGgoKSB7XHJcbiAgICAgICAgICAgIHZhciBwaW5uZWRDb2xXaWR0aCA9IHRoaXMuY29sdW1uTW9kZWwuZ2V0UGlubmVkQ29udGFpbmVyV2lkdGgoKSArIFwicHhcIjtcclxuICAgICAgICAgICAgdGhpcy5lUGlubmVkQ29sc0NvbnRhaW5lci5zdHlsZS53aWR0aCA9IHBpbm5lZENvbFdpZHRoO1xyXG4gICAgICAgICAgICB0aGlzLmVCb2R5Vmlld3BvcnRXcmFwcGVyLnN0eWxlLm1hcmdpbkxlZnQgPSBwaW5uZWRDb2xXaWR0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNob3dQaW5uZWRDb2xDb250YWluZXJzSWZOZWVkZWQoKSB7XHJcbiAgICAgICAgICAgIC8vIG5vIG5lZWQgdG8gZG8gdGhpcyBpZiBub3QgdXNpbmcgc2Nyb2xsc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JQcmludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgc2hvd2luZ1Bpbm5lZENvbHMgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRQaW5uZWRDb2xDb3VudCgpID4gMDtcclxuXHJcbiAgICAgICAgICAgIC8vc29tZSBicm93c2VycyBoYWQgbGF5b3V0IGlzc3VlcyB3aXRoIHRoZSBibGFuayBkaXZzLCBzbyBpZiBibGFuayxcclxuICAgICAgICAgICAgLy93ZSBkb24ndCBkaXNwbGF5IHRoZW1cclxuICAgICAgICAgICAgaWYgKHNob3dpbmdQaW5uZWRDb2xzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVQaW5uZWRIZWFkZXIuc3R5bGUuZGlzcGxheSA9ICdpbmxpbmUtYmxvY2snO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lUGlubmVkQ29sc1ZpZXdwb3J0LnN0eWxlLmRpc3BsYXkgPSAnaW5saW5lJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZVBpbm5lZEhlYWRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lUGlubmVkQ29sc1ZpZXdwb3J0LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEhlYWRlckhlaWdodCgpIHtcclxuICAgICAgICAgICAgdmFyIGhlYWRlckhlaWdodCA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEhlYWRlckhlaWdodCgpO1xyXG4gICAgICAgICAgICB2YXIgaGVhZGVySGVpZ2h0UGl4ZWxzID0gaGVhZGVySGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9yUHJpbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZUhlYWRlckNvbnRhaW5lci5zdHlsZVsnaGVpZ2h0J10gPSBoZWFkZXJIZWlnaHRQaXhlbHM7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVIZWFkZXIuc3R5bGVbJ2hlaWdodCddID0gaGVhZGVySGVpZ2h0UGl4ZWxzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lQm9keS5zdHlsZVsncGFkZGluZ1RvcCddID0gaGVhZGVySGVpZ2h0UGl4ZWxzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuLy8gc2VlIGlmIGEgZ3JleSBib3ggaXMgbmVlZGVkIGF0IHRoZSBib3R0b20gb2YgdGhlIHBpbm5lZCBjb2xcclxuICAgICAgICBzZXRQaW5uZWRDb2xIZWlnaHQoKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5mb3JQcmludCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJvZHlIZWlnaHQgPSB0aGlzLmVCb2R5Vmlld3BvcnQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lUGlubmVkQ29sc1ZpZXdwb3J0LnN0eWxlLmhlaWdodCA9IGJvZHlIZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFNjcm9sbExpc3RlbmVyKCkge1xyXG4gICAgICAgICAgICAvLyBpZiBwcmludGluZywgdGhlbiBubyBzY3JvbGxpbmcsIHNvIG5vIHBvaW50IGluIGxpc3RlbmluZyBmb3Igc2Nyb2xsIGV2ZW50c1xyXG4gICAgICAgICAgICBpZiAodGhpcy5mb3JQcmludCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHZhciBsYXN0TGVmdFBvc2l0aW9uID0gLTE7XHJcbiAgICAgICAgICAgIHZhciBsYXN0VG9wUG9zaXRpb24gPSAtMTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZUJvZHlWaWV3cG9ydC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdMZWZ0UG9zaXRpb24gPSB0aGF0LmVCb2R5Vmlld3BvcnQuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgICAgIHZhciBuZXdUb3BQb3NpdGlvbiA9IHRoYXQuZUJvZHlWaWV3cG9ydC5zY3JvbGxUb3A7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0xlZnRQb3NpdGlvbiAhPT0gbGFzdExlZnRQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RMZWZ0UG9zaXRpb24gPSBuZXdMZWZ0UG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zY3JvbGxIZWFkZXIobmV3TGVmdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmV3VG9wUG9zaXRpb24gIT09IGxhc3RUb3BQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RUb3BQb3NpdGlvbiA9IG5ld1RvcFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2Nyb2xsUGlubmVkKG5ld1RvcFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJvd1JlbmRlcmVyLmRyYXdWaXJ0dWFsUm93cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZVBpbm5lZENvbHNWaWV3cG9ydC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgbWVhbnMgdGhlIHBpbm5lZCBwYW5lbCB3YXMgbW92ZWQsIHdoaWNoIGNhbiBvbmx5XHJcbiAgICAgICAgICAgICAgICAvLyBoYXBwZW4gd2hlbiB0aGUgdXNlciBpcyBuYXZpZ2F0aW5nIGluIHRoZSBwaW5uZWQgY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAvLyBhcyB0aGUgcGlubmVkIGNvbCBzaG91bGQgbmV2ZXIgc2Nyb2xsLiBzbyB3ZSByb2xsYmFja1xyXG4gICAgICAgICAgICAgICAgLy8gdGhlIHNjcm9sbCBvbiB0aGUgcGlubmVkLlxyXG4gICAgICAgICAgICAgICAgdGhhdC5lUGlubmVkQ29sc1ZpZXdwb3J0LnNjcm9sbFRvcCA9IDA7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNjcm9sbEhlYWRlcihib2R5TGVmdFBvc2l0aW9uOiBhbnkpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5lSGVhZGVyQ29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgLWJvZHlMZWZ0UG9zaXRpb24gKyBcInB4LDAsMClcIjtcclxuICAgICAgICAgICAgdGhpcy5lSGVhZGVyQ29udGFpbmVyLnN0eWxlLmxlZnQgPSAtYm9keUxlZnRQb3NpdGlvbiArIFwicHhcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNjcm9sbFBpbm5lZChib2R5VG9wUG9zaXRpb246IGFueSkge1xyXG4gICAgICAgICAgICAvLyB0aGlzLmVQaW5uZWRDb2xzQ29udGFpbmVyLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLCcgKyAtYm9keVRvcFBvc2l0aW9uICsgXCJweCwwKVwiO1xyXG4gICAgICAgICAgICB0aGlzLmVQaW5uZWRDb2xzQ29udGFpbmVyLnN0eWxlLnRvcCA9IC1ib2R5VG9wUG9zaXRpb24gKyBcInB4XCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgRHJhZ0FuZERyb3BTZXJ2aWNlIHtcclxuXHJcbiAgICAgICAgc3RhdGljIHRoZUluc3RhbmNlOiBEcmFnQW5kRHJvcFNlcnZpY2U7XHJcblxyXG4gICAgICAgIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBEcmFnQW5kRHJvcFNlcnZpY2Uge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMudGhlSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGhlSW5zdGFuY2UgPSBuZXcgRHJhZ0FuZERyb3BTZXJ2aWNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhlSW5zdGFuY2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcmFnSXRlbTogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgLy8gbmVlZCB0byBjbGVhbiB0aGlzIHVwLCBhZGQgdG8gJ2ZpbmlzaGVkJyBsb2dpYyBpbiBncmlkXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLnN0b3BEcmFnZ2luZy5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN0b3BEcmFnZ2luZygpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZHJhZ0l0ZW0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RHJhZ0Nzc0NsYXNzZXModGhpcy5kcmFnSXRlbS5lRHJhZ1NvdXJjZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcmFnSXRlbSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldERyYWdDc3NDbGFzc2VzKGVMaXN0SXRlbTogYW55LCBkcmFnZ2luZzogYW55KSB7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZE9yUmVtb3ZlQ3NzQ2xhc3MoZUxpc3RJdGVtLCAnYWctZHJhZ2dpbmcnLCBkcmFnZ2luZyk7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZE9yUmVtb3ZlQ3NzQ2xhc3MoZUxpc3RJdGVtLCAnYWctbm90LWRyYWdnaW5nJywgIWRyYWdnaW5nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZERyYWdTb3VyY2UoZURyYWdTb3VyY2U6IGFueSwgZHJhZ1NvdXJjZUNhbGxiYWNrOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0RHJhZ0Nzc0NsYXNzZXMoZURyYWdTb3VyY2UsIGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGVEcmFnU291cmNlLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uTW91c2VEb3duRHJhZ1NvdXJjZS5iaW5kKHRoaXMsIGVEcmFnU291cmNlLCBkcmFnU291cmNlQ2FsbGJhY2spKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uTW91c2VEb3duRHJhZ1NvdXJjZShlRHJhZ1NvdXJjZTogYW55LCBkcmFnU291cmNlQ2FsbGJhY2s6IGFueSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kcmFnSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wRHJhZ2dpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZGF0YTogYW55O1xyXG4gICAgICAgICAgICBpZiAoZHJhZ1NvdXJjZUNhbGxiYWNrLmdldERhdGEpIHtcclxuICAgICAgICAgICAgICAgIGRhdGEgPSBkcmFnU291cmNlQ2FsbGJhY2suZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXJJZDogYW55O1xyXG4gICAgICAgICAgICBpZiAoZHJhZ1NvdXJjZUNhbGxiYWNrLmdldENvbnRhaW5lcklkKSB7XHJcbiAgICAgICAgICAgICAgICBjb250YWluZXJJZCA9IGRyYWdTb3VyY2VDYWxsYmFjay5nZXRDb250YWluZXJJZCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRyYWdJdGVtID0ge1xyXG4gICAgICAgICAgICAgICAgZURyYWdTb3VyY2U6IGVEcmFnU291cmNlLFxyXG4gICAgICAgICAgICAgICAgZGF0YTogZGF0YSxcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcklkOiBjb250YWluZXJJZFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLnNldERyYWdDc3NDbGFzc2VzKHRoaXMuZHJhZ0l0ZW0uZURyYWdTb3VyY2UsIHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkRHJvcFRhcmdldChlRHJvcFRhcmdldDogYW55LCBkcm9wVGFyZ2V0Q2FsbGJhY2s6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgbW91c2VJbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgYWNjZXB0RHJhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBlRHJvcFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW92ZXInLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbW91c2VJbikge1xyXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlSW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGF0LmRyYWdJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdERyYWcgPSBkcm9wVGFyZ2V0Q2FsbGJhY2suYWNjZXB0RHJhZyh0aGF0LmRyYWdJdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHREcmFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGVEcm9wVGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWNjZXB0RHJhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRyb3BUYXJnZXRDYWxsYmFjay5ub0Ryb3AoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1vdXNlSW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGFjY2VwdERyYWcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBlRHJvcFRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBkcmFnSXRlbSBzaG91bGQgbmV2ZXIgYmUgbnVsbCwgY2hlY2tpbmcganVzdCBpbiBjYXNlXHJcbiAgICAgICAgICAgICAgICBpZiAoYWNjZXB0RHJhZyAmJiB0aGF0LmRyYWdJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcFRhcmdldENhbGxiYWNrLmRyb3AodGhhdC5kcmFnSXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL2RyYWdBbmREcm9wL2RyYWdBbmREcm9wU2VydmljZVwiIC8+XHJcbi8vLyA8YW1kLWRlcGVuZGVuY3kgcGF0aD1cInRleHQhYWdMaXN0Lmh0bWxcIi8+XHJcblxyXG5kZWNsYXJlIGZ1bmN0aW9uIHJlcXVpcmUobmFtZTogc3RyaW5nKTogYW55O1xyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICAvL3ZhciB0ZW1wbGF0ZSA9IHJlcXVpcmUoJy4vYWdMaXN0Lmh0bWwnKTtcclxuICAgIHZhciB1dGlscyA9IFV0aWxzO1xyXG4gICAgdmFyIGRyYWdBbmREcm9wU2VydmljZSA9IERyYWdBbmREcm9wU2VydmljZS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgdmFyIHRlbXBsYXRlID1cclxuICAgICAgICAnPGRpdiBjbGFzcz1cImFnLWxpc3Qtc2VsZWN0aW9uXCI+JytcclxuICAgICAgICAgICAgJzxkaXY+JytcclxuICAgICAgICAgICAgICAgICc8ZGl2IGFnLXJlcGVhdCBjbGFzcz1cImFnLWxpc3QtaXRlbVwiPicrXHJcbiAgICAgICAgICAgICAgICAnPC9kaXY+JytcclxuICAgICAgICAgICAgJzwvZGl2PicrXHJcbiAgICAgICAgJzwvZGl2Pic7XHJcblxyXG4gICAgdmFyIE5PVF9EUk9QX1RBUkdFVCA9IDA7XHJcbiAgICB2YXIgRFJPUF9UQVJHRVRfQUJPVkUgPSAxO1xyXG4gICAgdmFyIERST1BfVEFSR0VUX0JFTE9XID0gLTExO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBBZ0xpc3Qge1xyXG5cclxuICAgICAgICBlR3VpOiBhbnk7XHJcbiAgICAgICAgdW5pcXVlSWQ6IGFueTtcclxuICAgICAgICBtb2RlbENoYW5nZWRMaXN0ZW5lcnM6IGFueTtcclxuICAgICAgICBpdGVtU2VsZWN0ZWRMaXN0ZW5lcnM6IGFueTtcclxuICAgICAgICBiZWZvcmVEcm9wTGlzdGVuZXJzOiBhbnk7XHJcbiAgICAgICAgZHJhZ1NvdXJjZXM6IGFueTtcclxuICAgICAgICBlbXB0eU1lc3NhZ2U6IGFueTtcclxuICAgICAgICBlRmlsdGVyVmFsdWVUZW1wbGF0ZTogYW55O1xyXG4gICAgICAgIGVMaXN0UGFyZW50OiBhbnk7XHJcbiAgICAgICAgbW9kZWw6IGFueTtcclxuICAgICAgICBjZWxsUmVuZGVyZXI6IGFueTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBDb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMudW5pcXVlSWQgPSAnQ2hlY2tib3hTZWxlY3Rpb24tJyArIE1hdGgucmFuZG9tKCk7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWxDaGFuZ2VkTGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbVNlbGVjdGVkTGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlRHJvcExpc3RlbmVycyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmRyYWdTb3VyY2VzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBBc0Ryb3BUYXJnZXQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEVtcHR5TWVzc2FnZShlbXB0eU1lc3NhZ2U6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtcHR5TWVzc2FnZSA9IGVtcHR5TWVzc2FnZTtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0VW5pcXVlSWQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnVuaXF1ZUlkO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkU3R5bGVzKHN0eWxlczogYW55KSB7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZFN0eWxlc1RvRWxlbWVudCh0aGlzLmVHdWksIHN0eWxlcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRDc3NDbGFzcyhjc3NDbGFzczogYW55KSB7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZENzc0NsYXNzKHRoaXMuZUd1aSwgY3NzQ2xhc3MpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkRHJhZ1NvdXJjZShkcmFnU291cmNlOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5kcmFnU291cmNlcy5wdXNoKGRyYWdTb3VyY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkTW9kZWxDaGFuZ2VkTGlzdGVuZXIobGlzdGVuZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsQ2hhbmdlZExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZEl0ZW1TZWxlY3RlZExpc3RlbmVyKGxpc3RlbmVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtU2VsZWN0ZWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGRCZWZvcmVEcm9wTGlzdGVuZXIobGlzdGVuZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmJlZm9yZURyb3BMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaXJlTW9kZWxDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubW9kZWxDaGFuZ2VkTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsQ2hhbmdlZExpc3RlbmVyc1tpXSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaXJlSXRlbVNlbGVjdGVkKGl0ZW06IGFueSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbVNlbGVjdGVkTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1TZWxlY3RlZExpc3RlbmVyc1tpXShpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZmlyZUJlZm9yZURyb3AoaXRlbTogYW55KSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5iZWZvcmVEcm9wTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJlZm9yZURyb3BMaXN0ZW5lcnNbaV0oaXRlbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldHVwQ29tcG9uZW50cygpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZUd1aSA9IHV0aWxzLmxvYWRUZW1wbGF0ZSh0ZW1wbGF0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuZUZpbHRlclZhbHVlVGVtcGxhdGUgPSB0aGlzLmVHdWkucXVlcnlTZWxlY3RvcihcIlthZy1yZXBlYXRdXCIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lTGlzdFBhcmVudCA9IHRoaXMuZUZpbHRlclZhbHVlVGVtcGxhdGUucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgdXRpbHMucmVtb3ZlQWxsQ2hpbGRyZW4odGhpcy5lTGlzdFBhcmVudCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRNb2RlbChtb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwgPSBtb2RlbDtcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0TW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0Q2VsbFJlbmRlcmVyKGNlbGxSZW5kZXJlcjogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbFJlbmRlcmVyID0gY2VsbFJlbmRlcmVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVmcmVzaFZpZXcoKSB7XHJcbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUFsbENoaWxkcmVuKHRoaXMuZUxpc3RQYXJlbnQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMubW9kZWwgJiYgdGhpcy5tb2RlbC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydFJvd3MoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0QmxhbmtNZXNzYWdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluc2VydFJvd3MoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5tb2RlbC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLm1vZGVsW2ldO1xyXG4gICAgICAgICAgICAgICAgLy92YXIgdGV4dCA9IHRoaXMuZ2V0VGV4dChpdGVtKTtcclxuICAgICAgICAgICAgICAgIC8vdmFyIHNlbGVjdGVkID0gdGhpcy5pc1NlbGVjdGVkKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIGVMaXN0SXRlbSA9IHRoaXMuZUZpbHRlclZhbHVlVGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNlbGxSZW5kZXJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7dmFsdWU6IGl0ZW19O1xyXG4gICAgICAgICAgICAgICAgICAgIHV0aWxzLnVzZVJlbmRlcmVyKGVMaXN0SXRlbSwgdGhpcy5jZWxsUmVuZGVyZXIsIHBhcmFtcyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGVMaXN0SXRlbS5pbm5lckhUTUwgPSBpdGVtO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGVMaXN0SXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuZmlyZUl0ZW1TZWxlY3RlZC5iaW5kKHRoaXMsIGl0ZW0pKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZERyYWdBbmREcm9wVG9MaXN0SXRlbShlTGlzdEl0ZW0sIGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lTGlzdFBhcmVudC5hcHBlbmRDaGlsZChlTGlzdEl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnNlcnRCbGFua01lc3NhZ2UoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmVtcHR5TWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBlTWVzc2FnZS5zdHlsZS5jb2xvciA9ICdncmV5JztcclxuICAgICAgICAgICAgICAgIGVNZXNzYWdlLnN0eWxlLnBhZGRpbmcgPSAnNHB4JztcclxuICAgICAgICAgICAgICAgIGVNZXNzYWdlLnN0eWxlLnRleHRBbGlnbiA9ICdjZW50ZXInO1xyXG4gICAgICAgICAgICAgICAgZU1lc3NhZ2UuaW5uZXJIVE1MID0gdGhpcy5lbXB0eU1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVMaXN0UGFyZW50LmFwcGVuZENoaWxkKGVNZXNzYWdlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dXBBc0Ryb3BUYXJnZXQoKSB7XHJcbiAgICAgICAgICAgIGRyYWdBbmREcm9wU2VydmljZS5hZGREcm9wVGFyZ2V0KHRoaXMuZUd1aSwge1xyXG4gICAgICAgICAgICAgICAgYWNjZXB0RHJhZzogdGhpcy5leHRlcm5hbEFjY2VwdERyYWcuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgICAgIGRyb3A6IHRoaXMuZXh0ZXJuYWxEcm9wLmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgICAgICBub0Ryb3A6IHRoaXMuZXh0ZXJuYWxOb0Ryb3AuYmluZCh0aGlzKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGV4dGVybmFsQWNjZXB0RHJhZyhkcmFnRXZlbnQ6IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgYWxsb3dlZFNvdXJjZSA9IHRoaXMuZHJhZ1NvdXJjZXMuaW5kZXhPZihkcmFnRXZlbnQuY29udGFpbmVySWQpID49IDA7XHJcbiAgICAgICAgICAgIGlmICghYWxsb3dlZFNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBhbHJlYWR5SGF2ZUNvbCA9IHRoaXMubW9kZWwuaW5kZXhPZihkcmFnRXZlbnQuZGF0YSkgPj0gMDtcclxuICAgICAgICAgICAgaWYgKGFscmVhZHlIYXZlQ29sKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5lR3VpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICdsaWdodGdyZWVuJztcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHRlcm5hbERyb3AoZHJhZ0V2ZW50OiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIG5ld0xpc3RJdGVtID0gZHJhZ0V2ZW50LmRhdGE7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZUJlZm9yZURyb3AobmV3TGlzdEl0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmFkZEl0ZW1Ub0xpc3QobmV3TGlzdEl0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLmVHdWkuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHRlcm5hbE5vRHJvcCgpIHtcclxuICAgICAgICAgICAgdGhpcy5lR3VpLnN0eWxlLmJhY2tncm91bmRDb2xvciA9ICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkSXRlbVRvTGlzdChuZXdJdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5wdXNoKG5ld0l0ZW0pO1xyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZU1vZGVsQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkRHJhZ0FuZERyb3BUb0xpc3RJdGVtKGVMaXN0SXRlbTogYW55LCBpdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBkcmFnQW5kRHJvcFNlcnZpY2UuYWRkRHJhZ1NvdXJjZShlTGlzdEl0ZW0sIHtcclxuICAgICAgICAgICAgICAgIGdldERhdGE6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXRlbTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRDb250YWluZXJJZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnVuaXF1ZUlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZHJhZ0FuZERyb3BTZXJ2aWNlLmFkZERyb3BUYXJnZXQoZUxpc3RJdGVtLCB7XHJcbiAgICAgICAgICAgICAgICBhY2NlcHREcmFnOiBmdW5jdGlvbiAoZHJhZ0l0ZW06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmludGVybmFsQWNjZXB0RHJhZyhpdGVtLCBkcmFnSXRlbSwgZUxpc3RJdGVtKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBkcm9wOiBmdW5jdGlvbiAoZHJhZ0l0ZW06IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaW50ZXJuYWxEcm9wKGl0ZW0sIGRyYWdJdGVtLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG5vRHJvcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaW50ZXJuYWxOb0Ryb3AoZUxpc3RJdGVtKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbEFjY2VwdERyYWcodGFyZ2V0Q29sdW1uOiBhbnksIGRyYWdJdGVtOiBhbnksIGVMaXN0SXRlbTogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBkcmFnSXRlbS5kYXRhICE9PSB0YXJnZXRDb2x1bW4gJiYgZHJhZ0l0ZW0uY29udGFpbmVySWQgPT09IHRoaXMudW5pcXVlSWQ7XHJcbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRyYWdBZnRlclRoaXNJdGVtKHRhcmdldENvbHVtbiwgZHJhZ0l0ZW0uZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERyb3BDc3NDbGFzc2VzKGVMaXN0SXRlbSwgRFJPUF9UQVJHRVRfQUJPVkUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldERyb3BDc3NDbGFzc2VzKGVMaXN0SXRlbSwgRFJPUF9UQVJHRVRfQkVMT1cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpbnRlcm5hbERyb3AodGFyZ2V0Q29sdW1uOiBhbnksIGRyYWdnZWRDb2x1bW46IGFueSkge1xyXG4gICAgICAgICAgICB2YXIgb2xkSW5kZXggPSB0aGlzLm1vZGVsLmluZGV4T2YoZHJhZ2dlZENvbHVtbik7XHJcbiAgICAgICAgICAgIHZhciBuZXdJbmRleCA9IHRoaXMubW9kZWwuaW5kZXhPZih0YXJnZXRDb2x1bW4pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5zcGxpY2Uob2xkSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB0aGlzLm1vZGVsLnNwbGljZShuZXdJbmRleCwgMCwgZHJhZ2dlZENvbHVtbik7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmlyZU1vZGVsQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaW50ZXJuYWxOb0Ryb3AoZUxpc3RJdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXREcm9wQ3NzQ2xhc3NlcyhlTGlzdEl0ZW0sIE5PVF9EUk9QX1RBUkdFVCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkcmFnQWZ0ZXJUaGlzSXRlbSh0YXJnZXRDb2x1bW46IGFueSwgZHJhZ2dlZENvbHVtbjogYW55KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmluZGV4T2YodGFyZ2V0Q29sdW1uKSA8IHRoaXMubW9kZWwuaW5kZXhPZihkcmFnZ2VkQ29sdW1uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldERyb3BDc3NDbGFzc2VzKGVMaXN0SXRlbTogYW55LCBzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZE9yUmVtb3ZlQ3NzQ2xhc3MoZUxpc3RJdGVtLCAnYWctbm90LWRyb3AtdGFyZ2V0Jywgc3RhdGUgPT09IE5PVF9EUk9QX1RBUkdFVCk7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZE9yUmVtb3ZlQ3NzQ2xhc3MoZUxpc3RJdGVtLCAnYWctZHJvcC10YXJnZXQtYWJvdmUnLCBzdGF0ZSA9PT0gRFJPUF9UQVJHRVRfQUJPVkUpO1xyXG4gICAgICAgICAgICB1dGlscy5hZGRPclJlbW92ZUNzc0NsYXNzKGVMaXN0SXRlbSwgJ2FnLWRyb3AtdGFyZ2V0LWJlbG93Jywgc3RhdGUgPT09IERST1BfVEFSR0VUX0JFTE9XKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEd1aSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZUd1aTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vd2lkZ2V0cy9hZ0xpc3QudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vc3ZnRmFjdG9yeS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9sYXlvdXQvQm9yZGVyTGF5b3V0LnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIHV0aWxzID0gVXRpbHM7XHJcbiAgICB2YXIgc3ZnRmFjdG9yeSA9IFN2Z0ZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQ29sdW1uU2VsZWN0aW9uUGFuZWwge1xyXG5cclxuICAgICAgICBncmlkT3B0aW9uc1dyYXBwZXI6IGFueTtcclxuICAgICAgICBjb2x1bW5Db250cm9sbGVyOiBhbnk7XHJcbiAgICAgICAgY0NvbHVtbkxpc3Q6IGFueTtcclxuICAgICAgICBsYXlvdXQ6IGFueTtcclxuICAgICAgICBlUm9vdFBhbmVsOiBhbnk7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKGNvbHVtbkNvbnRyb2xsZXI6IGFueSwgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBDb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlciA9IGNvbHVtbkNvbnRyb2xsZXI7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlci5hZGRMaXN0ZW5lcih7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zQ2hhbmdlZDogdGhhdC5jb2x1bW5zQ2hhbmdlZC5iaW5kKHRoYXQpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29sdW1uc0NoYW5nZWQobmV3Q29sdW1uczogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3Quc2V0TW9kZWwobmV3Q29sdW1ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXREcmFnU291cmNlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jQ29sdW1uTGlzdC5nZXRVbmlxdWVJZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29sdW1uQ2VsbFJlbmRlcmVyKHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSBwYXJhbXMudmFsdWU7XHJcbiAgICAgICAgICAgIHZhciBjb2xEaXNwbGF5TmFtZSA9IHRoaXMuY29sdW1uQ29udHJvbGxlci5nZXREaXNwbGF5TmFtZUZvckNvbChjb2x1bW4pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVSZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVZpc2libGVJY29ucyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgdXRpbHMuYWRkQ3NzQ2xhc3MoZVZpc2libGVJY29ucywgJ2FnLXZpc2libGUtaWNvbnMnKTtcclxuICAgICAgICAgICAgdmFyIGVTaG93aW5nID0gdXRpbHMuY3JlYXRlSWNvbignY29sdW1uVmlzaWJsZScsIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLCBjb2x1bW4sIHN2Z0ZhY3RvcnkuY3JlYXRlQ29sdW1uU2hvd2luZ1N2Zyk7XHJcbiAgICAgICAgICAgIHZhciBlSGlkZGVuID0gdXRpbHMuY3JlYXRlSWNvbignY29sdW1uSGlkZGVuJywgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbiwgc3ZnRmFjdG9yeS5jcmVhdGVDb2x1bW5IaWRkZW5TdmcpO1xyXG4gICAgICAgICAgICBlVmlzaWJsZUljb25zLmFwcGVuZENoaWxkKGVTaG93aW5nKTtcclxuICAgICAgICAgICAgZVZpc2libGVJY29ucy5hcHBlbmRDaGlsZChlSGlkZGVuKTtcclxuICAgICAgICAgICAgZVNob3dpbmcuc3R5bGUuZGlzcGxheSA9IGNvbHVtbi52aXNpYmxlID8gJycgOiAnbm9uZSc7XHJcbiAgICAgICAgICAgIGVIaWRkZW4uc3R5bGUuZGlzcGxheSA9IGNvbHVtbi52aXNpYmxlID8gJ25vbmUnIDogJyc7XHJcbiAgICAgICAgICAgIGVSZXN1bHQuYXBwZW5kQ2hpbGQoZVZpc2libGVJY29ucyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICBlVmFsdWUuaW5uZXJIVE1MID0gY29sRGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgIGVSZXN1bHQuYXBwZW5kQ2hpbGQoZVZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29sdW1uLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHV0aWxzLmFkZENzc0NsYXNzKGVSZXN1bHQsICdhZy1jb2x1bW4tbm90LXZpc2libGUnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gY2hhbmdlIHZpc2libGUgaWYgdXNlIGNsaWNrcyB0aGUgdmlzaWJsZSBpY29uLCBvciBpZiByb3cgaXMgZG91YmxlIGNsaWNrZWRcclxuICAgICAgICAgICAgZVZpc2libGVJY29ucy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHNob3dFdmVudExpc3RlbmVyKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNob3dFdmVudExpc3RlbmVyKCkge1xyXG4gICAgICAgICAgICAgICAgY29sdW1uLnZpc2libGUgPSAhY29sdW1uLnZpc2libGU7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmNDb2x1bW5MaXN0LnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmNvbHVtbkNvbnRyb2xsZXIub25Db2x1bW5TdGF0ZUNoYW5nZWQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVSZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXR1cENvbXBvbmVudHMoKSB7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0ID0gbmV3IEFnTGlzdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0LnNldENlbGxSZW5kZXJlcih0aGlzLmNvbHVtbkNlbGxSZW5kZXJlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5jQ29sdW1uTGlzdC5hZGRTdHlsZXMoe2hlaWdodDogJzEwMCUnLCBvdmVyZmxvdzogJ2F1dG8nfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3QuYWRkTW9kZWxDaGFuZ2VkTGlzdGVuZXIoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5Db250cm9sbGVyLm9uQ29sdW1uU3RhdGVDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGxvY2FsZVRleHRGdW5jID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0TG9jYWxlVGV4dEZ1bmMoKTtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbnNMb2NhbFRleHQgPSBsb2NhbGVUZXh0RnVuYygnY29sdW1ucycsICdDb2x1bW5zJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZU5vcnRoUGFuZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgZU5vcnRoUGFuZWwuaW5uZXJIVE1MID0gJzxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7XCI+JyArIGNvbHVtbnNMb2NhbFRleHQgKyAnPC9kaXY+JztcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0ID0gbmV3IEJvcmRlckxheW91dCh7XHJcbiAgICAgICAgICAgICAgICBjZW50ZXI6IHRoaXMuY0NvbHVtbkxpc3QuZ2V0R3VpKCksXHJcbiAgICAgICAgICAgICAgICBub3J0aDogZU5vcnRoUGFuZWxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBub3Qgc3VyZSBpZiB0aGlzIGlzIGNhbGxlZCBhbnl3aGVyZVxyXG4gICAgICAgIHNldFNlbGVjdGVkKGNvbHVtbjogYW55LCBzZWxlY3RlZDogYW55KSB7XHJcbiAgICAgICAgICAgIGNvbHVtbi52aXNpYmxlID0gc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlci5vbkNvbHVtblN0YXRlQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0R3VpKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lUm9vdFBhbmVsLmdldEd1aSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3dpZGdldHMvYWdMaXN0LnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3N2Z0ZhY3RvcnkudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbGF5b3V0L0JvcmRlckxheW91dC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25zdGFudHMudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuICAgIHZhciBzdmdGYWN0b3J5ID0gU3ZnRmFjdG9yeS5nZXRJbnN0YW5jZSgpO1xyXG4gICAgdmFyIGNvbnN0YW50cyA9IENvbnN0YW50cztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgR3JvdXBTZWxlY3Rpb25QYW5lbCB7XHJcblxyXG4gICAgICAgIGdyaWRPcHRpb25zV3JhcHBlcjogYW55O1xyXG4gICAgICAgIGNvbHVtbkNvbnRyb2xsZXI6IGFueTtcclxuICAgICAgICBpbk1lbW9yeVJvd0NvbnRyb2xsZXI6IGFueTtcclxuICAgICAgICBjQ29sdW1uTGlzdDogYW55O1xyXG4gICAgICAgIGxheW91dDogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3Rvcihjb2x1bW5Db250cm9sbGVyOiBhbnksIGluTWVtb3J5Um93Q29udHJvbGxlcjogYW55LCBncmlkT3B0aW9uc1dyYXBwZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRPcHRpb25zV3JhcHBlciA9IGdyaWRPcHRpb25zV3JhcHBlcjtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cENvbXBvbmVudHMoKTtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5Db250cm9sbGVyID0gY29sdW1uQ29udHJvbGxlcjtcclxuICAgICAgICAgICAgdGhpcy5pbk1lbW9yeVJvd0NvbnRyb2xsZXIgPSBpbk1lbW9yeVJvd0NvbnRyb2xsZXI7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlci5hZGRMaXN0ZW5lcih7XHJcbiAgICAgICAgICAgICAgICBjb2x1bW5zQ2hhbmdlZDogdGhhdC5jb2x1bW5zQ2hhbmdlZC5iaW5kKHRoYXQpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29sdW1uc0NoYW5nZWQobmV3Q29sdW1uczogYW55LCBuZXdHcm91cGVkQ29sdW1uczogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3Quc2V0TW9kZWwobmV3R3JvdXBlZENvbHVtbnMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkRHJhZ1NvdXJjZShkcmFnU291cmNlOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5jQ29sdW1uTGlzdC5hZGREcmFnU291cmNlKGRyYWdTb3VyY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29sdW1uQ2VsbFJlbmRlcmVyKHBhcmFtczogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW4gPSBwYXJhbXMudmFsdWU7XHJcbiAgICAgICAgICAgIHZhciBjb2xEaXNwbGF5TmFtZSA9IHRoaXMuY29sdW1uQ29udHJvbGxlci5nZXREaXNwbGF5TmFtZUZvckNvbChjb2x1bW4pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVSZXN1bHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVJlbW92ZSA9IHV0aWxzLmNyZWF0ZUljb24oJ2NvbHVtblJlbW92ZUZyb21Hcm91cCcsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRPcHRpb25zV3JhcHBlciwgY29sdW1uLCBzdmdGYWN0b3J5LmNyZWF0ZUFycm93VXBTdmcpO1xyXG4gICAgICAgICAgICB1dGlscy5hZGRDc3NDbGFzcyhlUmVtb3ZlLCAnYWctdmlzaWJsZS1pY29ucycpO1xyXG4gICAgICAgICAgICBlUmVzdWx0LmFwcGVuZENoaWxkKGVSZW1vdmUpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBlUmVtb3ZlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsID0gdGhhdC5jQ29sdW1uTGlzdC5nZXRNb2RlbCgpO1xyXG4gICAgICAgICAgICAgICAgbW9kZWwuc3BsaWNlKG1vZGVsLmluZGV4T2YoY29sdW1uKSwgMSk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmNDb2x1bW5MaXN0LnNldE1vZGVsKG1vZGVsKTtcclxuICAgICAgICAgICAgICAgIHRoYXQub25Hcm91cGluZ0NoYW5nZWQoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICBlVmFsdWUuaW5uZXJIVE1MID0gY29sRGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgIGVSZXN1bHQuYXBwZW5kQ2hpbGQoZVZhbHVlKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBlUmVzdWx0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dXBDb21wb25lbnRzKCkge1xyXG4gICAgICAgICAgICB2YXIgbG9jYWxlVGV4dEZ1bmMgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRMb2NhbGVUZXh0RnVuYygpO1xyXG4gICAgICAgICAgICB2YXIgY29sdW1uc0xvY2FsVGV4dCA9IGxvY2FsZVRleHRGdW5jKCdwaXZvdGVkQ29sdW1ucycsICdQaXZvdGVkIENvbHVtbnMnKTtcclxuICAgICAgICAgICAgdmFyIHBpdm90ZWRDb2x1bW5zRW1wdHlNZXNzYWdlID0gbG9jYWxlVGV4dEZ1bmMoJ3Bpdm90ZWRDb2x1bW5zRW1wdHlNZXNzYWdlJywgJ0RyYWcgY29sdW1ucyBmcm9tIGFib3ZlIHRvIHBpdm90Jyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0ID0gbmV3IEFnTGlzdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0LnNldENlbGxSZW5kZXJlcih0aGlzLmNvbHVtbkNlbGxSZW5kZXJlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5jQ29sdW1uTGlzdC5hZGRNb2RlbENoYW5nZWRMaXN0ZW5lcih0aGlzLm9uR3JvdXBpbmdDaGFuZ2VkLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0LnNldEVtcHR5TWVzc2FnZShwaXZvdGVkQ29sdW1uc0VtcHR5TWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3QuYWRkU3R5bGVzKHtoZWlnaHQ6ICcxMDAlJywgb3ZlcmZsb3c6ICdhdXRvJ30pO1xyXG5cclxuICAgICAgICAgICAgdmFyIGVOb3J0aFBhbmVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgIGVOb3J0aFBhbmVsLnN0eWxlLnBhZGRpbmdUb3AgPSAnMTBweCc7XHJcbiAgICAgICAgICAgIGVOb3J0aFBhbmVsLmlubmVySFRNTCA9ICc8ZGl2IHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyO1wiPicgKyBjb2x1bW5zTG9jYWxUZXh0ICsgJzwvZGl2Pic7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxheW91dCA9IG5ldyBCb3JkZXJMYXlvdXQoe1xyXG4gICAgICAgICAgICAgICAgY2VudGVyOiB0aGlzLmNDb2x1bW5MaXN0LmdldEd1aSgpLFxyXG4gICAgICAgICAgICAgICAgbm9ydGg6IGVOb3J0aFBhbmVsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25Hcm91cGluZ0NoYW5nZWQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5NZW1vcnlSb3dDb250cm9sbGVyLmRvR3JvdXBpbmcoKTtcclxuICAgICAgICAgICAgdGhpcy5pbk1lbW9yeVJvd0NvbnRyb2xsZXIudXBkYXRlTW9kZWwoY29uc3RhbnRzLlNURVBfRVZFUllUSElORyk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlci5vbkNvbHVtblN0YXRlQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy9nZXRHdWkoKSB7XHJcbiAgICAgICAgLy8gICAgcmV0dXJuIHRoaXMuZVJvb3RQYW5lbC5nZXRHdWkoKTtcclxuICAgICAgICAvL31cclxuICAgIH1cclxufVxyXG5cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3V0aWxzLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vYWdMaXN0LnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3N2Z0ZhY3RvcnkudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vd2lkZ2V0cy9hZ1BvcHVwU2VydmljZS50c1wiIC8+XHJcblxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciB1dGlscyA9IFV0aWxzO1xyXG4gICAgdmFyIHN2Z0ZhY3RvcnkgPSBTdmdGYWN0b3J5LmdldEluc3RhbmNlKCk7XHJcbiAgICB2YXIgYWdQb3B1cFNlcnZpY2UgPSBQb3B1cFNlcnZpY2UuZ2V0SW5zdGFuY2UoKTtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgQWdEcm9wZG93bkxpc3Qge1xyXG5cclxuICAgICAgICBpdGVtU2VsZWN0ZWRMaXN0ZW5lcnM6IGFueTtcclxuICAgICAgICBlVmFsdWU6IGFueTtcclxuICAgICAgICBhZ0xpc3Q6IGFueTtcclxuICAgICAgICBlR3VpOiBhbnk7XHJcbiAgICAgICAgaGlkZVBvcHVwQ2FsbGJhY2s6IGFueTtcclxuICAgICAgICBzZWxlY3RlZEl0ZW06IGFueTtcclxuICAgICAgICBjZWxsUmVuZGVyZXI6IGFueTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBDb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbVNlbGVjdGVkTGlzdGVuZXJzID0gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRXaWR0aCh3aWR0aDogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZVZhbHVlLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICB0aGlzLmFnTGlzdC5hZGRTdHlsZXMoe3dpZHRoOiB3aWR0aCArICdweCd9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZEl0ZW1TZWxlY3RlZExpc3RlbmVyKGxpc3RlbmVyOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5pdGVtU2VsZWN0ZWRMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaXJlSXRlbVNlbGVjdGVkKGl0ZW06IGFueSkge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuaXRlbVNlbGVjdGVkTGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1TZWxlY3RlZExpc3RlbmVyc1tpXShpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dXBDb21wb25lbnRzKCkge1xyXG4gICAgICAgICAgICB0aGlzLmVHdWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XHJcbiAgICAgICAgICAgIHRoaXMuZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICB0aGlzLmVHdWkuYXBwZW5kQ2hpbGQodGhpcy5lVmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLmFnTGlzdCA9IG5ldyBBZ0xpc3QoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZVZhbHVlLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5vbkNsaWNrLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICB0aGlzLmFnTGlzdC5hZGRJdGVtU2VsZWN0ZWRMaXN0ZW5lcih0aGlzLml0ZW1TZWxlY3RlZC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgdGhpcy5hZ0xpc3QuYWRkQ3NzQ2xhc3MoJ2FnLXBvcHVwLWxpc3QnKTtcclxuXHJcbiAgICAgICAgICAgIHV0aWxzLmFkZFN0eWxlc1RvRWxlbWVudCh0aGlzLmVWYWx1ZSwge1xyXG4gICAgICAgICAgICAgICAgYm9yZGVyOiAnMXB4IHNvbGlkIGRhcmtncmV5JyxcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IDJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHV0aWxzLmFkZFN0eWxlc1RvRWxlbWVudCh0aGlzLmVHdWksIHtwb3NpdGlvbjogJ3JlbGF0aXZlJ30pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZ0xpc3QuYWRkU3R5bGVzKHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6ICdpbmxpbmUtYmxvY2snLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXHJcbiAgICAgICAgICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxyXG4gICAgICAgICAgICAgICAgYmFja2dyb3VkQ29sb3I6ICd3aGl0ZSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpdGVtU2VsZWN0ZWQoaXRlbTogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWQoaXRlbSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhpZGVQb3B1cENhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVQb3B1cENhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5maXJlSXRlbVNlbGVjdGVkKGl0ZW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25DbGljaygpIHtcclxuICAgICAgICAgICAgdmFyIGFnTGlzdEd1aSA9IHRoaXMuYWdMaXN0LmdldEd1aSgpO1xyXG4gICAgICAgICAgICBhZ1BvcHVwU2VydmljZS5wb3NpdGlvblBvcHVwKHRoaXMuZUd1aSwgYWdMaXN0R3VpLCAtMSk7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZVBvcHVwQ2FsbGJhY2sgPSBhZ1BvcHVwU2VydmljZS5hZGRBc01vZGFsUG9wdXAoYWdMaXN0R3VpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEd1aSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZUd1aTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFNlbGVjdGVkKGl0ZW06IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IGl0ZW07XHJcbiAgICAgICAgICAgIHRoaXMucmVmcmVzaFZpZXcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldENlbGxSZW5kZXJlcihjZWxsUmVuZGVyZXI6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmFnTGlzdC5zZXRDZWxsUmVuZGVyZXIoY2VsbFJlbmRlcmVyKTtcclxuICAgICAgICAgICAgdGhpcy5jZWxsUmVuZGVyZXIgPSBjZWxsUmVuZGVyZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoVmlldygpIHtcclxuICAgICAgICAgICAgdXRpbHMucmVtb3ZlQWxsQ2hpbGRyZW4odGhpcy5lVmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJdGVtKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jZWxsUmVuZGVyZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFyYW1zID0ge3ZhbHVlOiB0aGlzLnNlbGVjdGVkSXRlbX07XHJcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMudXNlUmVuZGVyZXIodGhpcy5lVmFsdWUsIHRoaXMuY2VsbFJlbmRlcmVyLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVWYWx1ZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0aGlzLnNlbGVjdGVkSXRlbSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgZURvd25JY29uOiBhbnkgPSBzdmdGYWN0b3J5LmNyZWF0ZVNtYWxsQXJyb3dEb3duU3ZnKCk7XHJcbiAgICAgICAgICAgIGVEb3duSWNvbi5zdHlsZS5mbG9hdCA9ICdyaWdodCc7XHJcbiAgICAgICAgICAgIGVEb3duSWNvbi5zdHlsZS5tYXJnaW5Ub3AgPSAnNic7XHJcbiAgICAgICAgICAgIGVEb3duSWNvbi5zdHlsZS5tYXJnaW5SaWdodCA9ICcyJztcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZVZhbHVlLmFwcGVuZENoaWxkKGVEb3duSWNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRNb2RlbChtb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWdMaXN0LnNldE1vZGVsKG1vZGVsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi93aWRnZXRzL2FnTGlzdC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9jb25zdGFudHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbGF5b3V0L2JvcmRlckxheW91dC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9zdmdGYWN0b3J5LnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3dpZGdldHMvYWdEcm9wZG93bkxpc3QudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICB2YXIgc3ZnRmFjdG9yeSA9IFN2Z0ZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgIHZhciBjb25zdGFudHMgPSBDb25zdGFudHM7XHJcbiAgICB2YXIgdXRpbHMgPSBVdGlscztcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgVmFsdWVzU2VsZWN0aW9uUGFuZWwge1xyXG5cclxuICAgICAgICBncmlkT3B0aW9uc1dyYXBwZXI6IGFueTtcclxuICAgICAgICBjb2x1bW5Db250cm9sbGVyOiBhbnk7XHJcbiAgICAgICAgYXBpOiBhbnk7XHJcbiAgICAgICAgY0NvbHVtbkxpc3Q6IGFueTtcclxuICAgICAgICBsYXlvdXQ6IGFueTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoY29sdW1uQ29udHJvbGxlcjogYW55LCBncmlkT3B0aW9uc1dyYXBwZXI6IGFueSwgYXBpOiBhbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0dXBDb21wb25lbnRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlciA9IGNvbHVtbkNvbnRyb2xsZXI7XHJcbiAgICAgICAgICAgIHRoaXMuYXBpID0gYXBpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNvbnRyb2xsZXIuYWRkTGlzdGVuZXIoe1xyXG4gICAgICAgICAgICAgICAgY29sdW1uc0NoYW5nZWQ6IHRoYXQuY29sdW1uc0NoYW5nZWQuYmluZCh0aGF0KVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbHVtbnNDaGFuZ2VkKG5ld0NvbHVtbnM6IGFueSwgbmV3R3JvdXBlZENvbHVtbnM6IGFueSwgbmV3VmFsdWVzQ29sdW1uczogYW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3Quc2V0TW9kZWwobmV3VmFsdWVzQ29sdW1ucyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhZGREcmFnU291cmNlKGRyYWdTb3VyY2U6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0LmFkZERyYWdTb3VyY2UoZHJhZ1NvdXJjZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjZWxsUmVuZGVyZXIocGFyYW1zOiBhbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHBhcmFtcy52YWx1ZTtcclxuICAgICAgICAgICAgdmFyIGNvbERpc3BsYXlOYW1lID0gdGhpcy5jb2x1bW5Db250cm9sbGVyLmdldERpc3BsYXlOYW1lRm9yQ29sKGNvbHVtbik7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVJlc3VsdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlUmVtb3ZlID0gdXRpbHMuY3JlYXRlSWNvbignY29sdW1uUmVtb3ZlRnJvbUdyb3VwJywgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbiwgc3ZnRmFjdG9yeS5jcmVhdGVBcnJvd1VwU3ZnKTtcclxuICAgICAgICAgICAgdXRpbHMuYWRkQ3NzQ2xhc3MoZVJlbW92ZSwgJ2FnLXZpc2libGUtaWNvbnMnKTtcclxuICAgICAgICAgICAgZVJlc3VsdC5hcHBlbmRDaGlsZChlUmVtb3ZlKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgZVJlbW92ZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9IHRoYXQuY0NvbHVtbkxpc3QuZ2V0TW9kZWwoKTtcclxuICAgICAgICAgICAgICAgIG1vZGVsLnNwbGljZShtb2RlbC5pbmRleE9mKGNvbHVtbiksIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5jQ29sdW1uTGlzdC5zZXRNb2RlbChtb2RlbCk7XHJcbiAgICAgICAgICAgICAgICB0aGF0Lm9uVmFsdWVzQ2hhbmdlZCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciBhZ1ZhbHVlVHlwZSA9IG5ldyBBZ0Ryb3Bkb3duTGlzdCgpO1xyXG4gICAgICAgICAgICBhZ1ZhbHVlVHlwZS5zZXRNb2RlbChbY29uc3RhbnRzLlNVTSwgY29uc3RhbnRzLk1JTiwgY29uc3RhbnRzLk1BWF0pO1xyXG4gICAgICAgICAgICBhZ1ZhbHVlVHlwZS5zZXRTZWxlY3RlZChjb2x1bW4uYWdnRnVuYyk7XHJcbiAgICAgICAgICAgIGFnVmFsdWVUeXBlLnNldFdpZHRoKDQ1KTtcclxuXHJcbiAgICAgICAgICAgIGFnVmFsdWVUeXBlLmFkZEl0ZW1TZWxlY3RlZExpc3RlbmVyKGZ1bmN0aW9uIChpdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgIGNvbHVtbi5hZ2dGdW5jID0gaXRlbTtcclxuICAgICAgICAgICAgICAgIHRoYXQub25WYWx1ZXNDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZVJlc3VsdC5hcHBlbmRDaGlsZChhZ1ZhbHVlVHlwZS5nZXRHdWkoKSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZVZhbHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpO1xyXG4gICAgICAgICAgICBlVmFsdWUuaW5uZXJIVE1MID0gY29sRGlzcGxheU5hbWU7XHJcbiAgICAgICAgICAgIGVWYWx1ZS5zdHlsZS5wYWRkaW5nTGVmdCA9ICcycHgnO1xyXG4gICAgICAgICAgICBlUmVzdWx0LmFwcGVuZENoaWxkKGVWYWx1ZSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZVJlc3VsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldHVwQ29tcG9uZW50cygpIHtcclxuICAgICAgICAgICAgdmFyIGxvY2FsZVRleHRGdW5jID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0TG9jYWxlVGV4dEZ1bmMoKTtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbnNMb2NhbFRleHQgPSBsb2NhbGVUZXh0RnVuYygndmFsdWVDb2x1bW5zJywgJ1ZhbHVlIENvbHVtbnMnKTtcclxuICAgICAgICAgICAgdmFyIGVtcHR5TWVzc2FnZSA9IGxvY2FsZVRleHRGdW5jKCd2YWx1ZUNvbHVtbnNFbXB0eU1lc3NhZ2UnLCAnRHJhZyBjb2x1bW5zIGZyb20gYWJvdmUgdG8gY3JlYXRlIHZhbHVlcycpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jQ29sdW1uTGlzdCA9IG5ldyBBZ0xpc3QoKTtcclxuICAgICAgICAgICAgdGhpcy5jQ29sdW1uTGlzdC5zZXRDZWxsUmVuZGVyZXIodGhpcy5jZWxsUmVuZGVyZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3QuYWRkTW9kZWxDaGFuZ2VkTGlzdGVuZXIodGhpcy5vblZhbHVlc0NoYW5nZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3Quc2V0RW1wdHlNZXNzYWdlKGVtcHR5TWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHRoaXMuY0NvbHVtbkxpc3QuYWRkU3R5bGVzKHtoZWlnaHQ6ICcxMDAlJywgb3ZlcmZsb3c6ICdhdXRvJ30pO1xyXG4gICAgICAgICAgICB0aGlzLmNDb2x1bW5MaXN0LmFkZEJlZm9yZURyb3BMaXN0ZW5lcih0aGlzLmJlZm9yZURyb3BMaXN0ZW5lci5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBlTm9ydGhQYW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICBlTm9ydGhQYW5lbC5zdHlsZS5wYWRkaW5nVG9wID0gJzEwcHgnO1xyXG4gICAgICAgICAgICBlTm9ydGhQYW5lbC5pbm5lckhUTUwgPSAnPGRpdiBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlcjtcIj4nICsgY29sdW1uc0xvY2FsVGV4dCArICc8L2Rpdj4nO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sYXlvdXQgPSBuZXcgQm9yZGVyTGF5b3V0KHtcclxuICAgICAgICAgICAgICAgIGNlbnRlcjogdGhpcy5jQ29sdW1uTGlzdC5nZXRHdWkoKSxcclxuICAgICAgICAgICAgICAgIG5vcnRoOiBlTm9ydGhQYW5lbFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGJlZm9yZURyb3BMaXN0ZW5lcihuZXdJdGVtOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCFuZXdJdGVtLmFnZ0Z1bmMpIHtcclxuICAgICAgICAgICAgICAgIG5ld0l0ZW0uYWdnRnVuYyA9IGNvbnN0YW50cy5TVU07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uVmFsdWVzQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgdGhpcy5hcGkucmVjb21wdXRlQWdncmVnYXRlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJtb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBWZXJ0aWNhbFN0YWNrIHtcclxuXHJcbiAgICAgICAgaXNMYXlvdXRQYW5lbDogYW55O1xyXG4gICAgICAgIGNoaWxkUGFuZWxzOiBhbnk7XHJcbiAgICAgICAgZUd1aTogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0xheW91dFBhbmVsID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZFBhbmVscyA9IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmVHdWkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGhpcy5lR3VpLnN0eWxlLmhlaWdodCA9ICcxMDAlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFBhbmVsKHBhbmVsOiBhbnksIGhlaWdodDogYW55KSB7XHJcbiAgICAgICAgICAgIHZhciBjb21wb25lbnQ6IGFueTtcclxuICAgICAgICAgICAgaWYgKHBhbmVsLmlzTGF5b3V0UGFuZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRQYW5lbHMucHVzaChwYW5lbCk7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQgPSBwYW5lbC5nZXRHdWkoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCA9IHBhbmVsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaGVpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICBjb21wb25lbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuZUd1aS5hcHBlbmRDaGlsZChjb21wb25lbnQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0R3VpKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lR3VpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZG9MYXlvdXQoKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5jaGlsZFBhbmVscy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZFBhbmVsc1tpXS5kb0xheW91dCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi9jb2x1bW5TZWxlY3Rpb25QYW5lbC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2dyb3VwU2VsZWN0aW9uUGFuZWwudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi92YWx1ZXNTZWxlY3Rpb25QYW5lbC50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9sYXlvdXQvdmVydGljYWxTdGFjay50c1wiIC8+XHJcblxyXG5tb2R1bGUgYXdrLmdyaWQge1xyXG5cclxuICAgIHZhciB1dGlscyA9IFV0aWxzO1xyXG5cclxuICAgIGV4cG9ydCBjbGFzcyBUb29sUGFuZWwge1xyXG5cclxuICAgICAgICBsYXlvdXQ6IGFueTtcclxuXHJcbiAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0ID0gbmV3IFZlcnRpY2FsU3RhY2soKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXQoY29sdW1uQ29udHJvbGxlcjogYW55LCBpbk1lbW9yeVJvd0NvbnRyb2xsZXI6IGFueSwgZ3JpZE9wdGlvbnNXcmFwcGVyOiBhbnksIGFwaTogYW55KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3VwcHJlc3NQaXZvdEFuZFZhbHVlcyA9IGdyaWRPcHRpb25zV3JhcHBlci5pc1Rvb2xQYW5lbFN1cHByZXNzUGl2b3QoKTtcclxuICAgICAgICAgICAgdmFyIHN1cHByZXNzVmFsdWVzID0gZ3JpZE9wdGlvbnNXcmFwcGVyLmlzVG9vbFBhbmVsU3VwcHJlc3NWYWx1ZXMoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzaG93UGl2b3QgPSAhc3VwcHJlc3NQaXZvdEFuZFZhbHVlcztcclxuICAgICAgICAgICAgdmFyIHNob3dWYWx1ZXMgPSAhc3VwcHJlc3NQaXZvdEFuZFZhbHVlcyAmJiAhc3VwcHJlc3NWYWx1ZXM7XHJcblxyXG4gICAgICAgICAgICAvLyB0b3AgbGlzdCwgY29sdW1uIHJlb3JkZXIgYW5kIHZpc2liaWxpdHlcclxuICAgICAgICAgICAgdmFyIGNvbHVtblNlbGVjdGlvblBhbmVsID0gbmV3IENvbHVtblNlbGVjdGlvblBhbmVsKGNvbHVtbkNvbnRyb2xsZXIsIGdyaWRPcHRpb25zV3JhcHBlcik7XHJcbiAgICAgICAgICAgIHZhciBoZWlnaHRDb2x1bW5TZWxlY3Rpb24gPSBzdXBwcmVzc1Bpdm90QW5kVmFsdWVzID8gJzEwMCUnIDogJzUwJSc7XHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LmFkZFBhbmVsKGNvbHVtblNlbGVjdGlvblBhbmVsLmxheW91dCwgaGVpZ2h0Q29sdW1uU2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgdmFyIGRyYWdTb3VyY2UgPSBjb2x1bW5TZWxlY3Rpb25QYW5lbC5nZXREcmFnU291cmNlKCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoc2hvd1ZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlc1NlbGVjdGlvblBhbmVsID0gbmV3IFZhbHVlc1NlbGVjdGlvblBhbmVsKGNvbHVtbkNvbnRyb2xsZXIsIGdyaWRPcHRpb25zV3JhcHBlciwgYXBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0LmFkZFBhbmVsKHZhbHVlc1NlbGVjdGlvblBhbmVsLmxheW91dCwgJzI1JScpO1xyXG4gICAgICAgICAgICAgICAgdmFsdWVzU2VsZWN0aW9uUGFuZWwuYWRkRHJhZ1NvdXJjZShkcmFnU291cmNlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNob3dQaXZvdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwU2VsZWN0aW9uUGFuZWwgPSBuZXcgR3JvdXBTZWxlY3Rpb25QYW5lbChjb2x1bW5Db250cm9sbGVyLCBpbk1lbW9yeVJvd0NvbnRyb2xsZXIsIGdyaWRPcHRpb25zV3JhcHBlcik7XHJcbiAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0UGl2b3RTZWxlY3Rpb24gPSBzaG93VmFsdWVzID8gJzI1JScgOiAnNTAlJztcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5b3V0LmFkZFBhbmVsKGdyb3VwU2VsZWN0aW9uUGFuZWwubGF5b3V0LCBoZWlnaHRQaXZvdFNlbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBncm91cFNlbGVjdGlvblBhbmVsLmFkZERyYWdTb3VyY2UoZHJhZ1NvdXJjZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBlR3VpID0gdGhpcy5sYXlvdXQuZ2V0R3VpKCk7XHJcblxyXG4gICAgICAgICAgICB1dGlscy5hZGRDc3NDbGFzcyhlR3VpLCAnYWctdG9vbC1wYW5lbC1jb250YWluZXInKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImdyaWQudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwicm93UmVuZGVyZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiaGVhZGVyUmVuZGVyZXIudHNcIiAvPlxyXG5cclxubW9kdWxlIGF3ay5ncmlkIHtcclxuXHJcbiAgICBleHBvcnQgY2xhc3MgR3JpZEFwaSB7XHJcblxyXG4gICAgICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZ3JpZDogR3JpZCxcclxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlIHJvd1JlbmRlcmVyOiBSb3dSZW5kZXJlcixcclxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGhlYWRlclJlbmRlcmVyOiBIZWFkZXJSZW5kZXJlcixcclxuICAgICAgICAgICAgICAgICAgICBwcml2YXRlIGZpbHRlck1hbmFnZXI6IEZpbHRlck1hbmFnZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBjb2x1bW5Db250cm9sbGVyOiBDb2x1bW5Db250cm9sbGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGUgaW5NZW1vcnlSb3dDb250cm9sbGVyOiBJbk1lbW9yeVJvd0NvbnRyb2xsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBzZWxlY3Rpb25Db250cm9sbGVyOiBTZWxlY3Rpb25Db250cm9sbGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByaXZhdGUgZ3JpZE9wdGlvbnNXcmFwcGVyOiBHcmlkT3B0aW9uc1dyYXBwZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJpdmF0ZSBncmlkUGFuZWw6IEdyaWRQYW5lbCkge31cclxuXHJcbiAgICAgICAgc2V0RGF0YXNvdXJjZShkYXRhc291cmNlOmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQuc2V0RGF0YXNvdXJjZShkYXRhc291cmNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uTmV3RGF0YXNvdXJjZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLnNldERhdGFzb3VyY2UoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFJvd3Mocm93czphbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLnNldFJvd3Mocm93cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbk5ld1Jvd3MoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5zZXRSb3dzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbk5ld0NvbHMoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5vbk5ld0NvbHMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHVuc2VsZWN0QWxsKCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwidW5zZWxlY3RBbGwgZGVwcmVjYXRlZCwgY2FsbCBkZXNlbGVjdEFsbCBpbnN0ZWFkXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmRlc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoVmlldygpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dSZW5kZXJlci5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc29mdFJlZnJlc2hWaWV3KCkge1xyXG4gICAgICAgICAgICB0aGlzLnJvd1JlbmRlcmVyLnNvZnRSZWZyZXNoVmlldygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVmcmVzaEdyb3VwUm93cygpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dSZW5kZXJlci5yZWZyZXNoR3JvdXBSb3dzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZWZyZXNoSGVhZGVyKCkge1xyXG4gICAgICAgICAgICAvLyBuZWVkIHRvIHJldmlldyB0aGlzIC0gdGhlIHJlZnJlc2hIZWFkZXIgc2hvdWxkIGFsc28gcmVmcmVzaCBhbGwgaWNvbnMgaW4gdGhlIGhlYWRlclxyXG4gICAgICAgICAgICB0aGlzLmhlYWRlclJlbmRlcmVyLnJlZnJlc2hIZWFkZXIoKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJSZW5kZXJlci51cGRhdGVGaWx0ZXJJY29ucygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0TW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQucm93TW9kZWw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvbkdyb3VwRXhwYW5kZWRPckNvbGxhcHNlZChyZWZyZXNoRnJvbUluZGV4OmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQudXBkYXRlTW9kZWxBbmRSZWZyZXNoKENvbnN0YW50cy5TVEVQX01BUCwgcmVmcmVzaEZyb21JbmRleCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBleHBhbmRBbGwoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5NZW1vcnlSb3dDb250cm9sbGVyLmV4cGFuZE9yQ29sbGFwc2VBbGwodHJ1ZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC51cGRhdGVNb2RlbEFuZFJlZnJlc2goQ29uc3RhbnRzLlNURVBfTUFQKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbGxhcHNlQWxsKCkge1xyXG4gICAgICAgICAgICB0aGlzLmluTWVtb3J5Um93Q29udHJvbGxlci5leHBhbmRPckNvbGxhcHNlQWxsKGZhbHNlLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLnVwZGF0ZU1vZGVsQW5kUmVmcmVzaChDb25zdGFudHMuU1RFUF9NQVApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYWRkVmlydHVhbFJvd0xpc3RlbmVyKHJvd0luZGV4OmFueSwgY2FsbGJhY2s6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5hZGRWaXJ0dWFsUm93TGlzdGVuZXIocm93SW5kZXgsIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJvd0RhdGFDaGFuZ2VkKHJvd3M6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIucm93RGF0YUNoYW5nZWQocm93cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRRdWlja0ZpbHRlcihuZXdGaWx0ZXI6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5vblF1aWNrRmlsdGVyQ2hhbmdlZChuZXdGaWx0ZXIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZWxlY3RJbmRleChpbmRleDphbnksIHRyeU11bHRpOmFueSwgc3VwcHJlc3NFdmVudHM6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ29udHJvbGxlci5zZWxlY3RJbmRleChpbmRleCwgdHJ5TXVsdGksIHN1cHByZXNzRXZlbnRzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRlc2VsZWN0SW5kZXgoaW5kZXg6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ29udHJvbGxlci5kZXNlbGVjdEluZGV4KGluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGVjdE5vZGUobm9kZTphbnksIHRyeU11bHRpOmFueSwgc3VwcHJlc3NFdmVudHM6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ29udHJvbGxlci5zZWxlY3ROb2RlKG5vZGUsIHRyeU11bHRpLCBzdXBwcmVzc0V2ZW50cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXNlbGVjdE5vZGUobm9kZTphbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyLmRlc2VsZWN0Tm9kZShub2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGVjdEFsbCgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyLnNlbGVjdEFsbCgpO1xyXG4gICAgICAgICAgICB0aGlzLnJvd1JlbmRlcmVyLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkZXNlbGVjdEFsbCgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyLmRlc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIucmVmcmVzaFZpZXcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlY29tcHV0ZUFnZ3JlZ2F0ZXMoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5NZW1vcnlSb3dDb250cm9sbGVyLmRvQWdncmVnYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIucmVmcmVzaEdyb3VwUm93cygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2l6ZUNvbHVtbnNUb0ZpdCgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmlzRG9udFVzZVNjcm9sbHMoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhZy1ncmlkOiBzaXplQ29sdW1uc1RvRml0IGRvZXMgbm90IHdvcmsgd2hlbiBkb250VXNlU2Nyb2xscz10cnVlJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGF2YWlsYWJsZVdpZHRoID0gdGhpcy5ncmlkUGFuZWwuZ2V0V2lkdGhGb3JTaXplQ29sc1RvRml0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlci5zaXplQ29sdW1uc1RvRml0KGF2YWlsYWJsZVdpZHRoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNob3dMb2FkaW5nKHNob3c6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5zaG93TG9hZGluZ1BhbmVsKHNob3cpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaXNOb2RlU2VsZWN0ZWQobm9kZTphbnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0aW9uQ29udHJvbGxlci5pc05vZGVTZWxlY3RlZChub2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldFNlbGVjdGVkTm9kZXMoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbkNvbnRyb2xsZXIuZ2V0U2VsZWN0ZWROb2RlcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0QmVzdENvc3ROb2RlU2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyLmdldEJlc3RDb3N0Tm9kZVNlbGVjdGlvbigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5zdXJlQ29sSW5kZXhWaXNpYmxlKGluZGV4OmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5lbnN1cmVDb2xJbmRleFZpc2libGUoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5zdXJlSW5kZXhWaXNpYmxlKGluZGV4OmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5lbnN1cmVJbmRleFZpc2libGUoaW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZW5zdXJlTm9kZVZpc2libGUoY29tcGFyYXRvcjphbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLmVuc3VyZU5vZGVWaXNpYmxlKGNvbXBhcmF0b3IpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yRWFjaEluTWVtb3J5KGNhbGxiYWNrOmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQucm93TW9kZWwuZm9yRWFjaEluTWVtb3J5KGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEZpbHRlckFwaUZvckNvbERlZihjb2xEZWY6YW55KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignYWctZ3JpZCBBUEkgbWV0aG9kIGdldEZpbHRlckFwaUZvckNvbERlZiBkZXByZWNhdGVkLCB1c2UgZ2V0RmlsdGVyQXBpIGluc3RlYWQnKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyQXBpKGNvbERlZik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRGaWx0ZXJBcGkoa2V5OmFueSkge1xyXG4gICAgICAgICAgICB2YXIgY29sdW1uID0gdGhpcy5ncmlkLmNvbHVtbk1vZGVsLmdldENvbHVtbihrZXkpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXJNYW5hZ2VyLmdldEZpbHRlckFwaShjb2x1bW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0Q29sdW1uRGVmKGtleTphbnkpIHtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoaXMuZ3JpZC5jb2x1bW5Nb2RlbC5nZXRDb2x1bW4oa2V5KTtcclxuICAgICAgICAgICAgaWYgKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbi5jb2xEZWY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25GaWx0ZXJDaGFuZ2VkKCkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQub25GaWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRTb3J0TW9kZWwoc29ydE1vZGVsOmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQuc2V0U29ydE1vZGVsKHNvcnRNb2RlbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRTb3J0TW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQuZ2V0U29ydE1vZGVsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRGaWx0ZXJNb2RlbChtb2RlbDphbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJNYW5hZ2VyLnNldEZpbHRlck1vZGVsKG1vZGVsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldEZpbHRlck1vZGVsKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ncmlkLmdldEZpbHRlck1vZGVsKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRGb2N1c2VkQ2VsbCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucm93UmVuZGVyZXIuZ2V0Rm9jdXNlZENlbGwoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEZvY3VzZWRDZWxsKHJvd0luZGV4OmFueSwgY29sSW5kZXg6YW55KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC5zZXRGb2N1c2VkQ2VsbChyb3dJbmRleCwgY29sSW5kZXgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2hvd1Rvb2xQYW5lbChzaG93OmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQuc2hvd1Rvb2xQYW5lbChzaG93KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlzVG9vbFBhbmVsU2hvd2luZygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5pc1Rvb2xQYW5lbFNob3dpbmcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGhpZGVDb2x1bW4oY29sSWQ6YW55LCBoaWRlOmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNvbnRyb2xsZXIuaGlkZUNvbHVtbnMoW2NvbElkXSwgaGlkZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBoaWRlQ29sdW1ucyhjb2xJZHM6YW55LCBoaWRlOmFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNvbnRyb2xsZXIuaGlkZUNvbHVtbnMoY29sSWRzLCBoaWRlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGdldENvbHVtblN0YXRlKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb2x1bW5Db250cm9sbGVyLmdldFN0YXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRDb2x1bW5TdGF0ZShzdGF0ZTphbnkpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5Db250cm9sbGVyLnNldFN0YXRlKHN0YXRlKTtcclxuICAgICAgICAgICAgdGhpcy5pbk1lbW9yeVJvd0NvbnRyb2xsZXIuZG9Hcm91cGluZygpO1xyXG4gICAgICAgICAgICB0aGlzLmluTWVtb3J5Um93Q29udHJvbGxlci51cGRhdGVNb2RlbChDb25zdGFudHMuU1RFUF9FVkVSWVRISU5HKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLnJlZnJlc2hIZWFkZXJBbmRCb2R5KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkb0xheW91dCgpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLmRvTGF5b3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImNvbnN0YW50cy50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJncmlkT3B0aW9uc1dyYXBwZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwidXRpbHMudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiZmlsdGVyL2ZpbHRlck1hbmFnZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiY29sdW1uQ29udHJvbGxlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJzZWxlY3Rpb25Db250cm9sbGVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJyb3dSZW5kZXJlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJoZWFkZXJSZW5kZXJlci50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJyb3dDb250cm9sbGVycy9pbk1lbW9yeVJvd0NvbnRyb2xsZXIudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwicm93Q29udHJvbGxlcnMvdmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInJvd0NvbnRyb2xsZXJzL3BhZ2luYXRpb25Db250cm9sbGVyLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cImV4cHJlc3Npb25TZXJ2aWNlLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInRlbXBsYXRlU2VydmljZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJncmlkUGFuZWwvZ3JpZFBhbmVsLnRzXCIgLz5cclxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cInRvb2xQYW5lbC90b29sUGFuZWwudHNcIiAvPlxyXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwid2lkZ2V0cy9hZ1BvcHVwU2VydmljZS50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJncmlkT3B0aW9ucy50c1wiIC8+XHJcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCJncmlkQXBpLnRzXCIgLz5cclxuXHJcbm1vZHVsZSBhd2suZ3JpZCB7XHJcblxyXG4gICAgdmFyIGFnUG9wdXBTZXJ2aWNlID0gUG9wdXBTZXJ2aWNlLmdldEluc3RhbmNlKCk7XHJcblxyXG4gICAgZXhwb3J0IGNsYXNzIEdyaWQge1xyXG5cclxuICAgICAgICBwcml2YXRlIHZpcnR1YWxSb3dDYWxsYmFja3M6IGFueTtcclxuICAgICAgICBwcml2YXRlIGdyaWRPcHRpb25zOiBHcmlkT3B0aW9ucztcclxuICAgICAgICBwcml2YXRlIGdyaWRPcHRpb25zV3JhcHBlcjogR3JpZE9wdGlvbnNXcmFwcGVyO1xyXG4gICAgICAgIHByaXZhdGUgcXVpY2tGaWx0ZXI6IHN0cmluZztcclxuICAgICAgICBwcml2YXRlIGluTWVtb3J5Um93Q29udHJvbGxlcjogSW5NZW1vcnlSb3dDb250cm9sbGVyO1xyXG4gICAgICAgIHByaXZhdGUgZG9pbmdWaXJ0dWFsUGFnaW5nOiBib29sZWFuO1xyXG4gICAgICAgIHByaXZhdGUgcGFnaW5hdGlvbkNvbnRyb2xsZXI6IFBhZ2luYXRpb25Db250cm9sbGVyO1xyXG4gICAgICAgIHByaXZhdGUgdmlydHVhbFBhZ2VSb3dDb250cm9sbGVyOiBWaXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXI7XHJcbiAgICAgICAgcHJpdmF0ZSBmaW5pc2hlZDogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgcHJpdmF0ZSBzZWxlY3Rpb25Db250cm9sbGVyOiBTZWxlY3Rpb25Db250cm9sbGVyO1xyXG4gICAgICAgIHByaXZhdGUgY29sdW1uQ29udHJvbGxlcjogQ29sdW1uQ29udHJvbGxlcjtcclxuICAgICAgICBwcml2YXRlIHJvd1JlbmRlcmVyOiBSb3dSZW5kZXJlcjtcclxuICAgICAgICBwcml2YXRlIGhlYWRlclJlbmRlcmVyOiBIZWFkZXJSZW5kZXJlcjtcclxuICAgICAgICBwcml2YXRlIGZpbHRlck1hbmFnZXI6IEZpbHRlck1hbmFnZXI7XHJcbiAgICAgICAgcHJpdmF0ZSB0b29sUGFuZWw6IGFueTtcclxuICAgICAgICBwcml2YXRlIGdyaWRQYW5lbDogR3JpZFBhbmVsO1xyXG4gICAgICAgIHByaXZhdGUgZVJvb3RQYW5lbDogYW55O1xyXG4gICAgICAgIHByaXZhdGUgdG9vbFBhbmVsU2hvd2luZzogYm9vbGVhbjtcclxuICAgICAgICBwcml2YXRlIGRvaW5nUGFnaW5hdGlvbjogYm9vbGVhbjtcclxuXHJcbiAgICAgICAgLy8gdGhlc2UgYXJlIHB1YmxpYywgYXMgdGhleSBhcmUgdXNlZCBieSB0aGUgYXBpXHJcbiAgICAgICAgY29sdW1uTW9kZWw6IGFueTtcclxuICAgICAgICByb3dNb2RlbDogYW55O1xyXG5cclxuICAgICAgICBjb25zdHJ1Y3RvcihlR3JpZERpdjogYW55LCBncmlkT3B0aW9uczogYW55LCAkc2NvcGU6IGFueSwgJGNvbXBpbGU6IGFueSwgcXVpY2tGaWx0ZXJPblNjb3BlOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMgPSBncmlkT3B0aW9ucztcclxuICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIgPSBuZXcgR3JpZE9wdGlvbnNXcmFwcGVyKHRoaXMuZ3JpZE9wdGlvbnMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZXR1cENvbXBvbmVudHMoJHNjb3BlLCAkY29tcGlsZSwgZUdyaWREaXYpO1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRPcHRpb25zLmFwaSA9IG5ldyBHcmlkQXBpKHRoaXMsIHRoaXMucm93UmVuZGVyZXIsIHRoaXMuaGVhZGVyUmVuZGVyZXIsIHRoaXMuZmlsdGVyTWFuYWdlcixcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlciwgdGhpcy5pbk1lbW9yeVJvd0NvbnRyb2xsZXIsIHRoaXMuc2VsZWN0aW9uQ29udHJvbGxlcixcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLCB0aGlzLmdyaWRQYW5lbCk7XHJcblxyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMucXVpY2tGaWx0ZXIgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgdXNpbmcgYW5ndWxhciwgd2F0Y2ggZm9yIHF1aWNrRmlsdGVyIGNoYW5nZXNcclxuICAgICAgICAgICAgaWYgKCRzY29wZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChxdWlja0ZpbHRlck9uU2NvcGUsIGZ1bmN0aW9uIChuZXdGaWx0ZXI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQub25RdWlja0ZpbHRlckNoYW5nZWQobmV3RmlsdGVyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxSb3dDYWxsYmFja3MgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vIGRvbmUgd2hlbiBjb2xzIGNoYW5nZVxyXG4gICAgICAgICAgICB0aGlzLnNldHVwQ29sdW1ucygpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5pbk1lbW9yeVJvd0NvbnRyb2xsZXIuc2V0QWxsUm93cyh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5nZXRBbGxSb3dzKCkpO1xyXG5cclxuICAgICAgICAgICAgdmFyIGZvclByaW50ID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNEb250VXNlU2Nyb2xscygpO1xyXG4gICAgICAgICAgICBpZiAoIWZvclByaW50KSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kb0xheW91dC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbEFuZFJlZnJlc2goQ29uc3RhbnRzLlNURVBfRVZFUllUSElORyk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBubyBkYXRhIHByb3ZpZGVkIGluaXRpYWxseSwgYW5kIG5vdCBkb2luZyBpbmZpbml0ZSBzY3JvbGxpbmcsIHNob3cgdGhlIGxvYWRpbmcgcGFuZWxcclxuICAgICAgICAgICAgdmFyIHNob3dMb2FkaW5nID0gIXRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFsbFJvd3MoKSAmJiAhdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNWaXJ0dWFsUGFnaW5nKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmdQYW5lbChzaG93TG9hZGluZyk7XHJcblxyXG4gICAgICAgICAgICAvLyBpZiBkYXRhc291cmNlIHByb3ZpZGVkLCB1c2UgaXRcclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldERhdGFzb3VyY2UoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhc291cmNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuZG9MYXlvdXQoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5wZXJpb2RpY2FsbHlEb0xheW91dCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgcmVhZHkgZnVuY3Rpb24gcHJvdmlkZWQsIHVzZSBpdFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldFJlYWR5KCkgPT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuZ2V0UmVhZHkoKShncmlkT3B0aW9ucy5hcGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwZXJpb2RpY2FsbHlEb0xheW91dCgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmZpbmlzaGVkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmRvTGF5b3V0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5wZXJpb2RpY2FsbHlEb0xheW91dCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgNTAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0dXBDb21wb25lbnRzKCRzY29wZTogYW55LCAkY29tcGlsZTogYW55LCBlVXNlclByb3ZpZGVkRGl2OiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIG1ha2UgbG9jYWwgcmVmZXJlbmNlcywgdG8gbWFrZSB0aGUgYmVsb3cgbW9yZSBodW1hbiByZWFkYWJsZVxyXG4gICAgICAgICAgICB2YXIgZ3JpZE9wdGlvbnNXcmFwcGVyID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHZhciBncmlkT3B0aW9ucyA9IHRoaXMuZ3JpZE9wdGlvbnM7XHJcbiAgICAgICAgICAgIHZhciBmb3JQcmludCA9IGdyaWRPcHRpb25zV3JhcHBlci5pc0RvbnRVc2VTY3JvbGxzKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBjcmVhdGUgYWxsIHRoZSBiZWFuc1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uQ29udHJvbGxlciA9IG5ldyBTZWxlY3Rpb25Db250cm9sbGVyKCk7XHJcbiAgICAgICAgICAgIHZhciBmaWx0ZXJNYW5hZ2VyID0gbmV3IEZpbHRlck1hbmFnZXIoKTtcclxuICAgICAgICAgICAgdmFyIHNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeSA9IG5ldyBTZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkoKTtcclxuICAgICAgICAgICAgdmFyIGNvbHVtbkNvbnRyb2xsZXIgPSBuZXcgQ29sdW1uQ29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICB2YXIgcm93UmVuZGVyZXI6IFJvd1JlbmRlcmVyID0gbmV3IFJvd1JlbmRlcmVyKCk7XHJcbiAgICAgICAgICAgIHZhciBoZWFkZXJSZW5kZXJlciA9IG5ldyBIZWFkZXJSZW5kZXJlcigpO1xyXG4gICAgICAgICAgICB2YXIgaW5NZW1vcnlSb3dDb250cm9sbGVyID0gbmV3IEluTWVtb3J5Um93Q29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICB2YXIgdmlydHVhbFBhZ2VSb3dDb250cm9sbGVyID0gbmV3IFZpcnR1YWxQYWdlUm93Q29udHJvbGxlcigpO1xyXG4gICAgICAgICAgICB2YXIgZXhwcmVzc2lvblNlcnZpY2UgPSBuZXcgRXhwcmVzc2lvblNlcnZpY2UoKTtcclxuICAgICAgICAgICAgdmFyIHRlbXBsYXRlU2VydmljZSA9IG5ldyBUZW1wbGF0ZVNlcnZpY2UoKTtcclxuICAgICAgICAgICAgdmFyIGdyaWRQYW5lbCA9IG5ldyBHcmlkUGFuZWwoZ3JpZE9wdGlvbnNXcmFwcGVyKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb2x1bW5Nb2RlbCA9IGNvbHVtbkNvbnRyb2xsZXIuZ2V0TW9kZWwoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGluaXRpYWxpc2UgYWxsIHRoZSBiZWFuc1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVNlcnZpY2UuaW5pdCgkc2NvcGUpO1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25Db250cm9sbGVyLmluaXQodGhpcywgZ3JpZFBhbmVsLCBncmlkT3B0aW9uc1dyYXBwZXIsICRzY29wZSwgcm93UmVuZGVyZXIpO1xyXG4gICAgICAgICAgICBmaWx0ZXJNYW5hZ2VyLmluaXQodGhpcywgZ3JpZE9wdGlvbnNXcmFwcGVyLCAkY29tcGlsZSwgJHNjb3BlLCBleHByZXNzaW9uU2VydmljZSwgY29sdW1uTW9kZWwpO1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25SZW5kZXJlckZhY3RvcnkuaW5pdCh0aGlzLCBzZWxlY3Rpb25Db250cm9sbGVyKTtcclxuICAgICAgICAgICAgY29sdW1uQ29udHJvbGxlci5pbml0KHRoaXMsIHNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeSwgZ3JpZE9wdGlvbnNXcmFwcGVyLCBleHByZXNzaW9uU2VydmljZSk7XHJcbiAgICAgICAgICAgIHJvd1JlbmRlcmVyLmluaXQoZ3JpZE9wdGlvbnMsIGNvbHVtbk1vZGVsLCBncmlkT3B0aW9uc1dyYXBwZXIsIGdyaWRQYW5lbCwgdGhpcyxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvblJlbmRlcmVyRmFjdG9yeSwgJGNvbXBpbGUsICRzY29wZSwgc2VsZWN0aW9uQ29udHJvbGxlciwgZXhwcmVzc2lvblNlcnZpY2UsIHRlbXBsYXRlU2VydmljZSk7XHJcbiAgICAgICAgICAgIGhlYWRlclJlbmRlcmVyLmluaXQoZ3JpZE9wdGlvbnNXcmFwcGVyLCBjb2x1bW5Db250cm9sbGVyLCBjb2x1bW5Nb2RlbCwgZ3JpZFBhbmVsLCB0aGlzLCBmaWx0ZXJNYW5hZ2VyLFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLCAkY29tcGlsZSwgZXhwcmVzc2lvblNlcnZpY2UpO1xyXG4gICAgICAgICAgICBpbk1lbW9yeVJvd0NvbnRyb2xsZXIuaW5pdChncmlkT3B0aW9uc1dyYXBwZXIsIGNvbHVtbk1vZGVsLCB0aGlzLCBmaWx0ZXJNYW5hZ2VyLCAkc2NvcGUsIGV4cHJlc3Npb25TZXJ2aWNlKTtcclxuICAgICAgICAgICAgdmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLmluaXQocm93UmVuZGVyZXIsIGdyaWRPcHRpb25zV3JhcHBlciwgdGhpcyk7XHJcbiAgICAgICAgICAgIGdyaWRQYW5lbC5pbml0KGNvbHVtbk1vZGVsLCByb3dSZW5kZXJlcik7XHJcblxyXG4gICAgICAgICAgICB2YXIgdG9vbFBhbmVsTGF5b3V0OiBhbnkgPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgdG9vbFBhbmVsOiBhbnkgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAoIWZvclByaW50KSB7XHJcbiAgICAgICAgICAgICAgICB0b29sUGFuZWwgPSBuZXcgVG9vbFBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICB0b29sUGFuZWxMYXlvdXQgPSB0b29sUGFuZWwubGF5b3V0O1xyXG4gICAgICAgICAgICAgICAgdG9vbFBhbmVsLmluaXQoY29sdW1uQ29udHJvbGxlciwgaW5NZW1vcnlSb3dDb250cm9sbGVyLCBncmlkT3B0aW9uc1dyYXBwZXIsIHRoaXMuZ3JpZE9wdGlvbnMuYXBpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gdGhpcyBpcyBhIGNoaWxkIGJlYW4sIGdldCBhIHJlZmVyZW5jZSBhbmQgcGFzcyBpdCBvblxyXG4gICAgICAgICAgICAvLyBDQU4gV0UgREVMRVRFIFRISVM/IGl0J3MgZG9uZSBpbiB0aGUgc2V0RGF0YXNvdXJjZSBzZWN0aW9uXHJcbiAgICAgICAgICAgIHZhciByb3dNb2RlbCA9IGluTWVtb3J5Um93Q29udHJvbGxlci5nZXRNb2RlbCgpO1xyXG4gICAgICAgICAgICBzZWxlY3Rpb25Db250cm9sbGVyLnNldFJvd01vZGVsKHJvd01vZGVsKTtcclxuICAgICAgICAgICAgZmlsdGVyTWFuYWdlci5zZXRSb3dNb2RlbChyb3dNb2RlbCk7XHJcbiAgICAgICAgICAgIHJvd1JlbmRlcmVyLnNldFJvd01vZGVsKHJvd01vZGVsKTtcclxuICAgICAgICAgICAgZ3JpZFBhbmVsLnNldFJvd01vZGVsKHJvd01vZGVsKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGFuZCB0aGUgbGFzdCBiZWFuLCBkb25lIGluIGl0J3Mgb3duIHNlY3Rpb24sIGFzIGl0J3Mgb3B0aW9uYWxcclxuICAgICAgICAgICAgdmFyIHBhZ2luYXRpb25Db250cm9sbGVyOiBhbnkgPSBudWxsO1xyXG4gICAgICAgICAgICB2YXIgcGFnaW5hdGlvbkd1aTogYW55ID0gbnVsbDtcclxuICAgICAgICAgICAgaWYgKCFmb3JQcmludCkge1xyXG4gICAgICAgICAgICAgICAgcGFnaW5hdGlvbkNvbnRyb2xsZXIgPSBuZXcgUGFnaW5hdGlvbkNvbnRyb2xsZXIoKTtcclxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25Db250cm9sbGVyLmluaXQodGhpcywgZ3JpZE9wdGlvbnNXcmFwcGVyKTtcclxuICAgICAgICAgICAgICAgIHBhZ2luYXRpb25HdWkgPSBwYWdpbmF0aW9uQ29udHJvbGxlci5nZXRHdWkoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yb3dNb2RlbCA9IHJvd01vZGVsO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbkNvbnRyb2xsZXIgPSBzZWxlY3Rpb25Db250cm9sbGVyO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbkNvbnRyb2xsZXIgPSBjb2x1bW5Db250cm9sbGVyO1xyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbk1vZGVsID0gY29sdW1uTW9kZWw7XHJcbiAgICAgICAgICAgIHRoaXMuaW5NZW1vcnlSb3dDb250cm9sbGVyID0gaW5NZW1vcnlSb3dDb250cm9sbGVyO1xyXG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxQYWdlUm93Q29udHJvbGxlciA9IHZpcnR1YWxQYWdlUm93Q29udHJvbGxlcjtcclxuICAgICAgICAgICAgdGhpcy5yb3dSZW5kZXJlciA9IHJvd1JlbmRlcmVyO1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlclJlbmRlcmVyID0gaGVhZGVyUmVuZGVyZXI7XHJcbiAgICAgICAgICAgIHRoaXMucGFnaW5hdGlvbkNvbnRyb2xsZXIgPSBwYWdpbmF0aW9uQ29udHJvbGxlcjtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcclxuICAgICAgICAgICAgdGhpcy50b29sUGFuZWwgPSB0b29sUGFuZWw7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZFBhbmVsID0gZ3JpZFBhbmVsO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5lUm9vdFBhbmVsID0gbmV3IEJvcmRlckxheW91dCh7XHJcbiAgICAgICAgICAgICAgICBjZW50ZXI6IGdyaWRQYW5lbC5sYXlvdXQsXHJcbiAgICAgICAgICAgICAgICBlYXN0OiB0b29sUGFuZWxMYXlvdXQsXHJcbiAgICAgICAgICAgICAgICBzb3V0aDogcGFnaW5hdGlvbkd1aSxcclxuICAgICAgICAgICAgICAgIGRvbnRGaWxsOiBmb3JQcmludCxcclxuICAgICAgICAgICAgICAgIG5hbWU6ICdlUm9vdFBhbmVsJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgYWdQb3B1cFNlcnZpY2UuaW5pdCh0aGlzLmVSb290UGFuZWwuZ2V0R3VpKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8gZGVmYXVsdCBpcyB3ZSBkb24ndCBzaG93IHBhZ2luZyBwYW5lbCwgdGhpcyBpcyBzZXQgdG8gdHJ1ZSB3aGVuIGRhdGFzb3VyY2UgaXMgc2V0XHJcbiAgICAgICAgICAgIHRoaXMuZVJvb3RQYW5lbC5zZXRTb3V0aFZpc2libGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgLy8gc2VlIHdoYXQgdGhlIGdyaWQgb3B0aW9ucyBhcmUgZm9yIGRlZmF1bHQgb2YgdG9vbGJhclxyXG4gICAgICAgICAgICB0aGlzLnNob3dUb29sUGFuZWwoZ3JpZE9wdGlvbnNXcmFwcGVyLmlzU2hvd1Rvb2xQYW5lbCgpKTtcclxuXHJcbiAgICAgICAgICAgIGVVc2VyUHJvdmlkZWREaXYuYXBwZW5kQ2hpbGQodGhpcy5lUm9vdFBhbmVsLmdldEd1aSgpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNob3dUb29sUGFuZWwoc2hvdzogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy50b29sUGFuZWwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9vbFBhbmVsU2hvd2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRvb2xQYW5lbFNob3dpbmcgPSBzaG93O1xyXG4gICAgICAgICAgICB0aGlzLmVSb290UGFuZWwuc2V0RWFzdFZpc2libGUoc2hvdyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpc1Rvb2xQYW5lbFNob3dpbmcoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvb2xQYW5lbFNob3dpbmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXREYXRhc291cmNlKGRhdGFzb3VyY2U/OiBhbnkpIHtcclxuICAgICAgICAgICAgLy8gaWYgZGF0YXNvdXJjZSBwcm92aWRlZCwgdGhlbiBzZXQgaXRcclxuICAgICAgICAgICAgaWYgKGRhdGFzb3VyY2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMuZGF0YXNvdXJjZSA9IGRhdGFzb3VyY2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZ2V0IHRoZSBzZXQgZGF0YXNvdXJjZSAoaWYgbnVsbCB3YXMgcGFzc2VkIHRvIHRoaXMgbWV0aG9kLFxyXG4gICAgICAgICAgICAvLyB0aGVuIG5lZWQgdG8gZ2V0IHRoZSBhY3R1YWwgZGF0YXNvdXJjZSBmcm9tIG9wdGlvbnNcclxuICAgICAgICAgICAgdmFyIGRhdGFzb3VyY2VUb1VzZSA9IHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldERhdGFzb3VyY2UoKTtcclxuICAgICAgICAgICAgdGhpcy5kb2luZ1ZpcnR1YWxQYWdpbmcgPSB0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc1ZpcnR1YWxQYWdpbmcoKSAmJiBkYXRhc291cmNlVG9Vc2U7XHJcbiAgICAgICAgICAgIHRoaXMuZG9pbmdQYWdpbmF0aW9uID0gZGF0YXNvdXJjZVRvVXNlICYmICF0aGlzLmRvaW5nVmlydHVhbFBhZ2luZztcclxuICAgICAgICAgICAgdmFyIHNob3dQYWdpbmdQYW5lbDogYW55O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZG9pbmdWaXJ0dWFsUGFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25Db250cm9sbGVyLnNldERhdGFzb3VyY2UobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5zZXREYXRhc291cmNlKGRhdGFzb3VyY2VUb1VzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd01vZGVsID0gdGhpcy52aXJ0dWFsUGFnZVJvd0NvbnRyb2xsZXIuZ2V0TW9kZWwoKTtcclxuICAgICAgICAgICAgICAgIHNob3dQYWdpbmdQYW5lbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZG9pbmdQYWdpbmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25Db250cm9sbGVyLnNldERhdGFzb3VyY2UoZGF0YXNvdXJjZVRvVXNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlydHVhbFBhZ2VSb3dDb250cm9sbGVyLnNldERhdGFzb3VyY2UobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd01vZGVsID0gdGhpcy5pbk1lbW9yeVJvd0NvbnRyb2xsZXIuZ2V0TW9kZWwoKTtcclxuICAgICAgICAgICAgICAgIHNob3dQYWdpbmdQYW5lbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25Db250cm9sbGVyLnNldERhdGFzb3VyY2UobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpcnR1YWxQYWdlUm93Q29udHJvbGxlci5zZXREYXRhc291cmNlKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb3dNb2RlbCA9IHRoaXMuaW5NZW1vcnlSb3dDb250cm9sbGVyLmdldE1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICBzaG93UGFnaW5nUGFuZWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyLnNldFJvd01vZGVsKHRoaXMucm93TW9kZWwpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlck1hbmFnZXIuc2V0Um93TW9kZWwodGhpcy5yb3dNb2RlbCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIuc2V0Um93TW9kZWwodGhpcy5yb3dNb2RlbCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmVSb290UGFuZWwuc2V0U291dGhWaXNpYmxlKHNob3dQYWdpbmdQYW5lbCk7XHJcblxyXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHdlIGp1c3Qgc2V0IHRoZSByb3dNb2RlbCwgbmVlZCB0byB1cGRhdGUgdGhlIGd1aVxyXG4gICAgICAgICAgICB0aGlzLnJvd1JlbmRlcmVyLnJlZnJlc2hWaWV3KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRvTGF5b3V0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBnZXRzIGNhbGxlZCBhZnRlciBjb2x1bW5zIGFyZSBzaG93biAvIGhpZGRlbiBmcm9tIGdyb3VwcyBleHBhbmRpbmdcclxuICAgICAgICByZWZyZXNoSGVhZGVyQW5kQm9keSgpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJSZW5kZXJlci5yZWZyZXNoSGVhZGVyKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyUmVuZGVyZXIudXBkYXRlRmlsdGVySWNvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJSZW5kZXJlci51cGRhdGVTb3J0SWNvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5ncmlkUGFuZWwuc2V0Qm9keUNvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZFBhbmVsLnNldFBpbm5lZENvbENvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93UmVuZGVyZXIucmVmcmVzaFZpZXcoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldEZpbmlzaGVkKCkge1xyXG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5kb0xheW91dCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZ2V0UXVpY2tGaWx0ZXIoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1aWNrRmlsdGVyO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25RdWlja0ZpbHRlckNoYW5nZWQobmV3RmlsdGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKG5ld0ZpbHRlciA9PT0gdW5kZWZpbmVkIHx8IG5ld0ZpbHRlciA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgbmV3RmlsdGVyID0gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5xdWlja0ZpbHRlciAhPT0gbmV3RmlsdGVyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNWaXJ0dWFsUGFnaW5nKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FnLWdyaWQ6IGNhbm5vdCBkbyBxdWljayBmaWx0ZXJpbmcgd2hlbiBkb2luZyB2aXJ0dWFsIHBhZ2luZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgJ251bGwnIHRvIG1lYW4gdG8gZmlsdGVyLCBzbyByZW1vdmUgdW5kZWZpbmVkIGFuZCBlbXB0eSBzdHJpbmdcclxuICAgICAgICAgICAgICAgIGlmIChuZXdGaWx0ZXIgPT09IHVuZGVmaW5lZCB8fCBuZXdGaWx0ZXIgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdGaWx0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ld0ZpbHRlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0ZpbHRlciA9IG5ld0ZpbHRlci50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWlja0ZpbHRlciA9IG5ld0ZpbHRlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMub25GaWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uRmlsdGVyQ2hhbmdlZCgpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJSZW5kZXJlci51cGRhdGVGaWx0ZXJJY29ucygpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNFbmFibGVTZXJ2ZXJTaWRlRmlsdGVyKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIGRvaW5nIHNlcnZlciBzaWRlIGZpbHRlcmluZywgY2hhbmdpbmcgdGhlIHNvcnQgaGFzIHRoZSBpbXBhY3RcclxuICAgICAgICAgICAgICAgIC8vIG9mIHJlc2V0dGluZyB0aGUgZGF0YXNvdXJjZVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXREYXRhc291cmNlKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBkb2luZyBpbiBtZW1vcnkgZmlsdGVyaW5nLCB3ZSBqdXN0IHVwZGF0ZSB0aGUgaW4gbWVtb3J5IGRhdGFcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWxBbmRSZWZyZXNoKENvbnN0YW50cy5TVEVQX0ZJTFRFUik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uUm93Q2xpY2tlZChldmVudDogYW55LCByb3dJbmRleDogYW55LCBub2RlOiBhbnkpIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zLnJvd0NsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogbm9kZSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBub2RlLmRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0luZGV4OiByb3dJbmRleFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JpZE9wdGlvbnMucm93Q2xpY2tlZChwYXJhbXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB3ZSBkbyBub3QgYWxsb3cgc2VsZWN0aW5nIGdyb3VwcyBieSBjbGlja2luZyAoYXMgdGhlIGNsaWNrIGhlcmUgZXhwYW5kcyB0aGUgZ3JvdXApXHJcbiAgICAgICAgICAgIC8vIHNvIHJldHVybiBpZiBpdCdzIGEgZ3JvdXAgcm93XHJcbiAgICAgICAgICAgIGlmIChub2RlLmdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG1ha2luZyBsb2NhbCB2YXJpYWJsZXMgdG8gbWFrZSB0aGUgYmVsb3cgbW9yZSByZWFkYWJsZVxyXG4gICAgICAgICAgICB2YXIgZ3JpZE9wdGlvbnNXcmFwcGVyID0gdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXI7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3Rpb25Db250cm9sbGVyID0gdGhpcy5zZWxlY3Rpb25Db250cm9sbGVyO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgbm8gc2VsZWN0aW9uIG1ldGhvZCBlbmFibGVkLCBkbyBub3RoaW5nXHJcbiAgICAgICAgICAgIGlmICghZ3JpZE9wdGlvbnNXcmFwcGVyLmlzUm93U2VsZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgY2xpY2sgc2VsZWN0aW9uIHN1cHByZXNzZWQsIGRvIG5vdGhpbmdcclxuICAgICAgICAgICAgaWYgKGdyaWRPcHRpb25zV3JhcHBlci5pc1N1cHByZXNzUm93Q2xpY2tTZWxlY3Rpb24oKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBjdHJsS2V5IGZvciB3aW5kb3dzLCBtZXRhS2V5IGZvciBBcHBsZVxyXG4gICAgICAgICAgICB2YXIgY3RybEtleVByZXNzZWQgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XHJcblxyXG4gICAgICAgICAgICB2YXIgZG9EZXNlbGVjdCA9IGN0cmxLZXlQcmVzc2VkXHJcbiAgICAgICAgICAgICAgICAmJiBzZWxlY3Rpb25Db250cm9sbGVyLmlzTm9kZVNlbGVjdGVkKG5vZGUpXHJcbiAgICAgICAgICAgICAgICAmJiBncmlkT3B0aW9uc1dyYXBwZXIuaXNSb3dEZXNlbGVjdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRvRGVzZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbkNvbnRyb2xsZXIuZGVzZWxlY3ROb2RlKG5vZGUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRyeU11bHRpID0gY3RybEtleVByZXNzZWQ7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb25Db250cm9sbGVyLnNlbGVjdE5vZGUobm9kZSwgdHJ5TXVsdGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzaG93TG9hZGluZ1BhbmVsKHNob3c6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5zaG93TG9hZGluZyhzaG93KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldHVwQ29sdW1ucygpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkUGFuZWwuc2V0SGVhZGVySGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uQ29udHJvbGxlci5zZXRDb2x1bW5zKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldENvbHVtbkRlZnMoKSk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZFBhbmVsLnNob3dQaW5uZWRDb2xDb250YWluZXJzSWZOZWVkZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJSZW5kZXJlci5yZWZyZXNoSGVhZGVyKCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5ncmlkT3B0aW9uc1dyYXBwZXIuaXNEb250VXNlU2Nyb2xscygpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5zZXRQaW5uZWRDb2xDb250YWluZXJXaWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkUGFuZWwuc2V0Qm9keUNvbnRhaW5lcldpZHRoKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJSZW5kZXJlci51cGRhdGVGaWx0ZXJJY29ucygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcm93c1RvUmVmcmVzaCBpcyBhdCB3aGF0IGluZGV4IHRvIHN0YXJ0IHJlZnJlc2hpbmcgdGhlIHJvd3MuIHRoZSBhc3N1bXB0aW9uIGlzXHJcbiAgICAgICAgLy8gaWYgd2UgYXJlIGV4cGFuZGluZyBvciBjb2xsYXBzaW5nIGEgZ3JvdXAsIHRoZW4gb25seSBoZSByb3dzIGJlbG93IHRoZSBncm91cFxyXG4gICAgICAgIC8vIG5lZWQgdG8gYmUgcmVmcmVzaC4gdGhpcyBhbGxvd3MgdGhlIGNvbnRleHQgKGVnIGZvY3VzKSBvZiB0aGUgb3RoZXIgY2VsbHMgdG9cclxuICAgICAgICAvLyByZW1haW4uXHJcbiAgICAgICAgdXBkYXRlTW9kZWxBbmRSZWZyZXNoKHN0ZXA6IGFueSwgcmVmcmVzaEZyb21JbmRleD86IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmluTWVtb3J5Um93Q29udHJvbGxlci51cGRhdGVNb2RlbChzdGVwKTtcclxuICAgICAgICAgICAgdGhpcy5yb3dSZW5kZXJlci5yZWZyZXNoVmlldyhyZWZyZXNoRnJvbUluZGV4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNldFJvd3Mocm93cz86IGFueSwgZmlyc3RJZD86IGFueSkge1xyXG4gICAgICAgICAgICBpZiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkT3B0aW9ucy5yb3dEYXRhID0gcm93cztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmluTWVtb3J5Um93Q29udHJvbGxlci5zZXRBbGxSb3dzKHRoaXMuZ3JpZE9wdGlvbnNXcmFwcGVyLmdldEFsbFJvd3MoKSwgZmlyc3RJZCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ29udHJvbGxlci5kZXNlbGVjdEFsbCgpO1xyXG4gICAgICAgICAgICB0aGlzLmZpbHRlck1hbmFnZXIub25OZXdSb3dzTG9hZGVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTW9kZWxBbmRSZWZyZXNoKENvbnN0YW50cy5TVEVQX0VWRVJZVEhJTkcpO1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlclJlbmRlcmVyLnVwZGF0ZUZpbHRlckljb25zKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvd0xvYWRpbmdQYW5lbChmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbnN1cmVOb2RlVmlzaWJsZShjb21wYXJhdG9yOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZG9pbmdWaXJ0dWFsUGFnaW5nKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyAnQ2Fubm90IHVzZSBlbnN1cmVOb2RlVmlzaWJsZSB3aGVuIGRvaW5nIHZpcnR1YWwgcGFnaW5nLCBhcyB3ZSBjYW5ub3QgY2hlY2sgcm93cyB0aGF0IGFyZSBub3QgaW4gbWVtb3J5JztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBsb29rIGZvciB0aGUgbm9kZSBpbmRleCB3ZSB3YW50IHRvIGRpc3BsYXlcclxuICAgICAgICAgICAgdmFyIHJvd0NvdW50ID0gdGhpcy5yb3dNb2RlbC5nZXRWaXJ0dWFsUm93Q291bnQoKTtcclxuICAgICAgICAgICAgdmFyIGNvbXBhcmF0b3JJc0FGdW5jdGlvbiA9IHR5cGVvZiBjb21wYXJhdG9yID09PSAnZnVuY3Rpb24nO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXhUb1NlbGVjdCA9IC0xO1xyXG4gICAgICAgICAgICAvLyBnbyB0aHJvdWdoIGFsbCB0aGUgbm9kZXMsIGZpbmQgdGhlIG9uZSB3ZSB3YW50IHRvIHNob3dcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByb3dDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHRoaXMucm93TW9kZWwuZ2V0VmlydHVhbFJvdyhpKTtcclxuICAgICAgICAgICAgICAgIGlmIChjb21wYXJhdG9ySXNBRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29tcGFyYXRvcihub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleFRvU2VsZWN0ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGVjayBvYmplY3QgZXF1YWxpdHkgYWdhaW5zdCBub2RlIGFuZCBkYXRhXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbXBhcmF0b3IgPT09IG5vZGUgfHwgY29tcGFyYXRvciA9PT0gbm9kZS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4VG9TZWxlY3QgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGluZGV4VG9TZWxlY3QgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkUGFuZWwuZW5zdXJlSW5kZXhWaXNpYmxlKGluZGV4VG9TZWxlY3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRGaWx0ZXJNb2RlbCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyTWFuYWdlci5nZXRGaWx0ZXJNb2RlbCgpO1xyXG4gICAgICAgIH1cclxuLypcclxuICAgICAgICBhZGRBcGkoKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgdmFyIGFwaSA9IHtcclxuICAgICAgICAgICAgICAgIHNldERhdGFzb3VyY2U6IGZ1bmN0aW9uIChkYXRhc291cmNlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNldERhdGFzb3VyY2UoZGF0YXNvdXJjZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25OZXdEYXRhc291cmNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXREYXRhc291cmNlKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0Um93czogZnVuY3Rpb24gKHJvd3M6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0Um93cyhyb3dzKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbk5ld1Jvd3M6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNldFJvd3MoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbk5ld0NvbHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uTmV3Q29scygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHVuc2VsZWN0QWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihcInVuc2VsZWN0QWxsIGRlcHJlY2F0ZWQsIGNhbGwgZGVzZWxlY3RBbGwgaW5zdGVhZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVmcmVzaFZpZXc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJvd1JlbmRlcmVyLnJlZnJlc2hWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc29mdFJlZnJlc2hWaWV3OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yb3dSZW5kZXJlci5zb2Z0UmVmcmVzaFZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZWZyZXNoR3JvdXBSb3dzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yb3dSZW5kZXJlci5yZWZyZXNoR3JvdXBSb3dzKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcmVmcmVzaEhlYWRlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5lZWQgdG8gcmV2aWV3IHRoaXMgLSB0aGUgcmVmcmVzaEhlYWRlciBzaG91bGQgYWxzbyByZWZyZXNoIGFsbCBpY29ucyBpbiB0aGUgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXJSZW5kZXJlci5yZWZyZXNoSGVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkZXJSZW5kZXJlci51cGRhdGVGaWx0ZXJJY29ucygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldE1vZGVsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQucm93TW9kZWw7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25Hcm91cEV4cGFuZGVkT3JDb2xsYXBzZWQ6IGZ1bmN0aW9uIChyZWZyZXNoRnJvbUluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVwZGF0ZU1vZGVsQW5kUmVmcmVzaChDb25zdGFudHMuU1RFUF9NQVAsIHJlZnJlc2hGcm9tSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGV4cGFuZEFsbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaW5NZW1vcnlSb3dDb250cm9sbGVyLmV4cGFuZE9yQ29sbGFwc2VBbGwodHJ1ZSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51cGRhdGVNb2RlbEFuZFJlZnJlc2goQ29uc3RhbnRzLlNURVBfTUFQKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBjb2xsYXBzZUFsbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaW5NZW1vcnlSb3dDb250cm9sbGVyLmV4cGFuZE9yQ29sbGFwc2VBbGwoZmFsc2UsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQudXBkYXRlTW9kZWxBbmRSZWZyZXNoKENvbnN0YW50cy5TVEVQX01BUCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYWRkVmlydHVhbFJvd0xpc3RlbmVyOiBmdW5jdGlvbiAocm93SW5kZXg6IGFueSwgY2FsbGJhY2s6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuYWRkVmlydHVhbFJvd0xpc3RlbmVyKHJvd0luZGV4LCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcm93RGF0YUNoYW5nZWQ6IGZ1bmN0aW9uIChyb3dzOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJvd1JlbmRlcmVyLnJvd0RhdGFDaGFuZ2VkKHJvd3MpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldFF1aWNrRmlsdGVyOiBmdW5jdGlvbiAobmV3RmlsdGVyOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9uUXVpY2tGaWx0ZXJDaGFuZ2VkKG5ld0ZpbHRlcilcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RJbmRleDogZnVuY3Rpb24gKGluZGV4OiBhbnksIHRyeU11bHRpOiBhbnksIHN1cHByZXNzRXZlbnRzOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuc2VsZWN0SW5kZXgoaW5kZXgsIHRyeU11bHRpLCBzdXBwcmVzc0V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVzZWxlY3RJbmRleDogZnVuY3Rpb24gKGluZGV4OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuZGVzZWxlY3RJbmRleChpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2VsZWN0Tm9kZTogZnVuY3Rpb24gKG5vZGU6IGFueSwgdHJ5TXVsdGk6IGFueSwgc3VwcHJlc3NFdmVudHM6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0aW9uQ29udHJvbGxlci5zZWxlY3ROb2RlKG5vZGUsIHRyeU11bHRpLCBzdXBwcmVzc0V2ZW50cyk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVzZWxlY3ROb2RlOiBmdW5jdGlvbiAobm9kZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZWxlY3Rpb25Db250cm9sbGVyLmRlc2VsZWN0Tm9kZShub2RlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RBbGw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yb3dSZW5kZXJlci5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGRlc2VsZWN0QWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZWxlY3Rpb25Db250cm9sbGVyLmRlc2VsZWN0QWxsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yb3dSZW5kZXJlci5yZWZyZXNoVmlldygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlY29tcHV0ZUFnZ3JlZ2F0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmluTWVtb3J5Um93Q29udHJvbGxlci5kb0FnZ3JlZ2F0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucm93UmVuZGVyZXIucmVmcmVzaEdyb3VwUm93cygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNpemVDb2x1bW5zVG9GaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5ncmlkT3B0aW9uc1dyYXBwZXIuaXNEb250VXNlU2Nyb2xscygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignYWctZ3JpZDogc2l6ZUNvbHVtbnNUb0ZpdCBkb2VzIG5vdCB3b3JrIHdoZW4gZG9udFVzZVNjcm9sbHM9dHJ1ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhdmFpbGFibGVXaWR0aCA9IHRoYXQuZ3JpZFBhbmVsLmdldFdpZHRoRm9yU2l6ZUNvbHNUb0ZpdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY29sdW1uQ29udHJvbGxlci5zaXplQ29sdW1uc1RvRml0KGF2YWlsYWJsZVdpZHRoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaG93TG9hZGluZzogZnVuY3Rpb24gKHNob3c6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2hvd0xvYWRpbmdQYW5lbChzaG93KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpc05vZGVTZWxlY3RlZDogZnVuY3Rpb24gKG5vZGU6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuaXNOb2RlU2VsZWN0ZWQobm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0U2VsZWN0ZWROb2RlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuZ2V0U2VsZWN0ZWROb2RlcygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldEJlc3RDb3N0Tm9kZVNlbGVjdGlvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LnNlbGVjdGlvbkNvbnRyb2xsZXIuZ2V0QmVzdENvc3ROb2RlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW5zdXJlQ29sSW5kZXhWaXNpYmxlOiBmdW5jdGlvbiAoaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZ3JpZFBhbmVsLmVuc3VyZUNvbEluZGV4VmlzaWJsZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW5zdXJlSW5kZXhWaXNpYmxlOiBmdW5jdGlvbiAoaW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuZ3JpZFBhbmVsLmVuc3VyZUluZGV4VmlzaWJsZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZW5zdXJlTm9kZVZpc2libGU6IGZ1bmN0aW9uIChjb21wYXJhdG9yOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmVuc3VyZU5vZGVWaXNpYmxlKGNvbXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZvckVhY2hJbk1lbW9yeTogZnVuY3Rpb24gKGNhbGxiYWNrOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnJvd01vZGVsLmZvckVhY2hJbk1lbW9yeShjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RmlsdGVyQXBpRm9yQ29sRGVmOiBmdW5jdGlvbiAoY29sRGVmOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ2FnLWdyaWQgQVBJIG1ldGhvZCBnZXRGaWx0ZXJBcGlGb3JDb2xEZWYgZGVwcmVjYXRlZCwgdXNlIGdldEZpbHRlckFwaSBpbnN0ZWFkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmlsdGVyQXBpKGNvbERlZik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RmlsdGVyQXBpOiBmdW5jdGlvbiAoa2V5OiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29sdW1uID0gdGhhdC5jb2x1bW5Nb2RlbC5nZXRDb2x1bW4oa2V5KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5maWx0ZXJNYW5hZ2VyLmdldEZpbHRlckFwaShjb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGdldENvbHVtbkRlZjogZnVuY3Rpb24gKGtleTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbHVtbiA9IHRoYXQuY29sdW1uTW9kZWwuZ2V0Q29sdW1uKGtleSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1uLmNvbERlZjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25GaWx0ZXJDaGFuZ2VkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vbkZpbHRlckNoYW5nZWQoKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZXRTb3J0TW9kZWw6IGZ1bmN0aW9uIChzb3J0TW9kZWw6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0U29ydE1vZGVsKHNvcnRNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0U29ydE1vZGVsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoYXQuZ2V0U29ydE1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0RmlsdGVyTW9kZWw6IGZ1bmN0aW9uIChtb2RlbDogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5maWx0ZXJNYW5hZ2VyLnNldEZpbHRlck1vZGVsKG1vZGVsKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRGaWx0ZXJNb2RlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmdldEZpbHRlck1vZGVsKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0Rm9jdXNlZENlbGw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5yb3dSZW5kZXJlci5nZXRGb2N1c2VkQ2VsbCgpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHNldEZvY3VzZWRDZWxsOiBmdW5jdGlvbiAocm93SW5kZXg6IGFueSwgY29sSW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0Rm9jdXNlZENlbGwocm93SW5kZXgsIGNvbEluZGV4KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzaG93VG9vbFBhbmVsOiBmdW5jdGlvbiAoc2hvdzogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zaG93VG9vbFBhbmVsKHNob3cpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGlzVG9vbFBhbmVsU2hvd2luZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGF0LmlzVG9vbFBhbmVsU2hvd2luZygpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGhpZGVDb2x1bW46IGZ1bmN0aW9uIChjb2xJZDogYW55LCBoaWRlOiBhbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmNvbHVtbkNvbnRyb2xsZXIuaGlkZUNvbHVtbnMoW2NvbElkXSwgaGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgaGlkZUNvbHVtbnM6IGZ1bmN0aW9uIChjb2xJZHM6IGFueSwgaGlkZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5Db250cm9sbGVyLmhpZGVDb2x1bW5zKGNvbElkcywgaGlkZSk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0Q29sdW1uU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhhdC5jb2x1bW5Db250cm9sbGVyLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgc2V0Q29sdW1uU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZTogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5Db250cm9sbGVyLnNldFN0YXRlKHN0YXRlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmluTWVtb3J5Um93Q29udHJvbGxlci5kb0dyb3VwaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5pbk1lbW9yeVJvd0NvbnRyb2xsZXIudXBkYXRlTW9kZWwoQ29uc3RhbnRzLlNURVBfRVZFUllUSElORyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yZWZyZXNoSGVhZGVyQW5kQm9keSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRPcHRpb25zLmFwaSA9IGFwaTtcclxuICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgc2V0Rm9jdXNlZENlbGwocm93SW5kZXg6IGFueSwgY29sSW5kZXg6IGFueSkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5lbnN1cmVJbmRleFZpc2libGUocm93SW5kZXgpO1xyXG4gICAgICAgICAgICB0aGlzLmdyaWRQYW5lbC5lbnN1cmVDb2xJbmRleFZpc2libGUoY29sSW5kZXgpO1xyXG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5yb3dSZW5kZXJlci5zZXRGb2N1c2VkQ2VsbChyb3dJbmRleCwgY29sSW5kZXgpO1xyXG4gICAgICAgICAgICB9LCAxMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBnZXRTb3J0TW9kZWwoKSB7XHJcbiAgICAgICAgICAgIHZhciBhbGxDb2x1bW5zID0gdGhpcy5jb2x1bW5Nb2RlbC5nZXRBbGxDb2x1bW5zKCk7XHJcbiAgICAgICAgICAgIHZhciBjb2x1bW5zV2l0aFNvcnRpbmcgPSA8YW55PltdO1xyXG4gICAgICAgICAgICB2YXIgaTogYW55O1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQ29sdW1ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsbENvbHVtbnNbaV0uc29ydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnNXaXRoU29ydGluZy5wdXNoKGFsbENvbHVtbnNbaV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbHVtbnNXaXRoU29ydGluZy5zb3J0KGZ1bmN0aW9uIChhOiBhbnksIGI6IGFueSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEuc29ydGVkQXQgLSBiLnNvcnRlZEF0O1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSA8YW55PltdO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29sdW1uc1dpdGhTb3J0aW5nLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0RW50cnkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6IGNvbHVtbnNXaXRoU29ydGluZ1tpXS5jb2xEZWYuZmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgc29ydDogY29sdW1uc1dpdGhTb3J0aW5nW2ldLnNvcnRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChyZXN1bHRFbnRyeSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRTb3J0TW9kZWwoc29ydE1vZGVsOiBhbnkpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZVNvcnRpbmcoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdhZy1ncmlkOiBZb3UgYXJlIHNldHRpbmcgdGhlIHNvcnQgbW9kZWwgb24gYSBncmlkIHRoYXQgZG9lcyBub3QgaGF2ZSBzb3J0aW5nIGVuYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBmaXJzdCB1cCwgY2xlYXIgYW55IHByZXZpb3VzIHNvcnRcclxuICAgICAgICAgICAgdmFyIHNvcnRNb2RlbFByb3ZpZGVkID0gc29ydE1vZGVsICE9PSBudWxsICYmIHNvcnRNb2RlbCAhPT0gdW5kZWZpbmVkICYmIHNvcnRNb2RlbC5sZW5ndGggPiAwO1xyXG4gICAgICAgICAgICB2YXIgYWxsQ29sdW1ucyA9IHRoaXMuY29sdW1uTW9kZWwuZ2V0QWxsQ29sdW1ucygpO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbENvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBjb2x1bW4gPSBhbGxDb2x1bW5zW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBzb3J0Rm9yQ29sOiBhbnkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNvcnRlZEF0ID0gLTE7XHJcbiAgICAgICAgICAgICAgICBpZiAoc29ydE1vZGVsUHJvdmlkZWQgJiYgIWNvbHVtbi5jb2xEZWYuc3VwcHJlc3NTb3J0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBzb3J0TW9kZWwubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvcnRNb2RlbEVudHJ5ID0gc29ydE1vZGVsW2pdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNvcnRNb2RlbEVudHJ5LmZpZWxkID09PSAnc3RyaW5nJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgdHlwZW9mIGNvbHVtbi5jb2xEZWYuZmllbGQgPT09ICdzdHJpbmcnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBzb3J0TW9kZWxFbnRyeS5maWVsZCA9PT0gY29sdW1uLmNvbERlZi5maWVsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc29ydEZvckNvbCA9IHNvcnRNb2RlbEVudHJ5LnNvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0ZWRBdCA9IGo7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNvcnRGb3JDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uc29ydCA9IHNvcnRGb3JDb2w7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sdW1uLnNvcnRlZEF0ID0gc29ydGVkQXQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbi5zb3J0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb2x1bW4uc29ydGVkQXQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uU29ydGluZ0NoYW5nZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uU29ydGluZ0NoYW5nZWQoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyUmVuZGVyZXIudXBkYXRlU29ydEljb25zKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyaWRPcHRpb25zV3JhcHBlci5pc0VuYWJsZVNlcnZlclNpZGVTb3J0aW5nKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlmIGRvaW5nIHNlcnZlciBzaWRlIHNvcnRpbmcsIGNoYW5naW5nIHRoZSBzb3J0IGhhcyB0aGUgaW1wYWN0XHJcbiAgICAgICAgICAgICAgICAvLyBvZiByZXNldHRpbmcgdGhlIGRhdGFzb3VyY2VcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RGF0YXNvdXJjZSgpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgZG9pbmcgaW4gbWVtb3J5IHNvcnRpbmcsIHdlIGp1c3QgdXBkYXRlIHRoZSBpbiBtZW1vcnkgZGF0YVxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbEFuZFJlZnJlc2goQ29uc3RhbnRzLlNURVBfU09SVCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGFkZFZpcnR1YWxSb3dMaXN0ZW5lcihyb3dJbmRleDogYW55LCBjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XSA9IFtdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudmlydHVhbFJvd0NhbGxiYWNrc1tyb3dJbmRleF0ucHVzaChjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvblZpcnR1YWxSb3dTZWxlY3RlZChyb3dJbmRleDogYW55LCBzZWxlY3RlZDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGluZm9ybSB0aGUgY2FsbGJhY2tzIG9mIHRoZSBldmVudFxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjay5yb3dSZW1vdmVkID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLnJvd1NlbGVjdGVkKHNlbGVjdGVkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb25WaXJ0dWFsUm93UmVtb3ZlZChyb3dJbmRleDogYW55KSB7XHJcbiAgICAgICAgICAgIC8vIGluZm9ybSB0aGUgY2FsbGJhY2tzIG9mIHRoZSBldmVudFxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjazogYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjay5yb3dSZW1vdmVkID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLnJvd1JlbW92ZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyByZW1vdmUgdGhlIGNhbGxiYWNrc1xyXG4gICAgICAgICAgICBkZWxldGUgdGhpcy52aXJ0dWFsUm93Q2FsbGJhY2tzW3Jvd0luZGV4XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9uTmV3Q29scygpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXR1cENvbHVtbnMoKTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVNb2RlbEFuZFJlZnJlc2goQ29uc3RhbnRzLlNURVBfRVZFUllUSElORyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB1cGRhdGVCb2R5Q29udGFpbmVyV2lkdGhBZnRlckNvbFJlc2l6ZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5yb3dSZW5kZXJlci5zZXRNYWluUm93V2lkdGhzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZFBhbmVsLnNldEJvZHlDb250YWluZXJXaWR0aCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdXBkYXRlUGlubmVkQ29sQ29udGFpbmVyV2lkdGhBZnRlckNvbFJlc2l6ZSgpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkUGFuZWwuc2V0UGlubmVkQ29sQ29udGFpbmVyV2lkdGgoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRvTGF5b3V0KCkge1xyXG4gICAgICAgICAgICAvLyBuZWVkIHRvIGRvIGxheW91dCBmaXJzdCwgYXMgZHJhd1ZpcnR1YWxSb3dzIGFuZCBzZXRQaW5uZWRDb2xIZWlnaHRcclxuICAgICAgICAgICAgLy8gbmVlZCB0byBrbm93IHRoZSByZXN1bHQgb2YgdGhlIHJlc2l6aW5nIG9mIHRoZSBwYW5lbHMuXHJcbiAgICAgICAgICAgIHZhciBzaXplQ2hhbmdlZCA9IHRoaXMuZVJvb3RQYW5lbC5kb0xheW91dCgpO1xyXG4gICAgICAgICAgICAvLyBib3RoIG9mIHRoZSB0d28gYmVsb3cgc2hvdWxkIGJlIGRvbmUgaW4gZ3JpZFBhbmVsLCB0aGUgZ3JpZFBhbmVsIHNob3VsZCByZWdpc3RlciAncmVzaXplJyB0byB0aGUgcGFuZWxcclxuICAgICAgICAgICAgaWYgKHNpemVDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd1JlbmRlcmVyLmRyYXdWaXJ0dWFsUm93cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmlkUGFuZWwuc2V0UGlubmVkQ29sSGVpZ2h0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiLy8vIDxyZWZlcmVuY2UgcGF0aD1cImdyaWQudHNcIiAvPlxyXG5cclxuZGVjbGFyZSB2YXIgYW5ndWxhcjogYW55O1xyXG5kZWNsYXJlIHZhciBleHBvcnRzOiBhbnk7XHJcbmRlY2xhcmUgdmFyIG1vZHVsZTogYW55O1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIG9yIGBleHBvcnRzYFxyXG4gICAgdmFyIHJvb3QgPSB0aGlzO1xyXG5cclxuICAgIC8vIGlmIGFuZ3VsYXIgaXMgcHJlc2VudCwgcmVnaXN0ZXIgdGhlIGRpcmVjdGl2ZVxyXG4gICAgaWYgKHR5cGVvZiBhbmd1bGFyICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHZhciBhbmd1bGFyTW9kdWxlID0gYW5ndWxhci5tb2R1bGUoXCJhbmd1bGFyR3JpZFwiLCBbXSk7XHJcbiAgICAgICAgYW5ndWxhck1vZHVsZS5kaXJlY3RpdmUoXCJhbmd1bGFyR3JpZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHJlc3RyaWN0OiBcIkFcIixcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRjb21waWxlJywgQW5ndWxhckRpcmVjdGl2ZUNvbnRyb2xsZXJdLFxyXG4gICAgICAgICAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyR3JpZDogXCI9XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBhbmd1bGFyTW9kdWxlLmRpcmVjdGl2ZShcImFnR3JpZFwiLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHJlc3RyaWN0OiBcIkFcIixcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJGVsZW1lbnQnLCAnJHNjb3BlJywgJyRjb21waWxlJywgJyRhdHRycycsIEFuZ3VsYXJEaXJlY3RpdmVDb250cm9sbGVyXSxcclxuICAgICAgICAgICAgICAgIHNjb3BlOiB0cnVlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyR3JpZEdsb2JhbEZ1bmN0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBleHBvcnRzLmFuZ3VsYXJHcmlkID0gYW5ndWxhckdyaWRHbG9iYWxGdW5jdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICByb290LmFuZ3VsYXJHcmlkID0gYW5ndWxhckdyaWRHbG9iYWxGdW5jdGlvbjtcclxuXHJcbiAgICBmdW5jdGlvbiBBbmd1bGFyRGlyZWN0aXZlQ29udHJvbGxlcigkZWxlbWVudDogYW55LCAkc2NvcGU6IGFueSwgJGNvbXBpbGU6IGFueSwgJGF0dHJzOiBhbnkpIHtcclxuICAgICAgICB2YXIgZ3JpZE9wdGlvbnM6IGFueTtcclxuICAgICAgICB2YXIgcXVpY2tGaWx0ZXJPblNjb3BlOiBhbnk7XHJcbiAgICAgICAgaWYgKCRhdHRycykge1xyXG4gICAgICAgICAgICAvLyBuZXcgZGlyZWN0aXZlIG9mIGFnLWdyaWRcclxuICAgICAgICAgICAgdmFyIGtleU9mR3JpZEluU2NvcGUgPSAkYXR0cnMuYWdHcmlkO1xyXG4gICAgICAgICAgICBxdWlja0ZpbHRlck9uU2NvcGUgPSBrZXlPZkdyaWRJblNjb3BlICsgJy5xdWlja0ZpbHRlclRleHQnO1xyXG4gICAgICAgICAgICBncmlkT3B0aW9ucyA9ICRzY29wZS4kZXZhbChrZXlPZkdyaWRJblNjb3BlKTtcclxuICAgICAgICAgICAgaWYgKCFncmlkT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiV0FSTklORyAtIGdyaWQgb3B0aW9ucyBmb3IgQW5ndWxhciBHcmlkIG5vdCBmb3VuZC4gUGxlYXNlIGVuc3VyZSB0aGUgYXR0cmlidXRlIGFnLWdyaWQgcG9pbnRzIHRvIGEgdmFsaWQgb2JqZWN0IG9uIHRoZSBzY29wZVwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIG9sZCBkaXJlY3RpdmUgb2YgYW5ndWxhci1ncmlkXHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIldBUk5JTkcgLSBEaXJlY3RpdmUgYW5ndWxhci1ncmlkIGlzIGRlcHJlY2F0ZWQsIHlvdSBzaG91bGQgdXNlIHRoZSBhZy1ncmlkIGRpcmVjdGl2ZSBpbnN0ZWFkLlwiKTtcclxuICAgICAgICAgICAgZ3JpZE9wdGlvbnMgPSAkc2NvcGUuYW5ndWxhckdyaWQ7XHJcbiAgICAgICAgICAgIHF1aWNrRmlsdGVyT25TY29wZSA9ICdhbmd1bGFyR3JpZC5xdWlja0ZpbHRlclRleHQnO1xyXG4gICAgICAgICAgICBpZiAoIWdyaWRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJXQVJOSU5HIC0gZ3JpZCBvcHRpb25zIGZvciBBbmd1bGFyIEdyaWQgbm90IGZvdW5kLiBQbGVhc2UgZW5zdXJlIHRoZSBhdHRyaWJ1dGUgYW5ndWxhci1ncmlkIHBvaW50cyB0byBhIHZhbGlkIG9iamVjdCBvbiB0aGUgc2NvcGVcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBlR3JpZERpdiA9ICRlbGVtZW50WzBdO1xyXG4gICAgICAgIHZhciBncmlkID0gbmV3IGF3ay5ncmlkLkdyaWQoZUdyaWREaXYsIGdyaWRPcHRpb25zLCAkc2NvcGUsICRjb21waWxlLCBxdWlja0ZpbHRlck9uU2NvcGUpO1xyXG5cclxuICAgICAgICAkc2NvcGUuJG9uKFwiJGRlc3Ryb3lcIiwgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGdyaWQuc2V0RmluaXNoZWQoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBHbG9iYWwgRnVuY3Rpb24gLSB0aGlzIGZ1bmN0aW9uIGlzIHVzZWQgZm9yIGNyZWF0aW5nIGEgZ3JpZCwgb3V0c2lkZSBvZiBhbnkgQW5ndWxhckpTXHJcbiAgICBmdW5jdGlvbiBhbmd1bGFyR3JpZEdsb2JhbEZ1bmN0aW9uKGVsZW1lbnQ6IGFueSwgZ3JpZE9wdGlvbnM6IGFueSkge1xyXG4gICAgICAgIC8vIHNlZSBpZiBlbGVtZW50IGlzIGEgcXVlcnkgc2VsZWN0b3IsIG9yIGEgcmVhbCBlbGVtZW50XHJcbiAgICAgICAgdmFyIGVHcmlkRGl2OiBhbnk7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBlR3JpZERpdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWxlbWVudCk7XHJcbiAgICAgICAgICAgIGlmICghZUdyaWREaXYpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignV0FSTklORyAtIHdhcyBub3QgYWJsZSB0byBmaW5kIGVsZW1lbnQgJyArIGVsZW1lbnQgKyAnIGluIHRoZSBET00sIEFuZ3VsYXIgR3JpZCBpbml0aWFsaXNhdGlvbiBhYm9ydGVkLicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZUdyaWREaXYgPSBlbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXcgYXdrLmdyaWQuR3JpZChlR3JpZERpdiwgZ3JpZE9wdGlvbnMsIG51bGwsIG51bGwsIG51bGwpO1xyXG4gICAgfVxyXG5cclxufSkuY2FsbCh3aW5kb3cpO1xyXG4iLCJtb2R1bGUgYXdrIHtcclxuXHJcbiAgICBleHBvcnQgaW50ZXJmYWNlIEZpbHRlciB7XHJcblxyXG4gICAgICAgICAvLyBtYW5kYXRvcnkgbWV0aG9kc1xyXG4gICAgICAgIGdldEd1aSgpOiBhbnk7XHJcbiAgICAgICAgaXNGaWx0ZXJBY3RpdmUoKTogYm9vbGVhbjtcclxuICAgICAgICBkb2VzRmlsdGVyUGFzcyhwYXJhbXM6IGFueSk6IGJvb2xlYW47XHJcblxyXG4gICAgICAgIC8vIG9wdGlvbmFsIG1ldGhvZHNcclxuICAgICAgICBhZnRlckd1aUF0dGFjaGVkPygpOiB2b2lkO1xyXG4gICAgICAgIG9uTmV3Um93c0xvYWRlZD8oKTogdm9pZDtcclxuICAgIH1cclxuXHJcbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=